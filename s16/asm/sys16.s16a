///////////////////////////////////////////////////////////
//  System16/s16/asm/sys16.s16a                          //
///////////////////////////////////////////////////////////
//
//
//

    .include lib/io.s16a;

    ///////////////////////////////////////////////////////
    //  Hello_world.s16a                                 //
    ///////////////////////////////////////////////////////
    //

        .section        ro

            m8  buffer[14]      = "Hello, world!";

        .section        code

        function    _main


            dev     1, 4, __monitor;
            dev     2, 2, __keyboard;

            mov16   OI, 1;
            int     2;

            int     4;

            mov32   AX, buffer;
            mov16   OI, 2;
            
        call putchar;

        @next_byte

            int     4;

        //  Now we will add 1 to AX to point to the
        //  next byte in the buffer.
            add32  AX, 1;

        //  Is it the 0 byte?
            cmp8   #AX, 0;
            jne     next_byte

            ret     1;
        end

        function    __monitor

        //  The monitor always wants the instruction to
        //  be in FX.
            mov16   FX, %OI;

        //  Move the character we want to print into
        //  the EX register - note we use a mov8 since
        //  the display expects this to be an 8-bit
        //  ASCII code.
            mov8 EX, #AX;

        //  Return 0 (success) - as soon as we return, 
        //  the display module will be invoked and will
        //  grab the register values and act accordingly.

        end


        function    __keyboard

            mov16  FX, %OI;

        end
