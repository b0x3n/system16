/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/Bootstrap.js":
/*!*****************************!*\
  !*** ./src/js/Bootstrap.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _s16_s16_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./s16/s16.js */ \"./src/js/s16/s16.js\");\n///////////////////////////////////////////////////////////\r\n//  System16/src/js/Bootstrap.js                         //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//\r\n//\r\n\r\n\r\n\r\n\r\n\r\n    \r\n\r\n\r\n    const   Main                        = () =>\r\n    {\r\n\r\n        $(function() {\r\n        \r\n            $(window).on('load', () => {\r\n\r\n                const   __s16           = (0,_s16_s16_js__WEBPACK_IMPORTED_MODULE_0__.s16)();\r\n            \r\n            });\r\n        \r\n        });\r\n\r\n    };\r\n\r\n\r\n    Main();\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/Bootstrap.js?");

/***/ }),

/***/ "./src/js/s16/core/ins/s16Calc.js":
/*!****************************************!*\
  !*** ./src/js/s16/core/ins/s16Calc.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s16Calc: () => (/* binding */ s16Calc)\n/* harmony export */ });\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/s16/core/ins/s16Calc.js          //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  The s16Calc module implements a bunch of mathematical\r\n//  instructions:\r\n//\r\n//      add8, add16, add32\r\n//      sub8, sub16, sub32\r\n//      div8, div16, div32\r\n//      mul8, mul16, mul32\r\n//\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The s16Calc module.                                  //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const    s16Calc             = (\r\n\r\n        s16Devices,\r\n        read_ram,\r\n        write_ram,\r\n        get_reg,\r\n        set_reg\r\n\r\n    ) =>\r\n    {\r\n\r\n        const   _instruction            = \"Math\";\r\n\r\n\r\n        const   _info                   =\r\n        [\r\n\r\n            window.S16_MNEMONIC_INFO('add8'),\r\n            window.S16_MNEMONIC_INFO('add16'),\r\n            window.S16_MNEMONIC_INFO('add32'),\r\n\r\n            window.S16_MNEMONIC_INFO('sub8'),\r\n            window.S16_MNEMONIC_INFO('sub16'),\r\n            window.S16_MNEMONIC_INFO('sub32'),\r\n\r\n            window.S16_MNEMONIC_INFO('div8'),\r\n            window.S16_MNEMONIC_INFO('div16'),\r\n            window.S16_MNEMONIC_INFO('div32'),\r\n\r\n            window.S16_MNEMONIC_INFO('mul8'),\r\n            window.S16_MNEMONIC_INFO('mul16'),\r\n            window.S16_MNEMONIC_INFO('mul32')\r\n\r\n        ];\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __calc()                                             //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  All of the mnemonic methods are just wrappers that\r\n//  call __calc().\r\n//\r\n        const   __calc                  = (\r\n\r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            let     __lval_addr         = code_line[6];\r\n            let     __rval              = code_line[7];\r\n\r\n    //  The __lval is an address containing the value\r\n    //  we need so we need to figure out what section\r\n    //  it's in.\r\n    //\r\n            let     __lval_segment      = s16Process.code_segment;\r\n\r\n            if (__lval_addr >= s16Process.ro_offset && __lval_addr < s16Process.rw_offset)\r\n                __lval_segment          = s16Process.ro_segment;\r\n            if (__lval_addr >= s16Process.rw_offset && __lval_addr < s16Process.code_offset)\r\n                __lval_segment          = s16Process.rw_segment;\r\n\r\n            let     __mnemonic          = code_line[4];\r\n\r\n    //  Set the appropriate size parameter for the read to\r\n    //  __dst_addr.\r\n    //\r\n            let     __lval_size;\r\n\r\n            if (\r\n                (__mnemonic === window.S16_MNEMONIC_ADD8)   ||\r\n                (__mnemonic === window.S16_MNEMONIC_SUB8)   ||\r\n                (__mnemonic === window.S16_MNEMONIC_DIV8)   ||\r\n                (__mnemonic === window.S16_MNEMONIC_MUL8)\r\n            ) __lval_size               = 1;\r\n            if (\r\n                (__mnemonic === window.S16_MNEMONIC_ADD16)   ||\r\n                (__mnemonic === window.S16_MNEMONIC_SUB16)   ||\r\n                (__mnemonic === window.S16_MNEMONIC_DIV16)   ||\r\n                (__mnemonic === window.S16_MNEMONIC_MUL16)\r\n            ) __lval_size               = 2;\r\n            if (\r\n                (__mnemonic === window.S16_MNEMONIC_ADD32)   ||\r\n                (__mnemonic === window.S16_MNEMONIC_SUB32)   ||\r\n                (__mnemonic === window.S16_MNEMONIC_DIV32)   ||\r\n                (__mnemonic === window.S16_MNEMONIC_MUL32)\r\n            ) __lval_size               = 4;\r\n\r\n    //  Grab the __lval and do the calculation...\r\n    //\r\n            let     __lval              = read_ram(\r\n                __lval_segment,\r\n                __lval_addr,\r\n                __lval_size\r\n            );\r\n\r\n            if (__mnemonic.substr(0, 3) === 'add')\r\n                __lval += __rval;\r\n            if (__mnemonic.substr(0, 3) === 'sub')\r\n                __lval -= __rval;\r\n            if (__mnemonic.substr(0, 3) === 'div')\r\n                __lval /= __rval;\r\n            if (__mnemonic.substr(0, 3) === 'mul')\r\n                __lval *= __rval;\r\n\r\n    //  The result is written back to __lval_addr.\r\n    //\r\n            write_ram(\r\n                __lval_segment,\r\n                __lval_addr,\r\n                __lval,\r\n                __lval_size\r\n            );\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _add8()                                              //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _add8                   = (\r\n\r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            return __calc(\r\n                s16Process,\r\n                code_line\r\n            );\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _add16()                                             //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _add16                  = (\r\n\r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            return __calc(\r\n                s16Process,\r\n                code_line\r\n            );\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _add32()                                             //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _add32                  = (\r\n\r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            return __calc(\r\n                s16Process,\r\n                code_line\r\n            );\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _sub8()                                              //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _sub8                   = (\r\n\r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            return __calc(\r\n                s16Process,\r\n                code_line\r\n            );\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _sub16()                                             //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _sub16                  = (\r\n\r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            return __calc(\r\n                s16Process,\r\n                code_line\r\n            );\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _sub32()                                             //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _sub32                  = (\r\n\r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            return __calc(\r\n                s16Process,\r\n                code_line\r\n            );\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _div8()                                              //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _div8                   = (\r\n\r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            return __calc(\r\n                s16Process,\r\n                code_line\r\n            );\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _div16()                                             //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _div16                  = (\r\n\r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            return __calc(\r\n                s16Process,\r\n                code_line\r\n            );\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _div32()                                             //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _div32                  = (\r\n\r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            return __calc(\r\n                s16Process,\r\n                code_line\r\n            );\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _mul8()                                              //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _mul8                   = (\r\n\r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            return __calc(\r\n                s16Process,\r\n                code_line\r\n            );\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _mul16()                                             //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _mul16                  = (\r\n\r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            return __calc(\r\n                s16Process,\r\n                code_line\r\n            );\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _mul32()                                             //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _mul32                  = (\r\n\r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            return __calc(\r\n                s16Process,\r\n                code_line\r\n            );\r\n\r\n        };\r\n\r\n\r\n        return {\r\n\r\n            instruction:                _instruction,\r\n            info:                       _info,\r\n\r\n            add8:                       _add8,\r\n            add16:                      _add16,\r\n            add32:                      _add32,\r\n\r\n            sub8:                       _sub8,\r\n            sub16:                      _sub16,\r\n            sub32:                      _sub32,\r\n\r\n            div8:                       _div8,\r\n            div16:                      _div16,\r\n            div32:                      _div32,\r\n\r\n            mul8:                       _mul8,\r\n            mul16:                      _mul16,\r\n            mul32:                      _mul32\r\n\r\n        };\r\n\r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/s16/core/ins/s16Calc.js?");

/***/ }),

/***/ "./src/js/s16/core/ins/s16Call.js":
/*!****************************************!*\
  !*** ./src/js/s16/core/ins/s16Call.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s16Call: () => (/* binding */ s16Call)\n/* harmony export */ });\n/* harmony import */ var _s16Push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./s16Push.js */ \"./src/js/s16/core/ins/s16Push.js\");\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/s16/core/ins/s16Call.js          //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  Module for the call instruction.\r\n//\r\n\r\n\r\n    \r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The s16Call instruction.                             //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const    s16Call             = (\r\n\r\n        s16Devices,\r\n        read_ram,\r\n        write_ram,\r\n        get_reg,\r\n        set_reg\r\n\r\n    ) =>\r\n    {\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  Makes use of the push instruction set.\r\n    //\r\n        const   __push                  = (0,_s16Push_js__WEBPACK_IMPORTED_MODULE_0__.s16Push)(\r\n            s16Devices,\r\n            read_ram,\r\n            write_ram,\r\n            get_reg,\r\n            set_reg\r\n        );\r\n\r\n\r\n        const   _instruction            = \"call\";\r\n\r\n\r\n        const   _info                   =\r\n        [\r\n\r\n            window.S16_MNEMONIC_INFO('call')\r\n\r\n        ];\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _call()                                              //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _call                   = (\r\n            \r\n            s16Process,\r\n            code_line,\r\n            handler_id                  = 255\r\n\r\n        ) =>\r\n        {\r\n\r\n    //  We need to do a few things here, first we need\r\n    //  to push the current IP onto the stack.\r\n    //\r\n    //  We just pass an empty array with element 6\r\n    //  specifying the current instruction pointer.\r\n    //\r\n            __push.push(\r\n                s16Process,\r\n                [ 0, 0, 0, 0, 0, 0, get_reg(s16Process.code_segment, 'IP') ],\r\n                2\r\n            );\r\n\r\n\r\n    //  Now we set the IP register to the specified\r\n    //  address in code_line[6].\r\n    //\r\n            set_reg(s16Process.code_segment, 'IP', code_line[6]);\r\n\r\n\r\n    //  We need to increase the current call_depth value\r\n    //  in the s16Process object - this keeps track of\r\n    //  function nesting.\r\n    //\r\n            s16Process.call_depth++;\r\n\r\n    //  The handler ID is set to 255 for a regular\r\n    //  call - the s16Int module uses call as a dependency,\r\n    //  if an int instruction is executed it will call\r\n    //  this method and pass a handler_id that is the\r\n    //  index of the device module to interrupt.\r\n    //\r\n    //  We check and pop this on the return - if it's\r\n    //  255 we simply return, if it's a value < 255\r\n    //  then it should be a device index in the range\r\n    //  0-7 inclusive.\r\n    //\r\n            s16Process.call_type.push(handler_id);\r\n            \r\n            return true;\r\n\r\n        };\r\n\r\n\r\n        return {\r\n\r\n            instruction:                _instruction,\r\n            info:                       _info,\r\n\r\n            call:                       _call\r\n\r\n        };\r\n\r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/s16/core/ins/s16Call.js?");

/***/ }),

/***/ "./src/js/s16/core/ins/s16Cmp.js":
/*!***************************************!*\
  !*** ./src/js/s16/core/ins/s16Cmp.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s16Cmp: () => (/* binding */ s16Cmp)\n/* harmony export */ });\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/s16/core/int/s16Cmp.js           //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  The cmp instruction set.\r\n//\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The s16Cmp instruction.                              //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const    s16Cmp              = (\r\n\r\n        s16Devices,\r\n        read_ram,\r\n        write_ram,\r\n        get_reg,\r\n        set_reg\r\n\r\n    ) =>\r\n    {\r\n\r\n        const   _instruction            = \"cmp\";\r\n\r\n\r\n        const   _info                   =\r\n        [\r\n\r\n            window.S16_MNEMONIC_INFO(\"cmp8\"),\r\n            window.S16_MNEMONIC_INFO(\"cmp16\"),\r\n            window.S16_MNEMONIC_INFO(\"cmp32\")\r\n\r\n        ];\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _cmp()                                               //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _cmp                    = (\r\n\r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n    //  We set a bit in flags to indicate the outcome\r\n    //  of a comparison - see:\r\n    //\r\n    //      System16/s16/src/js/s16/defs/s16Eval.js\r\n    //\r\n    //  For more info.\r\n    //\r\n            let     __flags             = get_reg(\r\n                s16Process.code_segment,\r\n                'FL'\r\n            );\r\n\r\n    //  Clear the first 3 bits.\r\n    //\r\n            __flags &= (~window.__s16Eval.S16_EVAL_RESET);\r\n\r\n    //  Now set the appropriate bit based on the outcome\r\n    //  of the evaluation...we are comparing the right\r\n    //  operand to the left, this matters:\r\n    //\r\n    //      cmp32   left, right;\r\n    //      jlt     function_name;\r\n    //\r\n    //  Here, we jump to function_name if right is less\r\n    //  than left - this is why I'm now comparing operand\r\n    //  2 (code_line[7]) to operand 1 (code_line[6]).\r\n    //\r\n            if (code_line[7] === code_line[6])\r\n                __flags |= window.__s16Eval.S16_EVAL_EQUALTO;\r\n            if (code_line[7] < code_line[6])\r\n                __flags |= window.__s16Eval.S16_EVAL_LESSTHAN;\r\n            if (code_line[7] > code_line[6])\r\n                __flags |= window.__s16Eval.S16_EVAL_GREATERTHAN;\r\n\r\n            set_reg(\r\n                s16Process.code_segment,\r\n                'FL',\r\n                __flags\r\n            );\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _cmp()                                               //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  In the case of cmp - we don't care about the size\r\n//  of the operands because nothing is being written\r\n//  anywhere - the 8, 16 and 32 postfix simply tells\r\n//  the fetcher the size of the operands - we don't\r\n//  need to care since they're now tokenised in an\r\n//  array - so the _cmp8, _cmp16 and _cmp32 methods\r\n//  are just wrappers or aliases for _cmp.\r\n//\r\n        const   _cmp8                   = (\r\n\r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            _cmp(\r\n                s16Process,\r\n                code_line\r\n            );\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _cmp16()                                              //\r\n///////////////////////////////////////////////////////////\r\n//  \r\n        const   _cmp16                  = (\r\n\r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            _cmp(\r\n                s16Process,\r\n                code_line\r\n            );\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _cmp32()                                             //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _cmp32                  = (\r\n\r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            _cmp(\r\n                s16Process,\r\n                code_line\r\n            );\r\n\r\n        };\r\n\r\n\r\n        return {\r\n\r\n            instruction:                _instruction,\r\n            info:                       _info,\r\n\r\n            cmp8:                       _cmp8,\r\n            cmp16:                      _cmp16,\r\n            cmp32:                      _cmp32\r\n\r\n        };\r\n        \r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/s16/core/ins/s16Cmp.js?");

/***/ }),

/***/ "./src/js/s16/core/ins/s16Dev.js":
/*!***************************************!*\
  !*** ./src/js/s16/core/ins/s16Dev.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s16Dev: () => (/* binding */ s16Dev)\n/* harmony export */ });\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/s16/core/ops/s16Dev.js           //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  Module for the dev instruction.\r\n//\r\n//  All of the modules in the ops/ directory follow the\r\n//  same structure/format - for more detailed comments\r\n//  see the module for the mov set of instructions.\r\n//\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The s16Dev instruction.                              //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const    s16Dev              = (\r\n\r\n        s16Devices,\r\n        read_ram,\r\n        write_ram,\r\n        get_reg,\r\n        set_reg\r\n\r\n    ) =>\r\n    {\r\n\r\n        const   _instruction            = \"dev\";\r\n        \r\n        const   _info                   =\r\n        [\r\n\r\n            window.S16_MNEMONIC_INFO('dev'),\r\n\r\n        ];\r\n        \r\n\r\n///////////////////////////////////////////////////////////\r\n//  _dev()                                               //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _dev                    = (\r\n        \r\n            s16Process,\r\n            code_line\r\n        \r\n        ) =>\r\n        {\r\n\r\n    //  Our parameters start at element 6 of the code_line\r\n    //  array, we need three for the dev instruction:\r\n    //\r\n    //      <device_id>, <interrupt_id>, <function_address>\r\n    //\r\n    //  The device_id refers to one of the devices in the\r\n    //  s16Devices array that is passed  to the s16Core\r\n    //  module, the default order being:\r\n    //\r\n    //      s16Devices =\r\n    //      [\r\n    //          s16Ram,\r\n    //          s16Display\r\n    //          s16Keyboard\r\n    //      ]\r\n    //\r\n    //  So we can assign an interrupt ID to a device and\r\n    //  aassign a default handler that will be invoked\r\n    //  any time that device is interrupted - e.g:\r\n    //\r\n    //      dev     1, 10, __display_handler;\r\n    //\r\n    //  Now when we call:\r\n    //\r\n    //      int     10;\r\n    //\r\n    //  The __display_handler function (if it exists) will\r\n    //  be executed BEFORE the display module carries out\r\n    //  whatever operation we want.\r\n    //\r\n    //  You can't interrupt ram, so you can't do:\r\n    //\r\n    //      dev     0, <number>, __function_name;\r\n    //\r\n    //  But you can do it for up to 8 additional device\r\n    //  modules in the s16Devices array.\r\n    //\r\n\r\n            let     __device_index      = code_line[6];\r\n            let     __device_interrupt  = code_line[7];\r\n            let     __device_handler    = code_line[8];\r\n\r\n    //  This information is written to the vector table\r\n    //  at offset 50 in the header - each entry is 5\r\n    //  bytes and we can have up to 8 devices, so 40\r\n    //  bytes is the size of the table.\r\n    //\r\n    //  The table looks like this:\r\n    //\r\n    //      offset 50 - the interrupt ID for device 1\r\n    //      offset 51 - the interrupt ID for device 2\r\n    //      offset 52 - the interrupt ID for device 3\r\n    //      offset 53 - the interrupt ID for device 4\r\n    //      offset 54 - the interrupt ID for device 5\r\n    //      offset 55 - the interrupt ID for device 6\r\n    //      offset 56 - the interrupt ID for device 7\r\n    //      offset 57 - the interrupt ID for device 8\r\n    //\r\n    //  The interrupt ID's are indexed in bytes 50-57\r\n    //  with each ID consuming a single byte.\r\n    //\r\n    //  The function offsets are at offset 58-89:\r\n    //\r\n    //      offset 58 - address of handler for device 0\r\n    //      offset 62 - address of handler for device 1\r\n    //      offset 66 - address of handler for device 2\r\n    //      offset 70 - address of handler for device 3\r\n    //      offset 74 - address of handler for device 4\r\n    //      offset 78 - address of handler for device 5\r\n    //      offset 82 - address of handler for device 6\r\n    //      offset 86 - address of handler for device 7\r\n    //\r\n            if (__device_index < 1 || __device_index > 8)\r\n                return `dev error: device index ${__device_index} out of range - the range is 1-8, inclusive`;\r\n\r\n    //  We use device indexes in the range 1-8, this is\r\n    //  because the s16Ram device module is at index 0\r\n    //  of the s16Devices array - but we can't assign\r\n    //  an interrupt to RAM so our real index is\r\n    //  (__device_index - 1)\r\n    //\r\n            __device_index--;\r\n\r\n    //  We can only assign an interrupt to a particular\r\n    //  device module once, we can't change it or unset\r\n    //  it unless we explicitly do it in the assembly\r\n    //   code.\r\n    //\r\n            const   __check_index       = read_ram(\r\n                s16Process.code_segment,\r\n                (window.S16_HEADER_VTABLE + __device_index),\r\n                window.__s16Sys.__mode\r\n            );\r\n\r\n            if (__check_index > 0)\r\n                return `dev error: Device at index ${__device_index} already assigned ID ${__check_index}`;\r\n\r\n    //  The interrupt ID must be in the inclusive range\r\n    //  1-255, it must also be unique meaning no other\r\n    //  device may be using the same interrupt.\r\n    //\r\n            for (let offset = 0; offset < 8; offset++)\r\n            {\r\n                const   __interrupt     = read_ram(\r\n                    s16Process.code_segment,\r\n                    (window.S16_HEADER_VTABLE + offset),\r\n                    1\r\n                );\r\n\r\n                if (__interrupt === __device_interrupt)\r\n                    return `dev error: Can't assign ID ${__device_interrupt} to device ${__device_index} - interrupt ID already assigned to device ${(offset + 1)}`\r\n            }\r\n\r\n    //  All good - we can write the function offset to\r\n    //  the table.\r\n    //\r\n            const   __handler_offset    = ((__device_index * 4) + (window.S16_HEADER_VTABLE + 8));\r\n            \r\n            write_ram(\r\n                s16Process.code_segment,\r\n                (window.S16_HEADER_VTABLE + __device_index),\r\n                __device_interrupt,\r\n                1\r\n            );\r\n\r\n            write_ram(\r\n                s16Process.code_segment,\r\n                __handler_offset,\r\n                __device_handler,\r\n                window.__s16Sys.__mode\r\n            );\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n        return {\r\n\r\n            instruction:                _instruction,\r\n            info:                       _info,\r\n\r\n            dev:                        _dev\r\n\r\n        };\r\n\r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/s16/core/ins/s16Dev.js?");

/***/ }),

/***/ "./src/js/s16/core/ins/s16Int.js":
/*!***************************************!*\
  !*** ./src/js/s16/core/ins/s16Int.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s16Int: () => (/* binding */ s16Int)\n/* harmony export */ });\n/* harmony import */ var _s16Call_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./s16Call.js */ \"./src/js/s16/core/ins/s16Call.js\");\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/s16/core/ins/s16Int.js           //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  Module for the int instruction.\r\n//\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The int instruction makes use of call.               //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    \r\n\r\n\r\n    const    s16Int              = (\r\n\r\n        s16Devices,\r\n        read_ram,\r\n        write_ram,\r\n        get_reg,\r\n        set_reg\r\n\r\n    ) =>\r\n    {\r\n\r\n\r\n        const   __call                  = (0,_s16Call_js__WEBPACK_IMPORTED_MODULE_0__.s16Call)(\r\n            s16Devices,\r\n            read_ram,\r\n            write_ram,\r\n            get_reg,\r\n            set_reg\r\n        );\r\n\r\n\r\n        const   _instruction            = \"int\";\r\n\r\n\r\n        const   _info                   =\r\n        [\r\n\r\n            window.S16_MNEMONIC_INFO('int')\r\n\r\n        ];\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _int()                                               //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _int                    = (\r\n\r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            let     __handler_addr      = false;\r\n            let     __device_index      = 0;\r\n\r\n    //  First thing is to find the interrupt ID in the\r\n    //  vector table...\r\n    //\r\n            for (__device_index = 0; __device_index < 8; __device_index++)\r\n            {\r\n                const   __interrupt_id  = read_ram(\r\n                    s16Process.code_segment,\r\n                    (window.S16_HEADER_VTABLE + __device_index),\r\n                    1\r\n                );\r\n\r\n                if (__interrupt_id === code_line[6])\r\n                {\r\n                    __handler_addr      = read_ram(\r\n                        s16Process.code_segment,\r\n                        ((window.S16_HEADER_VTABLE + 8) + (__device_index * 4)),\r\n                        window.__s16Sys.__mode\r\n                    );\r\n\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (__handler_addr === false)\r\n                return `int error: Interrupt ID ${code_line[6]} not defined`;\r\n\r\n    //  Now we issue a call instruction, in this case\r\n    //  we pass an additional value, the devide index.\r\n    //\r\n    //  See the s16Call module for more info.\r\n    //\r\n            __call.call(\r\n                s16Process,\r\n                [ 0, 0, 0, 0, 0, 0, __handler_addr ],\r\n                __device_index\r\n            );\r\n\r\n        };\r\n\r\n\r\n        return {\r\n\r\n            instruction:                _instruction,\r\n            info:                       _info,\r\n\r\n            int:                        _int\r\n\r\n        };\r\n\r\n\r\n\r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/s16/core/ins/s16Int.js?");

/***/ }),

/***/ "./src/js/s16/core/ins/s16Jmp.js":
/*!***************************************!*\
  !*** ./src/js/s16/core/ins/s16Jmp.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s16Jmp: () => (/* binding */ s16Jmp)\n/* harmony export */ });\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/s16/code/ins/s16Jmp.js           //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  The jmp instruction set.\r\n//\r\n\r\n\r\n    const    s16Jmp              = (\r\n\r\n        s16Devices,\r\n        read_ram,\r\n        write_ram,\r\n        get_reg,\r\n        set_reg\r\n\r\n    ) =>\r\n    {\r\n\r\n        const   _instruction            = \"jmp\";\r\n\r\n\r\n        const   _info                   =\r\n        [\r\n\r\n            window.S16_MNEMONIC_INFO(\"jmp\"),\r\n            window.S16_MNEMONIC_INFO(\"je\"),\r\n            window.S16_MNEMONIC_INFO(\"jne\"),\r\n            window.S16_MNEMONIC_INFO(\"jge\"),\r\n            window.S16_MNEMONIC_INFO(\"jgt\"),\r\n            window.S16_MNEMONIC_INFO(\"jle\"),\r\n            window.S16_MNEMONIC_INFO(\"jlt\")\r\n\r\n        ];\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _jmp()                                               //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _jmp                    = (\r\n\r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n    //  So long as the address we're jumping to is\r\n    //  <= the code offset we're fine.\r\n    //\r\n            const   __jump_address      = code_line[6];\r\n\r\n            if (__jump_address < s16Process.code_offset)\r\n                return `${code_line[4]} error: Attempt to jump to an invalid location ${__jump_address}`;\r\n\r\n            set_reg(\r\n                s16Process.code_segment,\r\n                'IP',\r\n                __jump_address\r\n            );\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _je()                                                //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _je                     = (\r\n\r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   __flags             = get_reg(\r\n                s16Process.code_segment,\r\n                'FL'\r\n            );\r\n\r\n            if (__flags & window.__s16Eval.S16_EVAL_EQUALTO)\r\n                _jmp(\r\n                    s16Process,\r\n                    code_line\r\n                );\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _jne()                                               //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _jne                    = (\r\n\r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   __flags             = get_reg(\r\n                s16Process.code_segment,\r\n                'FL'\r\n            );\r\n\r\n            if (! (__flags & window.__s16Eval.S16_EVAL_EQUALTO))\r\n                _jmp(\r\n                    s16Process,\r\n                    code_line\r\n                );\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _jgt()                                               //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _jgt                    = (\r\n\r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   __flags             = get_reg(\r\n                s16Process.code_segment,\r\n                'FL'\r\n            );\r\n\r\n            if (__flags & window.__s16Eval.S16_EVAL_GREATERTHAN)\r\n                _jmp(\r\n                    s16Process,\r\n                    code_line\r\n                );\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _jge()                                               //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _jge                    = (\r\n\r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   __flags             = get_reg(\r\n                s16Process.code_segment,\r\n                'FL'\r\n            );\r\n\r\n            if (\r\n                (__flags & window.__s16Eval.S16_EVAL_GREATERTHAN)   ||\r\n                (__flags & window.__s16Eval.S16_EVAL_EQUALTO)\r\n            )\r\n                _jmp(\r\n                    s16Process,\r\n                    code_line\r\n                );\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _jlt()                                               //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _jlt                    = (\r\n\r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   __flags             = get_reg(\r\n                s16Process.code_segment,\r\n                'FL'\r\n            );\r\n\r\n            if (__flags & window.__s16Eval.S16_EVAL_LESSTHAN)\r\n                _jmp(\r\n                    s16Process,\r\n                    code_line\r\n                );\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _jle()                                               //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _jle                    = (\r\n\r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   __flags             = get_reg(\r\n                s16Process.code_segment,\r\n                'FL'\r\n            );\r\n\r\n            if (\r\n                (__flags & window.__s16Eval.S16_EVAL_LESSTHAN)   ||\r\n                (__flags & window.__s16Eval.S16_EVAL_EQUALTO)\r\n            )\r\n                _jmp(\r\n                    s16Process,\r\n                    code_line\r\n                );\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n        return {\r\n\r\n            instruction:                _instruction,\r\n            info:                       _info,\r\n\r\n            jmp:                        _jmp,\r\n            je:                         _je,\r\n            jne:                        _jne,\r\n            jgt:                        _jgt,\r\n            jge:                        _jge,\r\n            jlt:                        _jlt,\r\n            jle:                        _jle\r\n\r\n        };\r\n\r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/s16/core/ins/s16Jmp.js?");

/***/ }),

/***/ "./src/js/s16/core/ins/s16Mov.js":
/*!***************************************!*\
  !*** ./src/js/s16/core/ins/s16Mov.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s16Mov: () => (/* binding */ s16Mov)\n/* harmony export */ });\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/s16/core/ins/s16Mov.js           //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  Module for the mov instruction.\r\n//\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The s16Mov instruction.                              //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const    s16Mov              = (\r\n\r\n        s16Devices,\r\n        read_ram,\r\n        write_ram,\r\n        get_reg,\r\n        set_reg\r\n\r\n    ) =>\r\n    {\r\n\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  Instruction name - this is not the same as a\r\n    //  mnemonic, it's a group id for a set of mnemonics,\r\n    //  e.g \"mov\" comprises 3 mnemonics/instructions:\r\n    //\r\n    //      mov8\r\n    //      mov16\r\n    //      mov32\r\n    //\r\n        const   _instruction            = \"mov\";\r\n        \r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  Info for all of the instructions that belong to\r\n    //  this group.\r\n    // \r\n        const   _info                   =\r\n        [\r\n\r\n            window.S16_MNEMONIC_INFO('mov8'),\r\n            window.S16_MNEMONIC_INFO('mov16'),\r\n            window.S16_MNEMONIC_INFO('mov32')\r\n\r\n        ];\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _mov()                                               //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _mov                    = (\r\n\r\n            s16Process,\r\n            code_line,\r\n            size\r\n\r\n        ) =>\r\n        {\r\n\r\n            let     __dst_offset        = code_line[6];\r\n            let     __src_offset        = code_line[7];\r\n\r\n            let     __dst_segment       = s16Process.code_segment;\r\n            let     __src_segment       = s16Process.code_segment;\r\n\r\n            if (__dst_offset >= s16Process.ro_offset && __dst_offset < s16Process.rw_offset)\r\n                __dst_segment = s16Process.ro_segment;\r\n            if (__dst_offset >= s16Process.rw_offset && __dst_offset < s16Process.code_offset)\r\n                __dst_segment = s16Process.rw_segment;\r\n\r\n            // if (__src_offset >= s16Process.ro_offset && __src_offset < s16Process.rw_offset)\r\n            //     __src_offset = s16Process.ro_segment;\r\n            // if (__src_offset >= s16Process.rw_offset && __dst__src_offset_offset < s16Process.code_offset)\r\n            //     __src_offset = s16Process.rw_segment;\r\n\r\n            // const   __src_data          = read_ram(\r\n            //     __src_segment,\r\n            //     __src_offset,\r\n            //     size\r\n            // );\r\n\r\n            if (size > window.__s16Sys.__mode)  \r\n                size = window.__s16Sys.__mode;\r\n\r\nconsole.log(`>>>>>>>>>>>>>>>>>>>>... ${code_line[4]} write to ${__dst_offset}, value = ${code_line[7]}`)\r\n            write_ram(\r\n                __dst_segment,\r\n                __dst_offset,\r\n                code_line[7],\r\n                size\r\n            );\r\n            \r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _mov8()                                              //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  For every entry added to _info there should be a\r\n//  function. The function can be named anything but\r\n//  the public reference must match the mnemonic\r\n//  instruction.\r\n//\r\n        const   _mov8                   = (\r\n\r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            _mov(\r\n                s16Process,\r\n                code_line,\r\n                1\r\n            );\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _mov16()                                             //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _mov16                  =  (\r\n\r\n            s16Process,\r\n            code_line\r\n            \r\n        ) =>\r\n        {\r\n\r\n            _mov(\r\n                s16Process,\r\n                code_line,\r\n                2\r\n            );\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _mov32()                                             //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  For every mnemonic there should be a function. The\r\n//  function can be named anything but the public\r\n//  reference must match the mnemonic.\r\n//\r\n        const   _mov32                  =  (\r\n\r\n            s16Process,\r\n            code_line\r\n            \r\n        ) =>\r\n        {\r\n\r\n            _mov(\r\n                s16Process,\r\n                code_line,\r\n                4\r\n            );\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n        return {\r\n\r\n            instruction:                _instruction,\r\n            info:                       _info,\r\n\r\n            mov8:                       _mov8,\r\n            mov16:                      _mov16,\r\n            mov32:                      _mov32\r\n\r\n        };\r\n\r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/s16/core/ins/s16Mov.js?");

/***/ }),

/***/ "./src/js/s16/core/ins/s16Par.js":
/*!***************************************!*\
  !*** ./src/js/s16/core/ins/s16Par.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s16Par: () => (/* binding */ s16Par)\n/* harmony export */ });\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/s16/core/ins/s16Pqr.js           //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  The par instruction.\r\n//\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The s16Peek instruction.                             //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const    s16Par= (\r\n\r\n        s16Devices,\r\n        read_ram,\r\n        write_ram,\r\n        get_reg,\r\n        set_reg\r\n\r\n    ) =>\r\n    {\r\n\r\n\r\n        const   _instruction            = \"par\";\r\n\r\n\r\n        const   _info                   =\r\n        [\r\n\r\n            window.S16_MNEMONIC_INFO('par8'),\r\n            window.S16_MNEMONIC_INFO('par16'),\r\n            window.S16_MNEMONIC_INFO('par32'),\r\n\r\n        ];\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __par()                                              //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __par                   = (\r\n\r\n            s16Process,\r\n            code_line,\r\n            size\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   __bp                = get_reg(\r\n                s16Process.code_segment,\r\n                'BP'\r\n            );\r\n\r\n            const   __dst_offset        = code_line[6];\r\n            const   __offset            = code_line[7];\r\n\r\n            if (size > window.__s16Sys.__mode)\r\n                return `par error: can't write to ${size * 8}-bit address in ${window.__s16Sys.__mode}-bit mode`;\r\n\r\n            let     __dst_segment       = s16Process.code_segment;\r\n\r\n            if (__dst_offset >= s16Process.ro_offset && __dst_offset < s16Process.rw_offset)\r\n                __dst_segment           = s16Process.ro_segment;\r\n            if (__dst_offset >= s16Process.rw_offset && __dst_offset < s16Process.code_offset)\r\n                __dst_segment           = s16Process.rw_segment;\r\n\r\n            // if (size > window.__s16Sys.__mode)\r\n            //     size = window.__s16Sys.__mode;\r\n    //  __bp points to the old base pointer, __bp + 4\r\n    //  points to the return address, so we add 4\r\n    //  to the offset to reference the first parameter.\r\n    //\r\n            const   __par_value         = read_ram(\r\n                s16Process.code_segment,\r\n                (__bp + __offset + 4),\r\n                size\r\n            );\r\n\r\n            write_ram(\r\n                __dst_segment,\r\n                __dst_offset,\r\n                __par_value,\r\n                size\r\n            );\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _par8()                                              //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _par8                   = (\r\n\r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            return __par(\r\n                s16Process,\r\n                code_line,\r\n                1\r\n            );\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _par16()                                             //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _par16                  = (\r\n\r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            return __par(\r\n                s16Process,\r\n                code_line,\r\n                2\r\n            );\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _par32()                                             //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _par32                  = (\r\n\r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            return __par(\r\n                s16Process,\r\n                code_line,\r\n                4\r\n            );\r\n\r\n        };\r\n\r\n\r\n        return {\r\n\r\n            instruction:                _instruction,\r\n            info:                       _info,\r\n\r\n            par8:                       _par8,\r\n            par16:                      _par16,\r\n            par32:                      _par32\r\n\r\n        };\r\n\r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/s16/core/ins/s16Par.js?");

/***/ }),

/***/ "./src/js/s16/core/ins/s16Peek.js":
/*!****************************************!*\
  !*** ./src/js/s16/core/ins/s16Peek.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s16Peek: () => (/* binding */ s16Peek)\n/* harmony export */ });\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/s16/core/ins/s16Peek.js          //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  The peek instruction.\r\n//\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The s16Peek instruction module.                      //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const    s16Peek             = (\r\n\r\n        s16Devices,\r\n        read_ram,\r\n        write_ram,\r\n        get_reg,\r\n        set_reg\r\n\r\n    ) =>\r\n    {\r\n\r\n        const   _instruction            = \"peek\";\r\n\r\n\r\n        const   _info                   =\r\n        [\r\n\r\n            window.S16_MNEMONIC_INFO('peek')\r\n\r\n        ];\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _peek()                                              //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _peek                   = (\r\n\r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            let     __dst_offset        = code_line[6];\r\n            let     __segment           = code_line[7];\r\n            let     __offset            = code_line[8];\r\n            let     __size              = code_line[9];\r\n\r\n    //  Some basic access and bounds checking...\r\n    //\r\n            if (__size > window.__s16Sys.__mode)\r\n                return `peek error: Can't read ${__size} bytes, running in ${window.__s16Sys.__mode * 8}-bit mode`;\r\n            if (__size !== 1 && __size !== 2 && __size !== 4)\r\n                return `peek error: Invalid size property ${__size} - size must be 1, 2 or 4`;\r\n\r\n    //  If we're in protected mode then we can only read\r\n    //  from segments that belong to this process.\r\n    //\r\n            if (typeof window.__s16Sys.__protected !== 'undefined')\r\n            {\r\n                if (\r\n                    (__segment !== s16Process.code_segment)     &&\r\n                    (__segment !== s16Process.ro_segment)       &&\r\n                    (__segment !== s16Process.rw_segment)       &&\r\n                    (__segment !== s16Process.stack_segment)\r\n                )\r\n\r\n                return `peek error: Access violation - attempt to access segment ${__segment}`;\r\n            }\r\n\r\n            if (__segment >= s16Process.exe_header.segments)\r\n                return `peek error: Segment ${__segment} doesn't exist`;\r\n\r\n            console.log(`Peeking from ${__segment}:${__offset} - size = ${__size}`)\r\n    //  Grab the value.\r\n    //\r\n            const   __peek_value        = read_ram(\r\n                __segment,\r\n                __offset,\r\n                __size\r\n            );\r\n\r\n    //  What segment is __peek_value being stored in?\r\n    //\r\n            let     __dst_segment       = s16Process.code_segment;\r\n\r\n            if (__dst_offset >= s16Process.ro_offset && __dst_offset < s16Process.rw_offset)\r\n                __dst_segment          = s16Process.ro_segment;\r\n            if (__dst_offset >= s16Process.rw_offset && __dst_offset < s16Process.code_offset)\r\n                __dst_segment          = s16Process.rw_segment;\r\nconsole.log(`Peek write to ${__dst_segment}:${__dst_offset} - value = ${__peek_value}, size = ${__size}`)\r\n    //  Store the value - all done.\r\n    //\r\n            write_ram(\r\n                __dst_segment,\r\n                __dst_offset,\r\n                __peek_value,\r\n                window.__s16Sys.__mode\r\n            );\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n        return {\r\n\r\n            instruction:                _instruction,\r\n            info:                       _info,\r\n\r\n            peek:                       _peek\r\n\r\n        };\r\n\r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/s16/core/ins/s16Peek.js?");

/***/ }),

/***/ "./src/js/s16/core/ins/s16Pop.js":
/*!***************************************!*\
  !*** ./src/js/s16/core/ins/s16Pop.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s16Pop: () => (/* binding */ s16Pop)\n/* harmony export */ });\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/s16/core/ins/s16Pop.js           //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  Module for the pop instruction.\r\n//\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The s16Pop instruction.                              //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const    s16Pop              = (\r\n\r\n        s16Devices,\r\n        read_ram,\r\n        write_ram,\r\n        get_reg,\r\n        set_reg\r\n\r\n    ) =>\r\n    {\r\n\r\n        \r\n        const   _instruction            = \"pop\";\r\n\r\n        \r\n        const   _info                   =\r\n        [\r\n\r\n            window.S16_MNEMONIC_INFO('pop8'),\r\n            window.S16_MNEMONIC_INFO('pop16'),\r\n            window.S16_MNEMONIC_INFO('pop32')\r\n\r\n        ];\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _pop()                                               //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _pop                    = (\r\n        \r\n            s16Process,\r\n            code_line,\r\n            size\r\n        \r\n        ) =>\r\n        {\r\n\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  Some additional setup here - since we're dealing\r\n    //  with the stack it's useful to set the stack\r\n    //  segment and top.\r\n    //\r\n    //  The segment parameter passed to the instruction\r\n    //  methods points to the code segment, if we're\r\n    //  running on a split memory model the stack will\r\n    //  have its own segment...\r\n    //\r\n    //  ...yes, I did just copy & paste s16Push, so\r\n    //  what?\r\n    //\r\n            const   __stack_segment     = s16Process.stack_segment;\r\n            const   __code_segment      = s16Process.code_segment;\r\n\r\n            let     __stack_top         = 0;\r\n\r\n    //  When stack has its own segment the top of the\r\n    //  stack is 0 - when the stack and code share\r\n    //  a segment the top of the stack is in the HP\r\n    //  register.\r\n    //\r\n            if (__stack_segment === __code_segment)\r\n                __stack_top             = get_reg(__code_segment, 'HP');\r\n\r\n            const   __sp                = get_reg(__code_segment, 'SP');\r\n\r\n    //  Bounds check.\r\n    //\r\n            if (__sp > (s16Process.exe_header.maxaddr - size))\r\n                return `push8 error: Stack base ${s16Process.exe_header.maxaddr} exceeded`;\r\n\r\n    //  All good, we can write the byte(s)!\r\n    //\r\n            const   __popped_value      = read_ram(\r\n                __stack_segment,\r\n                __sp,\r\n                size\r\n            );\r\n\r\n    //  Update the stack pointer.\r\n    //\r\n            set_reg(__code_segment, 'SP', (__sp + size));\r\n\r\n            let     __write_segment     = __code_segment;\r\n\r\n            if (code_line[6] >= s16Process.ro_offset && code_line[6] < s16Process.rw_offset)\r\n                __write_segment         = s16Process.ro_segment;\r\n            if (code_line[6] >= s16Process.rw_offset && code_line[6] < s16Process.code_offset)\r\n                __write_segment         = s16Process.rw_segment;\r\n            \r\n            write_ram(\r\n                __write_segment,\r\n                code_line[6],\r\n                __popped_value,\r\n                size\r\n            );\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _pop8()                                              //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _pop8                   = (\r\n        \r\n            s16Process,\r\n            code_line\r\n        \r\n        ) =>\r\n        {\r\n\r\n            return _pop(\r\n                s16Process,\r\n                code_line,\r\n                1\r\n            );\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _pop16()                                             //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _pop16                  = (\r\n        \r\n            s16Process,\r\n            code_line\r\n        \r\n        ) =>\r\n        {\r\n\r\n            return _pop(\r\n                s16Process,\r\n                code_line,\r\n                2\r\n            );\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _pop32()                                             //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _pop32                  = (\r\n        \r\n            s16Process,\r\n            code_line\r\n        \r\n        ) =>\r\n        {\r\n\r\n            return _pop(\r\n                s16Process,\r\n                code_line,\r\n                4\r\n            );\r\n\r\n        };\r\n\r\n\r\n        return {\r\n\r\n            intruction:                 _instruction,\r\n            info:                       _info,\r\n\r\n            pop:                        _pop,\r\n            \r\n            pop8:                       _pop8,\r\n            pop16:                      _pop16,\r\n            pop32:                      _pop32\r\n\r\n        };\r\n\r\n\r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/s16/core/ins/s16Pop.js?");

/***/ }),

/***/ "./src/js/s16/core/ins/s16Push.js":
/*!****************************************!*\
  !*** ./src/js/s16/core/ins/s16Push.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s16Push: () => (/* binding */ s16Push)\n/* harmony export */ });\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/s16/core/ins/s16Push.js          //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  Module for the push instruction.\r\n//\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The s16Push instruction.                             //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const    s16Push             = (\r\n\r\n        s16Devices,\r\n        read_ram,\r\n        write_ram,\r\n        get_reg,\r\n        set_reg\r\n\r\n    ) =>\r\n    {\r\n\r\n        const   _instruction            = \"push\";\r\n\r\n        \r\n        const   _info                   =\r\n        [\r\n\r\n            window.S16_MNEMONIC_INFO('push8'),\r\n            window.S16_MNEMONIC_INFO('push16'),\r\n            window.S16_MNEMONIC_INFO('push32')\r\n\r\n        ];\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _push()                                              //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _push                   = (\r\n        \r\n            s16Process,\r\n            code_line,\r\n            size\r\n        \r\n        ) =>\r\n        {\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  Some additional setup here - since we're dealing\r\n    //  with the stack it's useful to set the stack\r\n    //  segment and top.\r\n    //\r\n    //  The segment parameter passed to the instruction\r\n    //  methods points to the code segment, if we're\r\n    //  running on a split memory model the stack will\r\n    //  have its own segment...\r\n    //\r\n            const   __stack_segment     = s16Process.stack_segment;\r\n            const   __code_segment      = s16Process.code_segment;\r\n\r\n            let     __stack_top         = 0;\r\n            \r\n    //  When stack has its own segment the top of the\r\n    //  stack is 0 - when the stack and code share\r\n    //  a segment the top of the stack is in the HP\r\n    //  register.\r\n    //\r\n            if (__stack_segment === __code_segment)\r\n                __stack_top             = get_reg(__code_segment, 'HP');\r\n\r\n            const   __sp                = get_reg(__code_segment, 'SP');\r\n\r\n    //  Bounds check.\r\n    //\r\n            if ((__sp - size) < __stack_top)\r\n                return `push8 error: Stack top ${__stack_top} exceeded`;\r\n\r\n    //  All good, we can write the byte(s)!\r\n    //\r\n            write_ram(\r\n                __stack_segment,\r\n                (__sp - size),\r\n                code_line[6],\r\n                size\r\n            );\r\n\r\n    //  Lastly - we update the stack pointer.\r\n    //\r\n            set_reg(__code_segment, 'SP', (__sp - size));\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _push8()                                             //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _push8                  = (\r\n        \r\n            s16Process,\r\n            code_line\r\n        \r\n        ) =>\r\n        {\r\n\r\n            return _push(\r\n                s16Process,\r\n                code_line,\r\n                1\r\n            );\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _push16()                                            //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _push16                 = (\r\n        \r\n            s16Process,\r\n            code_line\r\n        \r\n        ) =>\r\n        {\r\n\r\n            return _push(\r\n                s16Process,\r\n                code_line,\r\n                2\r\n            );\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _push32()                                            //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _push32                 = (\r\n        \r\n            s16Process,\r\n            code_line\r\n        \r\n        ) =>\r\n        {\r\n\r\n            return _push(\r\n                s16Process,\r\n                code_line,\r\n                4\r\n            );\r\n\r\n        };\r\n\r\n\r\n        return {\r\n\r\n            intruction:                 _instruction,\r\n            info:                       _info,\r\n\r\n            push:                       _push,\r\n\r\n            push8:                      _push8,\r\n            push16:                     _push16,\r\n            push32:                     _push32\r\n\r\n        };\r\n\r\n\r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/s16/core/ins/s16Push.js?");

/***/ }),

/***/ "./src/js/s16/core/ins/s16Ret.js":
/*!***************************************!*\
  !*** ./src/js/s16/core/ins/s16Ret.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s16Ret: () => (/* binding */ s16Ret)\n/* harmony export */ });\n/* harmony import */ var _s16Pop_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./s16Pop.js */ \"./src/js/s16/core/ins/s16Pop.js\");\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/s16/core/ins/s16Ret.js           //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  Module for the call instruction.\r\n//\r\n\r\n\r\n    \r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The s16Ret instruction.                              //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const    s16Ret              = (\r\n\r\n        s16Devices,\r\n        read_ram,\r\n        write_ram,\r\n        get_reg,\r\n        set_reg\r\n\r\n    ) =>\r\n    {\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  Makes use of the pop instruction.\r\n    //\r\n        const   __pop                   = (0,_s16Pop_js__WEBPACK_IMPORTED_MODULE_0__.s16Pop)(\r\n            s16Devices,\r\n            read_ram,\r\n            write_ram,\r\n            get_reg,\r\n            set_reg\r\n        );\r\n\r\n\r\n        const   _instruction            = \"ret\";\r\n\r\n\r\n        const   _info                   =\r\n        [\r\n\r\n            window.S16_MNEMONIC_INFO('ret')\r\n\r\n        ];\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _ret()                                               //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _ret                    = (\r\n            \r\n            s16Process,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n        //    set_reg(s16Process.code_segment, 'IP', code_line[6]);\r\n\r\n    //  The return value is stored in the RT register.\r\n    //\r\n            set_reg(s16Process.code_segment, 'RT', code_line[6]);\r\n\r\n    //  If we're at depth 0 then we're returning from the\r\n    //  first call to _main which means the process\r\n    //  has exited - we store the current RT register\r\n    //  in the process object and terminate the process.\r\n    //\r\n            if (s16Process.call_depth <= 0)\r\n            {\r\n                const   __event             = new CustomEvent(\r\n                    window.__s16Proc.S16_PROCESS_TERMINATE,\r\n                    {\r\n                        detail:\r\n                        {\r\n                            'process_id': s16Process.id\r\n                        }\r\n                    }\r\n                );\r\n\r\n                window.__s16_verbose(`Terminating...`);\r\n                s16Process.RT               = get_reg(s16Process.code_segment, 'RT');\r\n                document.dispatchEvent(__event);\r\n            }\r\n            else\r\n            {\r\n    //  The return pointer needs to be popped from\r\n    //  the stack back into the IP register.\r\n    //\r\n                const   __response          = __pop.pop(\r\n                    s16Process,\r\n                    [ 0, 0, 0, 0, 0, 0, window.S16_REG['IP']],\r\n                    window.__s16Sys.__mode\r\n                );\r\n\r\n                if (typeof __response === 'string')\r\n                    return __response;\r\n\r\n                s16Process.call_depth--;\r\n\r\n                const   __call_type     = s16Process.call_type.pop();\r\n\r\n                if (__call_type !== 255)\r\n                {\r\n                    return s16Devices[__call_type].interrupt(\r\n                        s16Process,\r\n                        read_ram,\r\n                        write_ram,\r\n                        get_reg,\r\n                        set_reg\r\n                    );\r\n                }\r\n\r\n            }\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n        return {\r\n\r\n            instruction:                _instruction,\r\n            info:                       _info,\r\n\r\n            ret:                        _ret\r\n\r\n        };\r\n\r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/s16/core/ins/s16Ret.js?");

/***/ }),

/***/ "./src/js/s16/core/s16Clock.js":
/*!*************************************!*\
  !*** ./src/js/s16/core/s16Clock.js ***!
  \*************************************/
/***/ (() => {

eval("///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/s16/core/s16Clock.js             //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  I was using setInterval as a timer/clock but it was\r\n//  far too slow.\r\n//\r\n//  So I tried a busy loop using performance.now() to\r\n//  calculate timeslices but it was causing the browser\r\n//  to hang...tricky.\r\n//\r\n//  Then I found this gem on github, which I STOLE!!!\r\n//\r\n//  All credit to Shaun Tan\r\n//\r\n//      https://gist.github.com/EvitanRelta)\r\n//\r\n//  You'll find this code here:\r\n//\r\n//      https://gist.github.com/EvitanRelta/c3d69dde4ab6879d4126dc3f676c4bdd\r\n//\r\n//  Thanks, Shaun!\r\n//\r\n\r\n    // For stopping the modified 'setInterval'\r\n    window._breakInterval = {}\r\n\r\n    // Replace 'setInterval'\r\n    window._setInterval = window.setInterval\r\n    window.setInterval = (func, time=0.001, ...args) => {\r\n        // If time >= 10ms, use default 'setInterval'\r\n        if (time >= 10)\r\n            return window._setInterval(func, time, ...args)\r\n        \r\n        // To avoid zero or negative timings\r\n        const minTime = 0.001\r\n        if (time <= 0)\r\n            time = minTime\r\n\r\n        const callsPer10ms = 10 / time\r\n        const intervalCode = window._setInterval(() => {\r\n            // Calls function 'callsPer10ms' times for every 10ms\r\n            for (let i = 0; i < callsPer10ms; i++) {\r\n                // Stops for loop when 'clearInterval' is called\r\n                if (window._breakInterval[intervalCode]) {\r\n                    delete window._breakInterval[intervalCode]\r\n                    break\r\n                }\r\n                func(...args)\r\n            }\r\n        }, 10)\r\n        window._breakInterval[intervalCode] = false\r\n        return intervalCode\r\n    }\r\n\r\n    // Replace 'clearInterval'\r\n    window._clearInterval = window.clearInterval\r\n    window.clearInterval = (intervalCode) => {\r\n        // Default 'clearInterval' behaviour\r\n        if (window._breakInterval[intervalCode] === undefined)\r\n            return window._clearInterval(intervalCode)\r\n\r\n        window._clearInterval(intervalCode)\r\n        window._breakInterval[intervalCode] = true\r\n    }\r\n\n\n//# sourceURL=webpack://s16/./src/js/s16/core/s16Clock.js?");

/***/ }),

/***/ "./src/js/s16/core/s16Core.js":
/*!************************************!*\
  !*** ./src/js/s16/core/s16Core.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s16Core: () => (/* binding */ s16Core)\n/* harmony export */ });\n/* harmony import */ var _defs_s16Registers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../defs/s16Registers.js */ \"./src/js/s16/defs/s16Registers.js\");\n/* harmony import */ var _defs_s16Registers_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_defs_s16Registers_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _defs_s16Mnemonics_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../defs/s16Mnemonics.js */ \"./src/js/s16/defs/s16Mnemonics.js\");\n/* harmony import */ var _defs_s16Mnemonics_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_defs_s16Mnemonics_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _core_s16Clock_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../core/s16Clock.js */ \"./src/js/s16/core/s16Clock.js\");\n/* harmony import */ var _core_s16Clock_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_core_s16Clock_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _core_s16Cpu_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../core/s16Cpu.js */ \"./src/js/s16/core/s16Cpu.js\");\n/* harmony import */ var _s16Header_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./s16Header.js */ \"./src/js/s16/core/s16Header.js\");\n/* harmony import */ var _dev_s16Ram_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../dev/s16Ram.js */ \"./src/js/s16/dev/s16Ram.js\");\n/* harmony import */ var _dev_s16Display_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../dev/s16Display.js */ \"./src/js/s16/dev/s16Display.js\");\n/* harmony import */ var _dev_s16Keyboard_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./../dev/s16Keyboard.js */ \"./src/js/s16/dev/s16Keyboard.js\");\n/* harmony import */ var _utils_Instructions_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./../../utils/Instructions.js */ \"./src/js/utils/Instructions.js\");\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/s16/core/s16Core.js              //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  The s16 core controller.\r\n//\r\n\r\n   \r\n///////////////////////////////////////////////////////////\r\n//  Import required scripts from defs                    //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    \r\n    \r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Import core modules.                                 //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    \r\n    \r\n\r\n    \r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Import device modules.                               //\r\n///////////////////////////////////////////////////////////\r\n//\r\n\r\n    \r\n    \r\n    \r\n\r\n\r\n    \r\n    \r\n\r\n///////////////////////////////////////////////////////////\r\n//  The s16Core module.                                  //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const   s16Core             = () =>\r\n    {\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Initialise device modules.                           //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        let     __s16Ram                = (0,_dev_s16Ram_js__WEBPACK_IMPORTED_MODULE_5__.s16Ram)();\r\n        let     __s16Display            = (0,_dev_s16Display_js__WEBPACK_IMPORTED_MODULE_6__.s16Display)();\r\n        let     __s16Keyboard           = (0,_dev_s16Keyboard_js__WEBPACK_IMPORTED_MODULE_7__.s16Keyboard)();\r\n\r\n\r\n        const   __s16Devices            =\r\n                                        [\r\n                                            __s16Display,\r\n                                            __s16Keyboard\r\n                                        ];\r\n\r\n\r\n        const   __processes             = [];\r\n        const   __s16Cpu                = [];\r\n\r\n\r\n        let     __total_cycles          = 0;\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Instructions                                         //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//\r\n//\r\n        let     _instructions;\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __read_ram()                                         //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __read_ram              = (\r\n\r\n            segment,\r\n            offset,\r\n            size\r\n\r\n        ) =>\r\n        {\r\n\r\n            if (size !== 1 && size !== 2 && size !== 4)\r\n                return window.__s16_error(`Error in __read_ram(): size must be either 1, 2 or 4 bytes`);\r\n\r\n            if (size === 1)\r\n                return __s16Ram.read_m8(segment, offset);\r\n            if (size === 2)\r\n                return __s16Ram.read_m16(segment, offset);\r\n            if (size === 4)\r\n                return __s16Ram.read_m32(segment, offset);\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __write_ram()                                        //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __write_ram             = (\r\n\r\n            segment,\r\n            offset,\r\n            value,\r\n            size\r\n\r\n        ) =>\r\n        {\r\n\r\n            if (size !== 1 && size !== 2 && size !== 4)\r\n                return window.__s16_error(`Error in __write_ram(): size must be either 1, 2 or 4 bytes`);\r\n            \r\n            if (size === 1)\r\n                return __s16Ram.write_m8(segment, offset, value);\r\n            if (size === 2)\r\n                return __s16Ram.write_m16(segment, offset, value);\r\n            if (size === 4)\r\n                return __s16Ram.write_m32(segment, offset, value);\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __is_reg_8()                                         //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __is_reg_8              = reg_name =>\r\n        {\r\n\r\n            const   __reg_8             =\r\n            [\r\n                'II', 'OI', 'RT', 'FL'\r\n            ];\r\n\r\n            if (__reg_8.indexOf(reg_name) >= 0)\r\n                return true;\r\n\r\n            return false;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __get_reg()                                          //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __get_reg               = (\r\n        \r\n            segment,\r\n            reg_name\r\n        \r\n        ) =>\r\n        {\r\n\r\n            const   __reg_index         = window.S16_REG[reg_name];\r\n\r\n            if (typeof __reg_index === 'undefined')\r\n                return window.__s16_error(`__get_reg(): Invalid register name '${reg_name}'`)\r\n\r\n    //  The mode specifies what address mode we're running\r\n    //  in - there are 3 options:\r\n    //\r\n    //      8       8-bit mode - registers and therefore\r\n    //              addresses are 8-bit.\r\n    //\r\n    //      16      16-bit mode - registers and addresses\r\n    //              are 16-bit.\r\n    //\r\n    //      32      Have a guess...\r\n    //\r\n    //  This can be set in the header section of the\r\n    //  assembly source file using the 'mode' option:\r\n    //\r\n    //      .section header\r\n    //          mode    m8;     // 8-bit mode\r\n    //          mode    m16;    // 16-bit mode\r\n    //          mode    m32;    // 32-bit mode\r\n    //\r\n            let __size                  = window.__s16Sys.__mode;\r\n            \r\n            if (__is_reg_8(reg_name))\r\n                __size                  = 1;\r\n            \r\n            return __read_ram(\r\n                segment,\r\n                __reg_index,\r\n                __size\r\n            );\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __set_reg()                                          //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __set_reg               = (\r\n\r\n            segment,\r\n            reg_name,\r\n            value\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   __reg_index         = window.S16_REG[reg_name];\r\n\r\n            if (__reg_index < 0)\r\n                return window.__s16_error(`__set_reg(): Invalid register name '${reg_name}'`)\r\n\r\n            let __size                  = window.__s16Sys.__mode;\r\n            \r\n            if (__is_reg_8(reg_name))\r\n                __size                  = 1;\r\n\r\n            return __write_ram(\r\n                segment,\r\n                __reg_index,\r\n                value,\r\n                __size\r\n            );\r\n            \r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __count_used_segments()                              //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __count_used_segments   = () =>\r\n        {\r\n\r\n            let     __segments          = 0;\r\n\r\n            __processes.forEach(__process => {\r\n                __segments += __process.segments + __process.allocated;\r\n            });\r\n\r\n            window.__s16_verbose(`There are ${__segments} RAM segments currently in use`);\r\n\r\n            return __segments;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __disable_clock()                                    //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __disable_clock         = () =>\r\n        {\r\n\r\n            if (window.__s16Sys.S16_SYSTEM_CLOCK_TIMERID)\r\n                clearInterval(window.__s16Sys.S16_SYSTEM_CLOCK_TIMERID);\r\n        \r\n            return window.__s16Sys.S16_SYSTEM_CLOCK_TIMERID = false;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __enable_clock()                                     //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __enable_clock          = () =>\r\n        {\r\n\r\n            window.__s16Sys.S16_SYSTEM_CLOCK_TIMERID = setInterval(() =>\r\n            {\r\n    ///////////////////////////////////////////////////////\r\n    //  If the system has halted we disable the clock and\r\n    //  do nothing.\r\n    //\r\n                if (window.__s16Sys.S16_SYSTEM_RUN === false)\r\n                    return __disable_clock();\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  We need to trigger all of the __s16Cpu[] modules\r\n    //  into fetching and executing the next line of\r\n    //  code - they all listen for a S16_SYSTEM_CYCLE\r\n    //  event, see:\r\n    //\r\n    //      System16/s16/src/js/s16/defs/s16Sys.js\r\n    //\r\n    //  For more information.\r\n    //\r\n                const   __exec_cycle    = new CustomEvent(\r\n                    window.__s16Sys.S16_SYSTEM_CYCLE,\r\n                    {\r\n                        detail:\r\n                        {\r\n                            'total_cycles': __total_cycles\r\n                        }\r\n                    }\r\n                );\r\n\r\n                document.dispatchEvent(__exec_cycle);\r\n\r\n                __total_cycles++;\r\n\r\n            }, window.__s16Sys.S16_SYSTEM_CLOCK_SPEED);\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __load_process()                                     //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __load_process          = (\r\n\r\n            exe_path,\r\n            exe_data,\r\n            objHeader,\r\n            debug                       = false\r\n\r\n        ) =>\r\n        {\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  Memory models:\r\n    //\r\n    //  This allows us to specify how many segments a\r\n    //  process has (up to 4) and how they are used.\r\n    //\r\n    //   flat       1     - The data, code and stack all\r\n    //                      live in a single segment.\r\n    //   dual       2     - The code and stack live in the\r\n    //                      segment 0, the data in the\r\n    //                      segment 1.\r\n    //   multi      3     - The code and stack will be in\r\n    //                      the segment 0, the ro data\r\n    //                      in segment 1 and the rw data\r\n    //                      segment 2.\r\n    //   split      4     - Code will be in segment 0,\r\n    //                      the stack in segment 1, the\r\n    //                      ro data in segment 2 and the\r\n    //                      rw data in segment 3.\r\n    //\r\n    //  In all cases, unused memory in any section may\r\n    //  be used to allocate heap memory.\r\n    //\r\n    //  Naturally when I say \"Code will be in segment 0,\r\n    //  stack in segment 1\", etc - I'm talking relative\r\n    //  to the actual segment index that the first\r\n    //  segment is allocated to.\r\n    //\r\n            const   __memory_model      = objHeader.model;\r\n\r\n    //  A single process can use up to 4 segments, we\r\n    //  need to know how many segments have been\r\n    //  allocated to other processes...\r\n    //\r\n            const   __segments_used     = __count_used_segments();\r\n\r\n    //  Model tells us how many segments we need, are\r\n    //  there enough?\r\n    //\r\n            if ((__segments_used + __memory_model) > objHeader.segments)\r\n                return window.__s16_error(\r\n                    `Can't execute process ${exe_path} - requires ${__memory_model} segments (${(objHeader.segments - __processes.length)} segments remaining)`\r\n                );\r\n\r\n    //  Does the exe size exceed the segment size?\r\n    //\r\n            if (exe_data.byteLength > (objHeader.max_addr + 1))\r\n                return window.__s16_error(\r\n                    `Can't execute process ${exe_path} - requires ${exe_data.byteLength} bytes (segment size ${(objHeader.__max_addr + 1)} bytes)`\r\n                );\r\n\r\n    //  All good, the data and code can be copied to\r\n    //  RAM for execution.\r\n    //\r\n            let     __header_size       = objHeader.ro_offset;\r\n            let     __ro_size           = (objHeader.rw_offset - objHeader.ro_offset);\r\n            let     __rw_size           = (objHeader.code_offset - objHeader.rw_offset);\r\n            let     __code_size         = (objHeader.exe_size - objHeader.code_offset);\r\n            let     __exe_size          = objHeader.exe_size;\r\n\r\n            let     __segment_offset    = __processes.length;\r\n\r\n            window.__s16_verbose(`New process: allocating ${__memory_model} segments to process # ${__processes.length} (${exe_path})`);\r\n\r\n    //  Assume a flat model.\r\n    //\r\n            let     __ro_segment        = __segment_offset;\r\n            let     __rw_segment        = __segment_offset;\r\n            let     __code_segment      = __segment_offset;\r\n            let     __stack_segment     = __segment_offset;\r\n\r\n\r\n    //  Dual - ro and rw are together in another segment.\r\n    //\r\n            if (__memory_model === 2)\r\n            {\r\n                __ro_segment            = (__segment_offset + 1);\r\n                __rw_segment            = (__segment_offset + 1);\r\n            }\r\n\r\n    //  Multi - ro and rwo each have their own segment.\r\n    //\r\n            if (__memory_model === 3)\r\n            {\r\n                __ro_segment            = (__segment_offset + 1);\r\n                __rw_segment            = (__segment_offset + 2);\r\n            }\r\n\r\n    //  Split - the ro, rw, code and stack all have their\r\n    //  own segment.\r\n    //\r\n            if (__memory_model === 4)\r\n            {\r\n                __ro_segment            = (__segment_offset + 1);\r\n                __rw_segment            = (__segment_offset + 2);\r\n                __stack_segment         = (__segment_offset + 3);\r\n            }\r\n            \r\n            const   __process_count     = __processes.length;\r\n\r\n            __processes.push(\r\n                {\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  Process information - most of this is ripped\r\n    //  directly from or calculated using values in\r\n    //  the header.\r\n    //\r\n    //  We get a reference to the header object, too -\r\n    //  some values are referenced here for quick and\r\n    //  easy access.\r\n    //\r\n                    'exe_path':         exe_path,\r\n                    'exe_data':         exe_data,\r\n                    'exe_header':       objHeader,\r\n                    'id':               __process_count,\r\n                    'debug':            debug,\r\n                    'segments':         __memory_model,\r\n                    'allocated':        0,\r\n                    'segment_offset':   __segment_offset,\r\n                    'ro_segment':       __ro_segment,\r\n                    'rw_segment':       __rw_segment,\r\n                    'code_segment':     __code_segment,\r\n                    'stack_segment':    __stack_segment,\r\n                    'ro_size':          __ro_size,\r\n                    'rw_size':          __rw_size,\r\n                    'code_size':        __code_size,\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  Process stats.\r\n    //\r\n                    'total_cycles':     0,\r\n                    'priority':         0,\r\n                    'ticks':            0,\r\n                    'current_line':     0,\r\n                    'ip':               objHeader.main_offset,\r\n                    'warnings':         [],\r\n                    'errors':           [],\r\n                    'call_depth':       0,\r\n                    'call_type':        [],\r\n                    'status':           window.__s16Proc.S16_STATUS_RUNNING,\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  I/O handlers.\r\n    //\r\n                    'read_ram':         __read_ram,\r\n                    'write_ram':        __write_ram,\r\n                    'is_reg_8':         __is_reg_8,\r\n                    'get_reg':          __get_reg,\r\n                    'set_reg':          __set_reg,\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  Every process gets a reference to the instruction\r\n    //  set returned by the Instructions module - see\r\n    //  the __initialise() method at the bottom of\r\n    //  module for more information.\r\n    //\r\n                    'instructions':     _instructions.instruction_set\r\n\r\n                }\r\n            );\r\n\r\n    //  The header and code sections always go in\r\n    //  segment 0.\r\n    //\r\n            window.__s16_verbose(`Loading header (${__header_size} bytes) in segment ${__code_segment} @ 0-${__header_size}`);\r\n            __s16Ram.load(__code_segment, 0, exe_data, 0, __header_size);\r\n            \r\n            window.__s16_verbose(`Loading code (${__code_size} bytes) in segment ${__code_segment} @ ${objHeader.code_offset}-${(objHeader.code_offset + __code_size)}`);\r\n            __s16Ram.load(__code_segment, objHeader.code_offset, exe_data, objHeader.code_offset, __code_size);\r\n\r\n            window.__s16_verbose(`Loading ro (${__ro_size} bytes) in segment ${__ro_segment} @ ${objHeader.ro_offset}-${(objHeader.ro_offset + __ro_size)}`);\r\n            __s16Ram.load(__ro_segment, objHeader.ro_offset, exe_data, objHeader.ro_offset, __ro_size);\r\n            \r\n            window.__s16_verbose(`Loading rw (${__rw_size} bytes) in segment ${__rw_segment} @ ${objHeader.rw_offset}-${(objHeader.rw_offset + __rw_size)})`);\r\n            __s16Ram.load(__rw_segment, objHeader.rw_offset, exe_data, objHeader.rw_offset, __rw_size);\r\n            \r\n    //  The stack is created and managed at runtime,\r\n    //  there's nothing to copy there.\r\n    //\r\n            window.__s16_verbose(`Stack segment: ${__stack_segment}`);\r\n\r\n    //  Lastly, if this is process 0 we run the system\r\n    //  by enabling the clock and setting the global\r\n    //  window.__s16Sys.S16_SYSTEM_RUN to true.\r\n    //\r\n            if (__process_count === 0)\r\n            {\r\n                window.__s16Sys.S16_SYSTEM_RUN = true;\r\n                __enable_clock();\r\n            }\r\n\r\n            __s16Cpu.push(\r\n                (0,_core_s16Cpu_js__WEBPACK_IMPORTED_MODULE_3__.s16Cpu)(\r\n                    __s16Ram,\r\n                    __s16Devices,\r\n                    __processes[__process_count]\r\n                )\r\n            );\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __create_process()                                   //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __create_process        = (\r\n\r\n            exe_path,\r\n            exe_data\r\n\r\n        ) =>\r\n        {\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  First - we need to read the file header, it tells\r\n    //  us a lot of information about the executable,\r\n    //  like what mode (8, 16 or 32-bit) to run in,\r\n    //  etc.\r\n    //\r\n            const   __s16_header        = (0,_s16Header_js__WEBPACK_IMPORTED_MODULE_4__.s16Header)(exe_data);\r\n\r\n            \r\n    ///////////////////////////////////////////////////////\r\n    //  If this is the boot process then we need to first\r\n    //  initialise the s16Ram module.\r\n    //\r\n    //  The exe header should specify how many segments\r\n    //  and the max_addr.\r\n    //\r\n            if (__processes.length === 0)\r\n            {\r\n                window.__s16Sys.__segments = __s16_header.segments;\r\n                window.__s16Sys.__maxaddr = __s16_header.maxaddr;\r\n\r\n                __s16Ram.initialise(\r\n                    window.__s16Sys.__segments,\r\n                    window.__s16Sys.__maxaddr\r\n                );\r\n\r\n                window.__s16_verbose(\r\n                    `Allocated system RAM...\\n\\tSegments:       ${window.__s16Sys.__segments}\\n\\tSegment size:   ${window.__s16Sys.__maxaddr + 1}`\r\n                );\r\n            }\r\n\r\n            __load_process(\r\n                exe_path,\r\n                exe_data,\r\n                __s16_header\r\n            );\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __initialise()                                       //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __initialise            = () =>\r\n        {\r\n\r\n            // __s16Display                = s16Display();\r\n            // __s16Keyboard               = s16Keyboard();\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  The Instructions module (utils) will pre-load and\r\n    //  initialise the instruction modules in:\r\n    //\r\n    //      System16/s16/src/js/s16/core/ins/\r\n    //\r\n    //  All instructions are returned in instruction_set,\r\n    //  the module will generate handlers for every\r\n    //  opcode - e.g, the dev instruction has an opcode\r\n    //  of 10, the _instruction_set array will contain\r\n    //  an object with the key __in_10 (instruction 10).\r\n    //\r\n    //  See the Instructions.js module:\r\n    //\r\n    //      System16/s16/src/js/s16/utils.Instructions.js\r\n    //\r\n    //  The important thing is that each process will be\r\n    //  given a reference to the instruction_set object.\r\n    //\r\n            _instructions               = (0,_utils_Instructions_js__WEBPACK_IMPORTED_MODULE_8__.Instructions)(\r\n                __s16Devices,\r\n                __read_ram,\r\n                __write_ram,\r\n                __get_reg,\r\n                __set_reg\r\n            );\r\n\r\n    //  Initialise is only executed when the system boots\r\n    //  up - so we know we need to load the boot_exe\r\n    //  into RAM and run it.\r\n    //\r\n    //  The data should be in window.__s16Sys.boot_exe.\r\n    //\r\n            __create_process(\r\n                window.__s16Sys.exe_path,\r\n                window.__s16Sys.exe_data\r\n            );\r\n            \r\n\r\n            document.addEventListener(\r\n                window.__s16Proc.S16_PROCESS_TERMINATE,\r\n                objDetail => {\r\n                    const   __process_id = objDetail.detail['process_id'];\r\n\r\n                    window.__s16_verbose(`Terminating process ${__process_id}`)\r\n                    delete  __s16Cpu[__process_id];\r\n\r\n                    __processes[__process_id].status = window.__s16Proc.S16_STATUS_TERMINATED;\r\n                    __s16Cpu[__process_id] = __processes.RT;\r\n                }\r\n            );\r\n\r\n\r\n            $('header').on('click', () => {\r\n                window.__s16Sys.S16_SYSTEM_RUN = false;\r\n            });\r\n\r\n        };\r\n\r\n\r\n        __initialise();\r\n\r\n\r\n        return {\r\n\r\n        };\r\n\r\n    };\r\n\n\n//# sourceURL=webpack://s16/./src/js/s16/core/s16Core.js?");

/***/ }),

/***/ "./src/js/s16/core/s16Cpu.js":
/*!***********************************!*\
  !*** ./src/js/s16/core/s16Cpu.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s16Cpu: () => (/* binding */ s16Cpu)\n/* harmony export */ });\n/* harmony import */ var _utils_ConsoleView_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../utils/ConsoleView.js */ \"./src/js/utils/ConsoleView.js\");\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/s16/core/s16Cpu.js               //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//\r\n//\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Import any required utilities here.                  //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    \r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The s16Cpu module                                    //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const    s16Cpu              = (\r\n\r\n        s16Ram,\r\n        s16Devices,\r\n        s16Process\r\n\r\n    ) =>\r\n    {\r\n\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  This is used to drop information in the console\r\n    //  only if be_verbose is enabled in objConfigure -\r\n    //  see:\r\n    //\r\n    //      System16/s16/src/js/s16/utils/ConsoleView.js\r\n    //\r\n        let     __console;\r\n\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  All instruction modules are pre-loaded and stored\r\n    //  as an object, a reference to the instruction set\r\n    //  is in the setProcess object - we'll create a\r\n    //  reference to that array for easy access.\r\n    //\r\n        const   __instructions          = s16Process.instructions;\r\n\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  Basic setup - create local pointers to segment\r\n    //  and offset addresses of all sections as specified\r\n    //  in the header - this just keeps things nice and\r\n    //  simple.\r\n    //\r\n        const   __ro_segment            = s16Process.ro_segment;\r\n        const   __rw_segment            = s16Process.rw_segment;\r\n        const   __code_segment          = s16Process.code_segment;\r\n        const   __stack_segment         = s16Process.stack_segment;\r\n\r\n        const   __ro_offset             = s16Process.exe_header.ro_offset;\r\n        const   __rw_offset             = s16Process.exe_header.rw_offset;\r\n        const   __code_offset           = s16Process.exe_header.code_offset;\r\n\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  The core controller adds some I/O methods to\r\n    //  the s16Process object.\r\n    //\r\n        const   __read_ram              = s16Process.read_ram;\r\n        const   __write_ram             = s16Process.write_ram;\r\n\r\n        const   __get_reg               = s16Process.get_reg;\r\n        const   __set_reg               = s16Process.set_reg;\r\n\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  Numeric output format - can be 2 (binary), 10\r\n    //  (decimal) or 16 (hex).\r\n    //\r\n        let     __format                = window.__s16Defs.S16_NUMBER_FORMAT;\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __resolve_segment()                                  //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __resolve_segment       = address =>\r\n        {\r\n\r\n            if (address >= __ro_offset && address < __rw_offset)\r\n                return __ro_segment;\r\n            if (address >= __rw_offset && address < __code_offset)\r\n                return __rw_segment;\r\n            \r\n            return __code_segment;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __fetch_next_line()                                  //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __fetch_next_line       = () =>\r\n        {\r\n            \r\n            const   __ip                = __get_reg(__code_segment, 'IP');\r\n\r\n            let     __modifiers         = __read_ram(__code_segment, __ip, 1);\r\n            let     __opcode            = __read_ram(__code_segment, (__ip + 1), 1);\r\n\r\n            const   __modifiers_swap    = __modifiers;\r\n\r\n            if (window.__s16Sys.little_endian)\r\n            {\r\n                __modifiers             = __opcode;\r\n                __opcode                = __modifiers_swap\r\n            }\r\n\r\n    //  The window.S16_OPCODES object is used to lookup\r\n    //  the instruction - it returns information about\r\n    //  each instruction, see:\r\n    //\r\n    //      System16/s16/src/js/s16/defs/s16Mnemonics.js\r\n    //\r\n            //const   __opcode_info       = window.S16_OPCODES[`__op_${__opcode.toString()}`];\r\n\r\n            // const   __opcode_info\r\n            // if (typeof __opcode_info === 'undefined')\r\n            //     return window.__s16_error(`Uknown opcode ${__opcode.toString(__format)} at offset ${__ip.toString(__format)} - can't continue`);\r\n\r\n    //  Attempt to lookup the opcode in the __instructions\r\n    //  set:\r\n    //\r\n            const   __opcode_key        = `__in_${__opcode.toString()}`;\r\n\r\n            if (! __instructions.hasOwnProperty(__opcode_key))\r\n                return window.__s16_error(`Uknown opcode ${__opcode.toString(__format)} at offset ${__ip.toString(__format)} - can't continue`);\r\n\r\n            const   __instruction       = __instructions[__opcode_key];\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  The _code_line array will be returned in an\r\n    //  object along with the __instruction.method\r\n    //  required to actually execute it.\r\n    //\r\n    //  _code_line contains not only the instruction and\r\n    //  operands but also some meta-data for a debugger\r\n    //  if one is listening.\r\n    //\r\n    //  The first 6 entries in the _code_line are:\r\n    //\r\n    //      _code_line[0] = IP (instruction pointer).\r\n    //      _code_line[1] = modifiers.\r\n    //      _code_line[2] = size of the line, including\r\n    //                      the size of all operands.\r\n    //      _code_line[3] = The __params array.\r\n    //      _code_line[4] = Opcode mnemonic.\r\n    //      _code_line[5] = Opcode.\r\n    //\r\n    //  The remaining operands for the opcode are in\r\n    //  _code_line[6] and upwards.\r\n    //\r\n    //  So a line at offset 1000 like:\r\n    //\r\n    //      mov32   AX, 100;\r\n    //\r\n    //  Would generate:\r\n    //\r\n    //      _code_line[0] = 1000   - IP/line offset\r\n    //      _code_line[1] = 0      - No modifiers\r\n    //      _code_line[2] = 10     - Line is 10 bytes\r\n    //      _code_line[3] = params - The __params array\r\n    //      _code_line[4] = mov32  - Mnemonic\r\n    //      _code_line[5] = 32     - Opcode for mov32\r\n    //      _code_line[6] = 36     - Address of AX\r\n    //      _code_line[7] = 100    - Numeric operand\r\n    //\r\n            const   _code_line          =\r\n            [\r\n                __ip,\r\n                __modifiers,\r\n                0,\r\n                __instruction.params,\r\n                __instruction.mnemonic,\r\n                __opcode\r\n            ];\r\n            \r\n    ///////////////////////////////////////////////////////\r\n    //  Calculate the line size - the opcode and modifier\r\n    //  take up the first two bytes.\r\n    //\r\n            const   __params            = __instruction.params;\r\n            let     __line_size         = 2;\r\n\r\n            for (let param_no = 0; param_no < __params.length; param_no++)\r\n            {\r\n    //  Each __param tells us teh size of the expected\r\n    //  operand in bytes - we just add it to __line_size\r\n    //  and push the operand onto the _code_line array.\r\n    //\r\n                let     __param         = __params[param_no];\r\n                // let     __size          = __param;\r\n\r\n                // if (__size > window.__s16Sys.__mode)\r\n                //     __size = window.__s16Sys.__mode;\r\n\r\n                const   __operand       = __read_ram(__code_segment, (__ip + __line_size), __param)\r\n                \r\n                _code_line.push(__operand);\r\n                __line_size += __param;\r\n            }\r\n\r\n            _code_line[2]               = __line_size;\r\n\r\n    //  Update the IP register to point to the next\r\n    //  instruction.\r\n    //\r\n            __set_reg(__code_segment, 'IP', (__ip + __line_size));\r\n            s16Process.current_line++;\r\n\r\n            return {\r\n                'method':               __instruction.method,\r\n                'code_line':            _code_line\r\n            };\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __decode_line()                                      //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __decode_line       = code_line =>\r\n        {\r\n\r\n    //  We handle addressing modes - direct and indirect,\r\n    //  by setting modifiers in the opcode - example, if\r\n    //  we take the mov32 instruction, the opcode is\r\n    //  34 but the opcode is 2-bytes, the first byte\r\n    //  would be the instruction 34, the second the\r\n    //  modifiers:\r\n    //\r\n    //      00100010    --opcode\r\n    //      00000000    --modifiers\r\n    //\r\n    //  These are set by the linker when it's mapping out\r\n    //  the s16 executable file, so if we take a line\r\n    //  such as:\r\n    //\r\n    //      mov32   AX, BX;\r\n    //\r\n    //  AX and BX translate to offsets in the header\r\n    //  where the AX and BX registers are located,\r\n    //  AX is at address 156 and BX is as 160, so\r\n    //  the line translates to:\r\n    //\r\n    //      34  0  156, 160;\r\n    //       |  |\r\n    //       |  +--- modifiers\r\n    //       +------ opcode\r\n    //\r\n    //  No modifiers are applied, these are immediate\r\n    //  values - move the value 160 to location 156.\r\n    //\r\n    //  If we do:\r\n    //\r\n    //      mov32   AX, %BX;\r\n    //\r\n    //  This is direct addressing mode, %BX resolves\r\n    //  to the value stored at address 160 (the value\r\n    //  in the BX register) - this sets a modifier so\r\n    //  the CPU module knows how to handle it, we get:\r\n    //\r\n    //      34   0100 0000   156, 160\r\n    // \r\n    //  Showing the modifiers in binary - bit 2 of the\r\n    //  first nibble is set to tell the CPU that operand\r\n    //  2 points to an address stored at location 160\r\n    //  (BX) not the literal value 160.\r\n    //\r\n    //  Each nibble allows us to set a single modifier\r\n    //  for up to 4 parameters which is fine as 4 no\r\n    //  instruction requires more than 4 operands.\r\n    //\r\n    //  If we do:\r\n    //\r\n    //      mov32   %AX, #BX;\r\n    //\r\n    //  We're using both direct and indirect modes, we\r\n    //  get:\r\n    //\r\n    //      34  1000 0100   156, 160;\r\n    //\r\n    //  The first bit in the first nibble is set to 1, \r\n    //  so the CPU knows we don't want to put a value\r\n    //  in address 156, we want to get the value at\r\n    //  address 156 and use that as the address to\r\n    //  store our value, so if AX contains the value\r\n    //  200 we're moving a value to address 200 - AX\r\n    //  is basically a pointer.\r\n    //\r\n    //  #BX is using indirect addressing mode, we want\r\n    //  to get the value of BX (value stored at offset\r\n    //  160) and then use that as a pointer to another\r\n    //  location.\r\n    //\r\n            let     __modifiers         = code_line[1];\r\n            const   __params            = code_line[3];\r\n\r\n            for (let param_no = 0; param_no < __params.length; param_no++)\r\n            {\r\n                let     __param         = __params[param_no];\r\n                let     __operand       = code_line[(6 + param_no)];\r\n\r\n    //  Simple enough - if the operand is using direct\r\n    //  addressing we do the translation once, if it's\r\n    //  indirect we do the translation twice.\r\n    //\r\n    //  For more info see:\r\n    //\r\n    //      System16/s16/src/js/s16/defs/s16Mnemonics.js\r\n    //\r\n                if (\r\n                    __modifiers & window.S16_MOD_DIRECT[param_no]       ||\r\n                    __modifiers & window.S16_MOD_INDIRECT[param_no]\r\n                )\r\n                {\r\n                    const   __segment       = __resolve_segment(__operand);\r\n                    let     __addr_param    = __param;\r\n\r\n    //  We need to promote the value to whatever\r\n    //  __mdoe is (1, 2 or 4) since it's an address.\r\n    //\r\n                    if (__modifiers & window.S16_MOD_INDIRECT[param_no])\r\n                        __addr_param = window.__s16Sys.__mode;\r\n\r\n                    code_line[(6 + param_no)] = __read_ram(\r\n                        __segment,\r\n                        __operand,\r\n                        __addr_param\r\n                    );\r\n\r\n                    __operand = code_line[(6 + param_no)];\r\n                }\r\n\r\n                if (__modifiers & window.S16_MOD_INDIRECT[param_no])\r\n                {\r\n                    const   __segment       = __resolve_segment(__operand);\r\n\r\n                    code_line[(6 + param_no)] = __read_ram(\r\n                        __segment,\r\n                        __operand,\r\n                        __param\r\n                    );\r\n                }\r\n\r\n            }\r\n\r\n            return code_line;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __execute_line()                                     //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __execute_line      = (\r\n        \r\n            instruction,\r\n            decoded_line\r\n        \r\n        ) =>\r\n        {\r\n\r\n            const   __response      = instruction(\r\n                s16Process,\r\n                decoded_line\r\n            );\r\n\r\n            if (typeof __response === 'string')\r\n                window.__s16_error(__response);\r\n\r\n    //  Keep track of the number of cycles this process\r\n    //  executes - we do this here because a fetched\r\n    //  or decoded line might not be executed. We also\r\n    //  keep track of the number of lines the process\r\n    //  executes.\r\n    //\r\n            s16Process.total_cycles++;\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __execute_cycle()                                    //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __execute_cycle         = () =>\r\n        {\r\n\r\n            window.__s16_verbose(`Executing cycle on process ${s16Process.id}`);\r\n\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  Fetch.\r\n    //\r\n    //  First we fetch the next line of code for this\r\n    //  process...\r\n    //\r\n            const   _objCodeLine        = __fetch_next_line();\r\n\r\n            const   _instruction        = _objCodeLine['method'];\r\n            const   _code_line          = _objCodeLine['code_line'];\r\n\r\n            if (_code_line === false || typeof _code_line === 'undefined')\r\n            {\r\n                window.__s16Sys.S16_SYSTEM_RUN = false;\r\n                return false;\r\n            }\r\n\r\n            if (_code_line[4] === 0)\r\n                return false;\r\n\r\n            // if (\r\n            //     window.__s16Config.hasOwnProperty('be_verbose') &&\r\n            //     window.__s16Config['be_verbose']\r\n            // )\r\n            //     __console.generate_report('fetch', __code_segment, _code_line);\r\n\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  Decode.\r\n    //\r\n    //  Next, we decode the line in preparation for\r\n    //  execution.\r\n    //\r\n            const   _decoded_line       = __decode_line(_code_line);\r\n\r\n            if (\r\n                window.__s16Config.hasOwnProperty('be_verbose') &&\r\n                window.__s16Config['be_verbose']\r\n            )\r\n                __console.generate_report('decode', __code_segment, _decoded_line);\r\n\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  Execute.\r\n    //\r\n    //  Execute the line and return.\r\n    //\r\n            const   __execute_return = __execute_line(\r\n                _instruction,\r\n                _decoded_line\r\n            );\r\n             \r\n            // if (\r\n            //     window.__s16Config.hasOwnProperty('be_verbose') &&\r\n            //     window.__s16Config['be_verbose']\r\n            // )\r\n            //     __console.generate_report('execute', __code_segment, _code_line);\r\n\r\n            \r\n    ///////////////////////////////////////////////////////\r\n    //  If we have a debugger attached we pass the line\r\n    //  to it before execution - any debugger module will\r\n    //  need to reveal a public method called get_line().\r\n    //\r\n            if (s16Process.debug)\r\n                s16Process.debug(\r\n                    _code_line,\r\n                    _decoded_line\r\n                );\r\n\r\n            return __execute_return;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __initialise()                                       //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __initialise            = () =>\r\n        {\r\n\r\n            __console                   = (0,_utils_ConsoleView_js__WEBPACK_IMPORTED_MODULE_0__.ConsoleView)(\r\n                                            __get_reg,\r\n                                            __set_reg\r\n                                        );\r\n\r\n\r\n            // __set_reg(__code_segment, 'ROS', s16Process.ro_segment);\r\n            // __set_reg(__code_segment, 'RWS', s16Process.rw_segment);\r\n            // __set_reg(__code_segment, 'CS', s16Process.code_segment);\r\n            // __set_reg(__code_segment, 'SS', s16Process.stacl_segment);\r\n\r\n            // __set_reg(__code_segment, 'ROO', s16Process.ro_offset);\r\n            // __set_reg(__code_segment, 'RWO', s16Process.rw_offset);\r\n            // __set_reg(__code_segment, 'CO', s16Process.code_segment);\r\n\r\n            __write_ram(__code_segment, 90, s16Process.ro_segment, 4);\r\n            __write_ram(__code_segment, 94, s16Process.rw_segment, 4);\r\n            __write_ram(__code_segment, 98, s16Process.code_segment, 4);\r\n            __write_ram(__code_segment, 102, s16Process.stack_segment, 4);\r\n            \r\n            __write_ram(__code_segment, 106, s16Process.ro_offset, 4);\r\n            __write_ram(__code_segment, 110, s16Process.rw_offset, 4);\r\n            __write_ram(__code_segment, 114, s16Process.code_offset, 4);\r\n\r\n            __set_reg(__code_segment, 'IP', s16Process.exe_header.main_offset);\r\n\r\n    //\r\n    //  Initialise a listener for the S16_SYSTEM_CYCLE\r\n    //  event - see:\r\n    //\r\n    //      System16/s16/src/js/s16/defs/s16Sys.js\r\n    //\r\n    //  For more information.\r\n    //\r\n            document.addEventListener(\r\n                window.__s16Sys.S16_SYSTEM_CYCLE,\r\n                objDetail =>\r\n                {\r\n                    if (s16Process.status !== window.__s16Proc.S16_STATUS_RUNNING)\r\n                        return;\r\n\r\n    //  This event may trigger a fetch-execute cycle\r\n    //  for this process, it depends on the priority\r\n    //  level - priority tells us how many cycles a\r\n    //  process should skip.\r\n    //\r\n    //  This means that 0 is the highest priority\r\n    //  since 0 cycles will be skipped, if you want\r\n    //  a program to run half the speed you'd set\r\n    //  the priority to 1.\r\n    //\r\n    //  In any case = the total_cycles count is\r\n    //  returned in objDetail.\r\n    //\r\n                    if (s16Process.priority)\r\n                    {\r\n    //  The process executed on a cycle when its\r\n    //  ticks counter is 0.\r\n    //\r\n                        if (! s16Process.ticks)\r\n                            __execute_cycle();\r\n\r\n                        (s16Process.ticks >= s16Process.priority)\r\n                        ?\r\n                            s16Process.ticks = 0\r\n                        :\r\n                            s16Process.ticks++;\r\n                    }\r\n                    else\r\n                        __execute_cycle();\r\n                }\r\n            );\r\n\r\n        };\r\n\r\n\r\n        __initialise();\r\n\r\n\r\n        return {\r\n\r\n        };\r\n\r\n    };\r\n\n\n//# sourceURL=webpack://s16/./src/js/s16/core/s16Cpu.js?");

/***/ }),

/***/ "./src/js/s16/core/s16Header.js":
/*!**************************************!*\
  !*** ./src/js/s16/core/s16Header.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s16Header: () => (/* binding */ s16Header)\n/* harmony export */ });\n/* harmony import */ var _defs_s16Header_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../defs/s16Header.js */ \"./src/js/s16/defs/s16Header.js\");\n/* harmony import */ var _defs_s16Header_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_defs_s16Header_js__WEBPACK_IMPORTED_MODULE_0__);\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/s16/core/s16Header.js            //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  \r\n//\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  All of the header offsets are defined in this\r\n//  file:\r\n//\r\n    \r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The s16Header module.                                //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const    s16Header           = exe_data =>\r\n    {\r\n\r\n        const   __exe_view              = new DataView(exe_data);\r\n\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  Byte ordering\r\n    //\r\n    //  If the __low_byte is 0xFF and the __high_byte is\r\n    //  0x00 then we run in little-endian byte ordering,\r\n    //  we set window.__s16Sys.little_endian to true,\r\n    //  otherwise we set it to false for big-endian.\r\n    //\r\n        const   __low_byte              = __exe_view.getUint8(window.S16_HEADER_ENDIANESS);\r\n        const   __high_byte             = __exe_view.getUint8(window.S16_HEADER_ENDIANESS + 1);\r\n\r\n        if (__low_byte === 0xFF && __high_byte === 0x00)\r\n            window.__s16Sys.little_endian = true;\r\n        else if (__low_byte === 0x00 && __high_byte === 0xFF)\r\n            window.__s16Sys.little_endian = false;\r\n        else\r\n            window.__s16_error(`Unknown byte ordering specified in header: ${__low_byte.toString(16)} ${__high_byte.toString(16)}`);\r\n\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  Header ID\r\n    //\r\n    //  The first check - is this is a valid s16exe then\r\n    //  the first 6 bytes of the header should be:\r\n    //\r\n    //      s16exe\r\n    //\r\n        let     __s16_id                = '';\r\n\r\n        for (let byte_no = 0; byte_no < 6; byte_no++)\r\n            __s16_id += String.fromCharCode(__exe_view.getUint8(byte_no));\r\n\r\n        if (__s16_id !== 's16exe')\r\n            return window.__s16_error(`Invalid header ID: ${__s16_id}`);\r\n\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  Finally, return the header object.\r\n    //\r\n        let     _objHeader              =\r\n        {\r\n\r\n    //  First 6 bytes (id) should be the string s16exe.\r\n    //\r\n            'id':                       __s16_id,\r\n\r\n    //  The next 3 bytes contain version info.\r\n    //\r\n            'major':                    __exe_view.getUint8(window.S16_HEADER_MAJOR),\r\n            'minor':                    __exe_view.getUint8(window.S16_HEADER_MINOR),\r\n            'patch':                    __exe_view.getUint8(window.S16_HEADER_PATCH),\r\n\r\n    //  The next 4 bytes are the day, month and year of\r\n    //  assembly, day and month are byte each, year is\r\n    //  2 bytes.\r\n    //\r\n            'day':                      __exe_view.getUint8(window.S16_HEADER_DAY),\r\n            'month':                    __exe_view.getUint8(window.S16_HEADER_MONTH),\r\n            'year':                     __exe_view.getUint16(window.S16_HEADER_YEAR, window.__s16Sys.little_endian),\r\n\r\n    //  Next is the header model - this is a 2-byte\r\n    //  value that describes the memory layour, see\r\n    //  the ExeHeader.js file in defs for more info.\r\n    //\r\n            'model':                    __exe_view.getUint16(window.S16_HEADER_MODEL, window.__s16Sys.little_endian),\r\n\r\n    //  Next we have the exe size, a 4-byte value.\r\n    //\r\n            'exe_size':                 __exe_view.getUint32(window.S16_HEADER_EXESIZE, window.__s16Sys.little_endian),\r\n\r\n    //  Now we have the RO, RW and CODE section offsets,\r\n    //  these tell us where the data and code are in\r\n    //  the file body - all 3 values are 4 bytes each.\r\n    //\r\n            'ro_offset':                __exe_view.getUint32(window.S16_HEADER_RO, window.__s16Sys.little_endian),\r\n            'rw_offset':                __exe_view.getUint32(window.S16_HEADER_RW, window.__s16Sys.little_endian),\r\n            'code_offset':              __exe_view.getUint32(window.S16_HEADER_CODE, window.__s16Sys.little_endian),\r\n\r\n    //  The mode (8, 16 or 32-bit) value is 2 bytes.\r\n    //\r\n            'mode':                     __exe_view.getUint16(window.S16_HEADER_MODE, window.__s16Sys.little_endian),\r\n\r\n    //  The main boot program can specify the total segments\r\n    //  and max address values in the header - these are\r\n    //  ignored for child processes.\r\n    //\r\n    //  Both values are 4 bytes each.\r\n    //\r\n            'segments':                 __exe_view.getUint32(window.S16_HEADER_SEGMENTS, window.__s16Sys.little_endian),\r\n            'maxaddr':                  __exe_view.getUint32(window.S16_HEADER_MAXADDR, window.__s16Sys.little_endian),\r\n        \r\n    //  Next, get the _main offset, this is the entry point,\r\n    //  the address of the first function to be run when\r\n    //  the code is executed - it's an address so 4 bytes.\r\n    //\r\n            'main_offset':              __exe_view.getUint32(window.S16_HEADER_MAIN, window.__s16Sys.little_endian),\r\n\r\n    //  Lastly the VTABLE offset, this is an area of memory\r\n    //  in the header where we can define interrupts and\r\n    //  attach them to specific device modules - 4 bytes.\r\n    //\r\n            'vtable_offset':            __exe_view.getUint32(window.S16_HEADER_VTABLE, window.__s16Sys.little_endian),\r\n\r\n        };\r\n\r\n\r\n        let     __memory_model;\r\n\r\n        if (_objHeader.model === 1)     __memory_model = \"flat\";\r\n        if (_objHeader.model === 2)     __memory_model = \"dual\";\r\n        if (_objHeader.model === 3)     __memory_model = \"multi\";\r\n        if (_objHeader.model === 4)     __memory_model = \"split\";\r\n\r\n        let     __byte_ordering         = \"Big-endian\";\r\n\r\n        if (window.__s16Sys.little_endian)\r\n            __byte_ordering = \"Little-endian\";\r\n\r\n        window.__s16_verbose(\r\n`  Dumping exe header info:\\n\r\n    ID:                 ${_objHeader.id}\r\n    Version:            ${_objHeader.major}.${_objHeader.minor}.${_objHeader.patch}\r\n    Build date:         ${_objHeader.day}/${_objHeader.month}/${_objHeader.year}\r\n    Mode:               ${(_objHeader.mode * 8)}-bit\r\n    Byte-ordering:      ${__byte_ordering}\r\n    Memory model:       ${__memory_model}\r\n    RAM segments:       ${_objHeader.segments}\r\n    Segment size:       ${(_objHeader.maxaddr + 1)} (MAXADDR=${_objHeader.maxaddr})\r\n    Read-only offset:   ${_objHeader.ro_offset}\r\n    Read-write offset:  ${_objHeader.rw_offset}\r\n    Code offset:        ${_objHeader.code_offset}\r\n    _main offset:       ${_objHeader.main_offset}\r\n    V-table offset:     ${_objHeader.vtable_offset}\r\n`\r\n        );\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  Set the mode in __s16Sys.\r\n    //\r\n        window.__s16Sys.__mode = _objHeader.mode;\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  Exe size\r\n    //\r\n    //  One last check - is the file size the size\r\n    //  specified (exe_size) in the header?\r\n    //\r\n    //  There's a tolerance of one byte, this is because\r\n    //  the exe data is encoded to a 16-bit string formt\r\n    //  so occasionally an additional byte is added by\r\n    //  the linker.\r\n    //\r\n        let     __check_size            = true;\r\n\r\n        if (_objHeader.exe_size < exe_data.byteLength && (exe_data.byteLength - _objHeader.exe_size) > 1)\r\n            __check_size            = false\r\n        if (_objHeader.exe_size > exe_data.byteLength && (_objHeader.exe_size - exe_data.byteLength) > 1)\r\n            __check_size            = false\r\n\r\n        if (__check_size === false)\r\n            window.__s16_error(`Error - the exe file size (${exe_data.byteLength}) doesn't match the value in the header (${_objHeader.exe_size})`);\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  If we get this far we're good to go.\r\n    //\r\n        return _objHeader;\r\n        \r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/s16/core/s16Header.js?");

/***/ }),

/***/ "./src/js/s16/defs/s16Defs.js":
/*!************************************!*\
  !*** ./src/js/s16/defs/s16Defs.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s16Defs: () => (/* binding */ s16Defs)\n/* harmony export */ });\n///////////////////////////////////////////////////////////\r\n//  System16/src/js/s16/defs/s16Defs.js                  //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//\r\n//\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The s16Defs module.                                  //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  Returns a bunch of miscellaneous definitions that\r\n//  are used throughout the application.\r\n//\r\n    const    s16Defs             =\r\n    {\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  Event handler ID's.\r\n    //\r\n        S16_ERROR_MSG:                  '__s16_error__',\r\n        S16_WARNING_MSG:                '__s16_warning__',\r\n        \r\n        S16_NUMBER_FORMAT:              10\r\n\r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/s16/defs/s16Defs.js?");

/***/ }),

/***/ "./src/js/s16/defs/s16Eval.js":
/*!************************************!*\
  !*** ./src/js/s16/defs/s16Eval.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s16Eval: () => (/* binding */ s16Eval)\n/* harmony export */ });\n///////////////////////////////////////////////////////////\r\n//  System16/src/js/s16/defs/s16Eval.js                  //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//\r\n//\r\n\r\n\r\n    const    s16Eval             =\r\n    {\r\n    \r\n        S16_EVAL_RESET:                 0b11100000,\r\n\r\n        S16_EVAL_LESSTHAN:              0b10000000,\r\n        S16_EVAL_EQUALTO:               0b01000000,\r\n        S16_EVAL_GREATERTHAN:           0b00100000\r\n        \r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/s16/defs/s16Eval.js?");

/***/ }),

/***/ "./src/js/s16/defs/s16Header.js":
/*!**************************************!*\
  !*** ./src/js/s16/defs/s16Header.js ***!
  \**************************************/
/***/ (() => {

eval("///////////////////////////////////////////////////////////\r\n//  System16/core/defs/s16Header.js                      //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  The window.S16_HEADER_* values are offsets for the\r\n//  s16 executable header, they point to locations where\r\n//  specific values are located in the header section of\r\n//  the executable file.\r\n//\r\n//  Some default values are also defined here.\r\n//\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Every executable begins with the ID, this is just a\r\n//  string that is checked before the code is loaded and\r\n//  executed.\r\n//\r\n//  It is 6 bytes in length.\r\n//\r\n    window.S16_HEADER_ID                = 0;\r\n\r\n    //  Every exe starts with this string.\r\n    //\r\n        window.S16_ID                   = 's16exe';\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Version info - each value is 1 byte.\r\n//\r\n    window.S16_HEADER_MAJOR             = 7;\r\n    window.S16_HEADER_MINOR             = 8;\r\n    window.S16_HEADER_PATCH             = 9;\r\n\r\n    //  This version (1.0.0);\r\n    //\r\n        window.S16_MAJOR                = 1;\r\n        window.S16_MINOR                = 0;\r\n        window.S16_PATCH                = 0;\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Build date - the day and month are 1 byte, the\r\n//  year is 2 bytes.\r\n//\r\n    window.S16_HEADER_DAY               = 10;\r\n    window.S16_HEADER_MONTH             = 11;\r\n    window.S16_HEADER_YEAR              = 12;\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Memory model - this is a 2 byte value.\r\n//\r\n    window.S16_HEADER_MODEL             = 14;\r\n\r\n    //  In a flat model, the read-only, read-write,\r\n    //  code and stack are all in a single segment.\r\n    //\r\n    //  With the dual model the read-only and\r\n    //  read-write sections are stored together in\r\n    //  a single segment and the code and stack are\r\n    //  together in a single segment.\r\n    //\r\n    //  The multi model puts the read-only section into\r\n    //  a single segment and the read-write section also\r\n    //  into a single segment - the code and stack are\r\n    //  combined in a single segment.\r\n    //\r\n    //  Lastly there's split which will put the code,\r\n    //  stack, read-only and read-write sections into\r\n    //  their own individual segments.\r\n    //\r\n        window.S16_MODEL_FLAT           = 1;\r\n        window.S16_MODEL_DUAL           = 2;\r\n        window.S16_MODEL_MULTI          = 3;\r\n        window.S16_MODEL_SPLIT          = 4;\r\n\r\n        window.S16_MODEL_DEFAULT        = window.S16_MODEL_FLAT;\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Total file size and ro, rw and code section offsets,\r\n//  these are all 4 bytes.\r\n//\r\n//  If running on dual, multi or split models then these\r\n//  may point to segments as opposed to addresses in the\r\n//  code segment.\r\n//\r\n    window.S16_HEADER_EXESIZE           = 16;\r\n    window.S16_HEADER_RO                = 20;\r\n    window.S16_HEADER_RW                = 24;\r\n    window.S16_HEADER_CODE              = 28;\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Run mode and segment allocation.\r\n//\r\n//  There are three operating modes:\r\n//\r\n//      's8'        - 8-bit mode, maximum segments and\r\n//                    max address will both be 0xFF\r\n//\r\n//      's16':      - 16-bit (default) mode - maximum\r\n//                    segments and max address will both\r\n//                    be 0xFFFF\r\n//\r\n//      's32':      - 32-bit mode - maximum segments and\r\n//                    max address will both be 0xFFFFFFFF\r\n//\r\n//  This is a 2 byte string.\r\n//\r\n    window.S16_HEADER_MODE              = 32;\r\n\r\n        window.S16_MODE_S8              = 's8';\r\n        window.S16_MODE_S16             = 's16';\r\n        window.S16_MODE_S32             = 's32';\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Total number of RAM segments to allocate and the size\r\n//  of each segment - these are both 4 byte values.\r\n//\r\n    window.S16_HEADER_SEGMENTS          = 34;\r\n    window.S16_HEADER_MAXADDR           = 38;\r\n\r\n    //  Defaults.\r\n    //\r\n        window.S16_MODE                 = window.S16_MODE_S16;\r\n        window.S16_SEGMENTS             = 16;\r\n        window.S16_MAXADDR              = 0xFFFF;\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Offset of the _main (entry point) function is stored\r\n//  at this location.\r\n//\r\n    window.S16_HEADER_MAIN              = 46;\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Vector table offset, this is stored in the header at\r\n//  offset 50, it occupies 25 bytes.\r\n//\r\n    window.S16_HEADER_VTABLE            = 50;\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The byte-order is set at bytes 78 and 79. If we're\r\n//  using little-endian byte-ordering we set:\r\n//\r\n//      offset 78:  FF\r\n//      offset 79:  00\r\n//\r\n//  For big-endian (default) we set:\r\n//\r\n//      offset 78: 00\r\n//      offset 79: FF\r\n//\r\n    window.S16_HEADER_ENDIANESS         = 118;\r\n\r\n    \n\n//# sourceURL=webpack://s16/./src/js/s16/defs/s16Header.js?");

/***/ }),

/***/ "./src/js/s16/defs/s16Mnemonics.js":
/*!*****************************************!*\
  !*** ./src/js/s16/defs/s16Mnemonics.js ***!
  \*****************************************/
/***/ (() => {

eval("///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/s16/defs/s16Mnemonics.js         //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//\r\n//\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  These are keys to create the window.S16_MNEMONICS \r\n//  object.\r\n//\r\n\r\n    window.S16_MNEMONIC_DEV             = 'dev';\r\n    window.S16_MNEMONIC_CALL            = 'call';\r\n    window.S16_MNEMONIC_INT             = 'int';\r\n    window.S16_MNEMONIC_RET             = 'ret';\r\n\r\n\r\n    window.S16_MNEMONIC_MOV8            = 'mov8';\r\n    window.S16_MNEMONIC_MOV16           = 'mov16';\r\n    window.S16_MNEMONIC_MOV32           = 'mov32';\r\n\r\n\r\n    window.S16_MNEMONIC_PUSH8           = 'push8';\r\n    window.S16_MNEMONIC_PUSH16          = 'push16';\r\n    window.S16_MNEMONIC_PUSH32          = 'push32';\r\n\r\n    window.S16_MNEMONIC_POP8            = 'pop8';\r\n    window.S16_MNEMONIC_POP16           = 'pop16';\r\n    window.S16_MNEMONIC_POP32           = 'pop32';\r\n\r\n\r\n    window.S16_MNEMONIC_PEEK            = 'peek';\r\n\r\n    window.S16_MNEMONIC_PAR8            = 'par8';\r\n    window.S16_MNEMONIC_PAR16           = 'par16';\r\n    window.S16_MNEMONIC_PAR32           = 'par32';\r\n\r\n    \r\n    window.S16_MNEMONIC_ADD8            = 'add8';\r\n    window.S16_MNEMONIC_ADD16           = 'add16';\r\n    window.S16_MNEMONIC_ADD32           = 'add32';\r\n\r\n    window.S16_MNEMONIC_SUB8            = 'sub8';\r\n    window.S16_MNEMONIC_SUB16           = 'sub16';\r\n    window.S16_MNEMONIC_SUB32           = 'sub32';\r\n\r\n    window.S16_MNEMONIC_DIV8            = 'div8';\r\n    window.S16_MNEMONIC_DIV16           = 'div16';\r\n    window.S16_MNEMONIC_DIV32           = 'div32';\r\n\r\n    window.S16_MNEMONIC_MUL8            = 'mul8';\r\n    window.S16_MNEMONIC_MUL16           = 'mul16';\r\n    window.S16_MNEMONIC_MUL32           = 'mul32';\r\n\r\n\r\n    window.S16_MNEMONIC_CMP8            = 'cmp8';\r\n    window.S16_MNEMONIC_CMP16           = 'cmp16';\r\n    window.S16_MNEMONIC_CMP32           = 'cmp32';\r\n\r\n\r\n    window.S16_MNEMONIC_JMP             = 'jmp';\r\n    window.S16_MNEMONIC_JE              = 'je';\r\n    window.S16_MNEMONIC_JNE             = 'jne';\r\n    window.S16_MNEMONIC_JGE             = 'jge';\r\n    window.S16_MNEMONIC_JLE             = 'jle';\r\n    window.S16_MNEMONIC_JGT             = 'jgt';\r\n    window.S16_MNEMONIC_JLT             = 'jlt';\r\n\r\n\r\n    window.S16_MNEMONIC_XE              = 'xe';\r\n    window.S16_MNEMONIC_XNE             = 'xne';\r\n    window.S16_MNEMONIC_XGE             = 'xge';\r\n    window.S16_MNEMONIC_XLE             = 'xle';\r\n    window.S16_MNEMONIC_XGT             = 'xgt';\r\n    window.S16_MNEMONIC_XLT             = 'xlt';\r\n\r\n\r\n    window.S16_MNEMONICS                =\r\n    {\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Call/int/return\r\n//\r\n        [window.S16_MNEMONIC_DEV]:      {\r\n                                            'opcode':       0x0A,\r\n                                            'params':       [ 1, 1, 2 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_CALL]:     {\r\n                                            'opcode':       0x1A,\r\n                                            'params':       [ 2 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_INT]:      {\r\n                                            'opcode':       0x1B,\r\n                                            'params':       [ 1 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_RET]:      {\r\n                                            'opcode':       0x1C,\r\n                                            'params':       [ 1 ]\r\n                                        },\r\n                                        \r\n\r\n///////////////////////////////////////////////////////////\r\n//  mov instructions.\r\n//\r\n        [window.S16_MNEMONIC_MOV8]:     {\r\n                                            'opcode':       0x20,\r\n                                            'params':       [ 2, 1 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_MOV16]:    {\r\n                                            'opcode':       0x21,\r\n                                            'params':       [ 2, 2 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_MOV32]:    {\r\n                                            'opcode':       0x22,\r\n                                            'params':       [ 2, 4 ]\r\n                                        },\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Push and pop instructions\r\n//\r\n        [window.S16_MNEMONIC_PUSH8]:    {\r\n                                            'opcode':       0x2A,\r\n                                            'params':       [ 1 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_PUSH16]:   {\r\n                                            'opcode':       0x2B,\r\n                                            'params':       [ 2 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_PUSH32]:   {\r\n                                            'opcode':       0x2C,\r\n                                            'params':       [ 4 ]\r\n                                        },\r\n\r\n        [window.S16_MNEMONIC_POP8]:    {\r\n                                            'opcode':       0x2D,\r\n                                            'params':       [ 2 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_POP16]:    {\r\n                                            'opcode':       0x2E,\r\n                                            'params':       [ 2 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_POP32]:    {\r\n                                            'opcode':       0x2F,\r\n                                            'params':       [ 2 ]\r\n                                        },\r\n\r\n    //  \r\n        [window.S16_MNEMONIC_PEEK]:     {\r\n                                            'opcode':       0x30,\r\n                                            'params':       [ 2, 2 ,2, 1 ]\r\n                                        },\r\n        // [window.S16_MNEMONIC_PAR16]:    {\r\n        //                                     'opcode':       0x31,\r\n        //                                     'params':       [ 2, 4 ]\r\n        //                                 },\r\n        // [window.S16_MNEMONIC_PAR32]:    {\r\n        //                                     'opcode':       0x32,\r\n        //                                     'params':       [ 4, 4 ]\r\n        //                                 },\r\n\r\n\r\n        [window.S16_MNEMONIC_PAR8]:     {\r\n                                            'opcode':       0x31,\r\n                                            'params':       [ 2, 1 ]\r\n                                        },\r\n\r\n        [window.S16_MNEMONIC_PAR16]:    {\r\n                                            'opcode':       0x32,\r\n                                            'params':       [ 2, 2 ]\r\n                                        },\r\n\r\n        [window.S16_MNEMONIC_PAR32]:    {\r\n                                            'opcode':       0x33,\r\n                                            'params':       [ 2, 4 ]\r\n                                        },\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Mathematical operations\r\n//\r\n        [window.S16_MNEMONIC_ADD8]:     {\r\n                                            'opcode':       0x40,\r\n                                            'params':       [ 2, 1 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_ADD16]:    {\r\n                                            'opcode':       0x41,\r\n                                            'params':       [ 2, 2 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_ADD32]:    {\r\n                                            'opcode':       0x42,\r\n                                            'params':       [ 2, 4 ]\r\n                                        },\r\n\r\n        [window.S16_MNEMONIC_SUB8]:     {\r\n                                            'opcode':       0x43,\r\n                                            'params':       [ 2, 1 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_SUB16]:    {\r\n                                            'opcode':       0x44,\r\n                                            'params':       [ 2, 2 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_SUB32]:    {\r\n                                            'opcode':       0x45,\r\n                                            'params':       [ 2, 4 ]\r\n                                        },\r\n\r\n        [window.S16_MNEMONIC_DIV8]:     {\r\n                                            'opcode':       0x46,\r\n                                            'params':       [ 2, 1 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_DIV16]:    {\r\n                                            'opcode':       0x47,\r\n                                            'params':       [ 2, 2 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_DIV32]:    {\r\n                                            'opcode':       0x48,\r\n                                            'params':       [ 2, 4 ]\r\n                                        },\r\n\r\n        [window.S16_MNEMONIC_MUL8]:     {\r\n                                            'opcode':       0x49,\r\n                                            'params':       [ 2, 1 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_MUL16]:    {\r\n                                            'opcode':       0x50,\r\n                                            'params':       [ 2, 2 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_MUL32]:    {\r\n                                            'opcode':       0x51,\r\n                                            'params':       [ 2, 4 ]\r\n                                        },\r\n\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Evaluation/comparison instructions\r\n//\r\n        [window.S16_MNEMONIC_CMP8]:     {\r\n                                            'opcode':       0x5A,\r\n                                            'params':       [ 1, 1 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_CMP16]:    {\r\n                                            'opcode':       0x5B,\r\n                                            'params':       [ 2, 2 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_CMP32]:    {\r\n                                            'opcode':       0x5C,\r\n                                            'params':       [ 4, 4 ]\r\n                                        },\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Jump instructions\r\n//\r\n        [window.S16_MNEMONIC_JMP]:      {\r\n                                            'opcode':       0x60,\r\n                                            'params':       [ 2 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_JE]:       {\r\n                                            'opcode':       0x61,\r\n                                            'params':       [ 2 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_JNE]:      {\r\n                                            'opcode':       0x62,\r\n                                            'params':       [ 2 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_JGE]:      {\r\n                                            'opcode':       0x63,\r\n                                            'params':       [ 2 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_JLE]:      {\r\n                                            'opcode':       0x64,\r\n                                            'params':       [ 2 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_JGT]:      {\r\n                                            'opcode':       0x65,\r\n                                            'params':       [ 2 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_JLT]:      {\r\n                                            'opcode':       0x66,\r\n                                            'params':       [ 4 ]\r\n                                        },\r\n\r\n\r\n        [window.S16_MNEMONIC_XE]:       {\r\n                                            'opcode':       0x70,\r\n                                            'params':       []\r\n                                        },\r\n        [window.S16_MNEMONIC_XNE]:      {\r\n                                            'opcode':       0x71,\r\n                                            'params':       []\r\n                                        },\r\n        [window.S16_MNEMONIC_XGE]:      {\r\n                                            'opcode':       0x72,\r\n                                            'params':       []\r\n                                        },\r\n        [window.S16_MNEMONIC_XLE]:      {\r\n                                            'opcode':       0x73,\r\n                                            'params':       []\r\n                                        },\r\n        [window.S16_MNEMONIC_XGT]:      {\r\n                                            'opcode':       0x74,\r\n                                            'params':       []\r\n                                        },\r\n        [window.S16_MNEMONIC_XLT]:      {\r\n                                            'opcode':       0x75,\r\n                                            'params':       []\r\n                                        }\r\n\r\n    };\r\n\r\n\r\n    window.S16_OPCODES                  =\r\n    {\r\n\r\n        [`__op_0`]:                     {\r\n                                            'mnemonic':     'end',\r\n                                            'params':       []\r\n                                        },\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Call/int/return\r\n//\r\n        [`__op_${0x0A}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_DEV,\r\n                                            'params':       [ 1, 1, 2 ]\r\n                                        },\r\n        [`__op_${0x1A}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_CALL,\r\n                                            'params':       [ 2 ]\r\n                                        },\r\n        [`__op_${0x1B}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_INT,\r\n                                            'params':       [ 1 ]\r\n                                        },\r\n        [`__op_${0x1C}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_RET,\r\n                                            'params':       [ 1 ]\r\n                                        },\r\n                                        \r\n\r\n///////////////////////////////////////////////////////////\r\n//  mov instructions.\r\n//\r\n        [`__op_${0x20}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_MOV8,\r\n                                            'params':       [ 2, 1 ]\r\n                                        },\r\n        [`__op_${0x21}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_MOV16,\r\n                                            'params':       [ 2, 2 ]\r\n                                        },\r\n        [`__op_${0x22}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_MOV32,\r\n                                            'params':       [ 2, 4 ]\r\n                                        },\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Push and pop instructions\r\n//\r\n        [`__op_${0x2A}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_PUSH8,\r\n                                             'params':       [ 1 ]\r\n                                        },\r\n        [`__op_${0x2B}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_PUSH16,\r\n                                            'params':       [ 2 ]\r\n                                        },\r\n        [`__op_${0x2C}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_PUSH32,\r\n                                            'params':       [ 4 ]\r\n                                        },\r\n\r\n        [`__op_${0x2D}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_POP8,\r\n                                            'params':       [ 2 ]\r\n                                        },\r\n        [`__op_${0x2E}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_POP16,\r\n                                            'params':       [ 2 ]\r\n                                        },\r\n        [`__op_${0x2F}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_POP32,\r\n                                            'params':       [ 2 ]\r\n                                        },\r\n\r\n\r\n        [`__op_${0x30}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_PEEK,\r\n                                            'params':       [ 2, 2, 2, 1 ]\r\n                                        },\r\n\r\n\r\n        [`__op_${0x31}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_PAR8,\r\n                                            'params':       [ 2, 1 ]\r\n                                        },\r\n        [`__op_${0x32}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_PAR16,\r\n                                            'params':       [ 2, 2 ]\r\n                                        },\r\n        [`__op_${0x33}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_PAR32,\r\n                                            'params':       [ 2, 4 ]\r\n                                        },\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Mathematical operations\r\n//\r\n        [`__op_${0x40}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_ADD8,\r\n                                            'params':       [ 2, 1 ]\r\n                                        },\r\n        [`__op_${0x41}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_ADD16,\r\n                                            'params':       [ 2, 2 ]\r\n                                        },\r\n        [`__op_${0x42}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_ADD32,\r\n                                            'params':       [ 2, 4 ]\r\n                                        },\r\n\r\n        [`__op_${0x43}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_SUB8,\r\n                                            'params':       [ 2, 1 ]\r\n                                        },\r\n        [`__op_${0x44}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_SUB16,\r\n                                            'params':       [ 2, 2 ]\r\n                                        },\r\n        [`__op_${0x45}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_SUB32,\r\n                                            'params':       [ 2, 4 ]\r\n                                        },\r\n\r\n        [`__op_${0x46}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_DIV8,\r\n                                            'params':       [ 2, 1 ]\r\n                                        },\r\n        [`__op_${0x47}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_DIV16,\r\n                                            'params':       [ 2, 2 ]\r\n                                        },\r\n        [`__op_${0x48}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_DIV32,\r\n                                            'params':       [ 2, 4 ]\r\n                                        },\r\n\r\n        [`__op_${0x49}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_MUL8,\r\n                                            'params':       [ 2, 1 ]\r\n                                        },\r\n        [`__op_${0x50}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_MUL16,\r\n                                            'params':       [ 2, 2 ]\r\n                                        },\r\n        [`__op_${0x51}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_MUL32,\r\n                                            'params':       [ 2, 4 ]\r\n                                        },\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Evaluation/comparison instructions\r\n//\r\n        [`__op_${0x5A}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_CMP8,\r\n                                            'params':       [ 1, 1 ]\r\n                                        },\r\n        [`__op_${0x5B}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_CMP16,\r\n                                            'params':       [ 2, 2 ]\r\n                                        },\r\n        [`__op_${0x5C}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_CMP32,\r\n                                            'params':       [ 4, 4 ]\r\n                                        },\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Jump instructions\r\n//\r\n        [`__op_${0x60}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_JMP,\r\n                                            'params':       [ 2 ]\r\n                                        },\r\n        [`__op_${0x61}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_JE,\r\n                                            'params':       [ 2 ]\r\n                                        },\r\n        [`__op_${0x62}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_JNE,\r\n                                            'params':       [ 2 ]\r\n                                        },\r\n        [`__op_${0x63}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_JGE,\r\n                                            'params':       [ 2 ]\r\n                                        },\r\n        [`__op_${0x64}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_JLE,\r\n                                            'params':       [ 2 ]\r\n                                        },\r\n        [`__op_${0x65}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_JGT,\r\n                                            'params':       [ 2 ]\r\n                                        },\r\n        [`__op_${0x66}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_JLT,\r\n                                            'params':       [ 2 ]\r\n                                        },\r\n\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  x instructions.\r\n    //\r\n        [`__op_${0x70}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_XE,\r\n                                            'params':       []\r\n                                        },\r\n        [`__op_${0x71}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_XNE,\r\n                                            'params':       []\r\n                                        },\r\n        [`__op_${0x72}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_XGE,\r\n                                            'params':       []\r\n                                        },\r\n        [`__op_${0x73}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_XLE,\r\n                                            'params':       []\r\n                                        },\r\n        [`__op_${0x74}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_GT,\r\n                                            'params':       []\r\n                                        },\r\n        [`__op_${0x75}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_LT,\r\n                                            'params':       []\r\n                                        }\r\n\r\n    };\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Will return mnemonic information based on the opcode.\r\n//\r\n    window.S16_MNEMONIC_BY_OPCODE       = opcode =>\r\n    {\r\n\r\n        let     _objMnemonic            = false;\r\n\r\n\r\n        Object.keys(window.S16_MNEMONICS).forEach((key, index) => {\r\n\r\n            if (_objMnemonic)\r\n                return;\r\n\r\n            if (window.S16_MNEMONICS[key].opcode === opcode)\r\n                _objMnemonic = {\r\n                    'mnemonic':         key,\r\n                    'opcode':           opcode,\r\n                    'params':           window.S16_MNEMONICS[key].params\r\n                };\r\n\r\n        });\r\n\r\n        return _objMnemonic;\r\n\r\n    };\r\n\r\n\r\n    window.S16_MNEMONIC_INFO            = mnemonic =>\r\n    {\r\n\r\n        let     __opcode                = window.S16_MNEMONICS[mnemonic].opcode;\r\n        let     _info                   = false;\r\n\r\n        if (typeof __opcode === 'undefined')\r\n            return false;\r\n\r\n        _info                           = window.S16_OPCODES[`__op_${__opcode.toString()}`];\r\n        _info.opcode = __opcode;\r\n\r\n        return _info;\r\n\r\n    };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Let's talk about-ing...opcode modifiers!\r\n//\r\n//  Are these a thing? I dunno, I made 'em up - these bits\r\n//  are set in the opcode to specify how an operand is to\r\n//  be handled.\r\n//\r\n//  All instructions are 16-bit, the lest-significant\r\n//  byte stores the actual opcode, e.g mov32 is 0x0022 or\r\n//  0000 0000 0010 0010 in binary.\r\n//\r\n//  If we find an instruction like:\r\n//\r\n//      mov32   AX, #BX\r\n//\r\n//  We are using two different addressing modes:\r\n//\r\n//      AX      - direct addressing mode\r\n//      #BX     - indirect\r\n//\r\n//  In the case of AX - AX is a register but it's also\r\n//  a location in RAM (the register buffer is stored\r\n//  in RAM) so the reference AX translates to the\r\n//  actual address of AX in the register buffer.\r\n//\r\n//  Thus, no modifier is required, we are saying \"move\r\n//  operand 2 into the address of AX\", essentially,\r\n//  we could just as easily hard-code the literal\r\n//  address of the AX register (84), it's basically\r\n//  the same thing:\r\n//\r\n//      mov32   84, #BX\r\n//\r\n//  In the case of #BX we're using the # modifier\r\n//  which tells s16 that we're not interested in the\r\n//  address of BX, we don't want to put the address\r\n//  of BX in AX, but that BX contains an address\r\n//  that points to the value we want, in this case\r\n//  we set a modifier in the mov32 opcode:\r\n//\r\n//      0100 0000 0010 0010\r\n//       |\r\n//       +--- operand 2 is an indirect reference\r\n//\r\n//  If we want to move a literal value that isn't the\r\n//  the address of anything we use the % modifier:\r\n//\r\n//      mov32   AX, %20\r\n//      mov8    BX, #AX\r\n//\r\n//  Here we put the literal value 20 into the AX\r\n//  register with a mov32, the opcode would be:\r\n//\r\n//      0000 0100 0010 0010\r\n//            |\r\n//            +--- Operand 2 is a literal value\r\n//\r\n//  In the following line we are essentially moving\r\n//  the value at address 20 (whatever that may be)\r\n//  into BX - the opcode would look like this:\r\n//\r\n//      0100 0000 0010 0000\r\n//\r\n//  This means to move a value from a register to\r\n//  another location we use the % modifier:\r\n//\r\n//      AX      - Translates to the address of AX\r\n//      %AX     - The value of AX\r\n//      #AX     - The value at the address pointed to\r\n//                by AX\r\n//\r\n//  So doing something like:\r\n//\r\n//      mov8    #AX, %BX\r\n//\r\n//  Would generate an opcode like:\r\n//\r\n//      1000 0100 0010 0000\r\n//\r\n//  Naturally, this system won't work for instructions\r\n//  with more than 4 parameters - luckily, there are\r\n//  none!\r\n//\r\n//  Anyway - enough rambling, the modifiers are defined\r\n//  as 4-element arrays to made the modification for each\r\n//  possible operand easier, see:\r\n//\r\n//      System/s16l/src/code/MaoCode.mjs\r\n//\r\n//  For more info.\r\n//\r\n\r\n    window.S16_MOD_DIRECT               =\r\n    [\r\n\r\n        0b10000000,\r\n        0b01000000,\r\n        0b00100000,\r\n        0b00010000\r\n\r\n    ];\r\n\r\n        window.S16_ADDRMODE_DIRECT      = '%';\r\n\r\n\r\n    window.S16_MOD_INDIRECT             =\r\n    [\r\n\r\n        0b00001000,\r\n        0b00000100,\r\n        0b00000010,\r\n        0b00000001\r\n\r\n    ];\r\n\r\n        window.S16_ADDRMODE_LITERAL     = '#'\r\n\n\n//# sourceURL=webpack://s16/./src/js/s16/defs/s16Mnemonics.js?");

/***/ }),

/***/ "./src/js/s16/defs/s16Proc.js":
/*!************************************!*\
  !*** ./src/js/s16/defs/s16Proc.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s16Proc: () => (/* binding */ s16Proc)\n/* harmony export */ });\n///////////////////////////////////////////////////////////\r\n//  System16/src/js/s16/defs/s16Proc.js                  //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//\r\n//\r\n\r\n\r\n    const    s16Proc             =\r\n    {\r\n\r\n        S16_STATUS_RUNNING:             'Running',\r\n        S16_STATUS_WAITING:             'Waiting',\r\n        S16_STATUS_BLOCKING:            'Blocking',\r\n        S16_STATUS_BREAKING:            'Breaking',\r\n        S16_STATUS_TERMINATED:          'Terminated',\r\n\r\n        S16_PROCESS_TERMINATE:          '__terminate_process__'\r\n\r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/s16/defs/s16Proc.js?");

/***/ }),

/***/ "./src/js/s16/defs/s16Registers.js":
/*!*****************************************!*\
  !*** ./src/js/s16/defs/s16Registers.js ***!
  \*****************************************/
/***/ (() => {

eval("///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/s16/defs/s16Registers.js         //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//\r\n//\r\n\r\n\r\n    window.S16_REGBUF_OFFSET            = 120;\r\n    window.S16_REGBUF_LENGTH            = 60;\r\n\r\n\r\n    window.S16_REG_CS                   = 'CS';\r\n    window.S16_REG_DS                   = 'DS';\r\n    window.S16_REG_SS                   = 'SS';\r\n\r\n    window.S16_REG_BP                   = 'BP';\r\n    window.S16_REG_IP                   = 'IP';\r\n    window.S16_REG_SP                   = 'SP';\r\n\r\n    window.S16_REG_HB                   = 'HB';\r\n    window.S16_REG_HP                   = 'HP';\r\n\r\n    window.S16_REG_RT                   = 'RT';\r\n    window.S16_REG_FL                   = 'FL';\r\n\r\n    window.S16_REG_OI                   = 'OI';\r\n    window.S16_REG_II                   = 'II';\r\n    \r\n    window.S16_REG_AX                   = 'AX';\r\n    window.S16_REG_BX                   = 'BX';\r\n    window.S16_REG_CX                   = 'CX';\r\n    window.S16_REG_DX                   = 'DX';\r\n    window.S16_REG_EX                   = 'EX';\r\n    window.S16_REG_FX                   = 'FX';\r\n\r\n    window.S16_REG                      =\r\n    {\r\n        \r\n        [window.S16_REG_CS]:            (window.S16_REGBUF_OFFSET + 0x00),\r\n        [window.S16_REG_DS]:            (window.S16_REGBUF_OFFSET + 0x04),\r\n        [window.S16_REG_SS]:            (window.S16_REGBUF_OFFSET + 0x08),\r\n        \r\n        [window.S16_REG_BP]:            (window.S16_REGBUF_OFFSET + 0x0C),\r\n        [window.S16_REG_IP]:            (window.S16_REGBUF_OFFSET + 0x10),\r\n        [window.S16_REG_SP]:            (window.S16_REGBUF_OFFSET + 0x14),\r\n        \r\n        [window.S16_REG_HB]:            (window.S16_REGBUF_OFFSET + 0x18),\r\n        [window.S16_REG_HP]:            (window.S16_REGBUF_OFFSET + 0x1C),\r\n\r\n        [window.S16_REG_RT]:            (window.S16_REGBUF_OFFSET + 0x20),\r\n        [window.S16_REG_FL]:            (window.S16_REGBUF_OFFSET + 0x21),\r\n        \r\n        [window.S16_REG_OI]:            (window.S16_REGBUF_OFFSET + 0x22),\r\n        [window.S16_REG_II]:            (window.S16_REGBUF_OFFSET + 0x23),\r\n\r\n        [window.S16_REG_AX]:            (window.S16_REGBUF_OFFSET + 0x24),\r\n        [window.S16_REG_BX]:            (window.S16_REGBUF_OFFSET + 0x28),\r\n        [window.S16_REG_CX]:            (window.S16_REGBUF_OFFSET + 0x2C),\r\n        [window.S16_REG_DX]:            (window.S16_REGBUF_OFFSET + 0x30),\r\n        [window.S16_REG_EX]:            (window.S16_REGBUF_OFFSET + 0x34),\r\n        [window.S16_REG_FX]:            (window.S16_REGBUF_OFFSET + 0x38)\r\n\r\n    };\r\n\r\n    \n\n//# sourceURL=webpack://s16/./src/js/s16/defs/s16Registers.js?");

/***/ }),

/***/ "./src/js/s16/defs/s16Sys.js":
/*!***********************************!*\
  !*** ./src/js/s16/defs/s16Sys.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s16Sys: () => (/* binding */ s16Sys)\n/* harmony export */ });\n///////////////////////////////////////////////////////////\r\n//  System16/src/js/s16/defs/s16Sys.js                   //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//\r\n//\r\n\r\n\r\n    const    s16Sys              =\r\n    {\r\n\r\n///////////////////////////////////////////////////////////\r\n//  System flags.                                        //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  This is true when the system is running, false when it\r\n//  isn't.\r\n//\r\n        S16_SYSTEM_RUN:                 false,\r\n\r\n        S16_SYSTEM_ERROR:               false,\r\n        S16_SYSTEM_WARNING:             false,\r\n\r\n        S16_SYSTEM_CLOCK_SPEED:         .3,\r\n        S16_SYSTEM_CLOCK_TIMERID:       false,\r\n        \r\n        S16_SYSTEM_CYCLE:               '__s16_cycle__'\r\n        \r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/s16/defs/s16Sys.js?");

/***/ }),

/***/ "./src/js/s16/dev/s16Display.js":
/*!**************************************!*\
  !*** ./src/js/s16/dev/s16Display.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s16Display: () => (/* binding */ s16Display)\n/* harmony export */ });\n/* harmony import */ var _utils_DisplayInfo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../utils/DisplayInfo.js */ \"./src/js/utils/DisplayInfo.js\");\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/s16/dev/s16Display.js            //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//\r\n//\r\n\r\n\r\n    \r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The s16Display module.                               //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const    s16Display          = () =>\r\n    {\r\n\r\n        window.__s16_verbose(` Initialising display...`);\r\n\r\n        \r\n        const   objConfigure            = window.__s16Config;\r\n\r\n\r\n        let     _objDisplay             = (0,_utils_DisplayInfo_js__WEBPACK_IMPORTED_MODULE_0__.DisplayInfo)(\r\n                                            objConfigure\r\n                                        );\r\n\r\n\r\n        let     __resize_timer_id       = false;\r\n\r\n        let     __start_line            = 0;\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _shift_up()                                          //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _shift_up               = () =>\r\n        {\r\n\r\n            let     __rows              = _objDisplay['terminal']['rows'];\r\n            let     __cols              = _objDisplay['terminal']['cols'];\r\n\r\n            let     __html_out          = '';\r\n\r\n            for (let col = 0; col < __cols; col++)\r\n            {\r\n                __html_out += `\r\n                    <div\r\n                        id=\"${_objDisplay['cells']['id-prefix']}${__rows}_${col}\"\r\n                        class=\"${_objDisplay['cells']['class']}\"\r\n                        style=\"\r\n                            top:                    ${(_objDisplay['cells']['height'] * __rows)}px;\r\n                            left:                   ${(_objDisplay['cells']['width'] * col)}px;\r\n                            width:                  ${_objDisplay['cells']['width']}px;\r\n                            height:                 ${_objDisplay['cells']['height']}px;\r\n                            font-family:            ${_objDisplay['cells']['font-family']};\r\n                            font-size:              ${_objDisplay['cells']['font-size']}px;\r\n                            line-height:            ${_objDisplay['cells']['height'] - 2}px;\r\n                            color:                  ${_objDisplay['cells']['color']};\r\n                            background-color:       ${_objDisplay['cells']['background-color']}px;\r\n                        \"\r\n                    >\r\n                        &nbsp;\r\n                    </div>\r\n                `;\r\n            }\r\n\r\n            __start_line++;\r\n\r\n            _objDisplay['terminal']['rows']++;\r\n\r\n            $(`#${_objDisplay['terminal']['id']}`).append(__html_out);\r\n\r\n            $(`#${_objDisplay['terminal']['id']}`).css({\r\n                'top': `-=${_objDisplay['cells']['height']}px`,\r\n                'height': `+=${_objDisplay['cells']['height'] + 2}px`\r\n            });\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _clear_display()                                     //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _clear_display          = () =>\r\n        {\r\n\r\n            // const   __rows              = _objDisplay['terminal']['rows'];\r\n            // const   __cols              = _objDisplay['terminal']['cols'];\r\n\r\n            // for (let row = 0; row < __rows; row++)\r\n            // {\r\n            //     for (let col = 0; col < __cols; col++)\r\n            //         $(`#${_objDisplay['cells']['id-prefix']}${row}_${col}`).html('');\r\n            // }\r\n\r\n            // _objDisplay['cursor']['row'] = _objDisplay['cursor']['col'] = 0;\r\n\r\n            _reset_display();\r\n\r\n        };\r\n\r\n\r\n        const   __reset_cell_colors     = () =>\r\n        {\r\n\r\n             _objDisplay['cursor']['reset']();\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _putchar()                                           //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _putchar                = (\r\n\r\n            char_byte,\r\n            row                         = -1,\r\n            col                         = -1\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   __rows              = _objDisplay['terminal']['rows'];\r\n            const   __cols              = _objDisplay['terminal']['cols'];\r\n\r\n            if ((row < 0 || row >= __rows) || (col < 0 || col >= __cols))\r\n            {\r\n                row = _objDisplay['cursor']['row'];\r\n                col = _objDisplay['cursor']['col'];\r\n            }\r\n\r\n            $(`#${_objDisplay['cells']['id-prefix']}${row}_${col}`).html(char_byte);\r\n\r\n            if  (++col > __cols)\r\n            {\r\n                col = 0;\r\n                if ((row + 1) < __rows)\r\n                    row++;\r\n            }\r\n\r\n            _objDisplay['cursor']['row'] = row;\r\n            _objDisplay['cursor']['col'] = col;\r\n\r\n            __reset_cell_colors();\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __move_cursor()                                      //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __move_cursor           = (\r\n\r\n            row,\r\n            col\r\n\r\n        ) =>\r\n        {\r\n\r\n            if (\r\n                    (row < 0 || row > _objDisplay['terminal']['rows'])  ||\r\n                    (col < 0 || col > _objDisplay['terminal']['cols'])\r\n            )\r\n                return false;\r\n\r\n            _objDisplay['cursor']['row'] = row;\r\n            _objDisplay['cursor']['col'] = col;\r\n\r\n            $(`.${_objDisplay['cells']['class']}`).removeClass('cursor_blink');\r\n            $(`.${_objDisplay['cells']['class']}`).removeClass('cursor');\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _interrupt()                                         //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _interrupt              = (\r\n\r\n            s16Process,\r\n            read_ram,\r\n            write_ram,\r\n            get_reg,\r\n            set_reg\r\n\r\n        ) =>\r\n        {\r\n\r\n    //  The instruction is at FX:\r\n    //\r\n            const   __instruction       = read_ram(\r\n                s16Process.code_segment,\r\n                window.S16_REG['FX'],\r\n                1\r\n            );\r\n\r\n            //const   __instruction       = ram.read_word_32(window.S16_REG['FX'], segment);\r\n            \r\n            window.__s16_verbose(` Display interrupted with instruction: ${__instruction}`);\r\n\r\n    //  1 is a _clear_display() and requires no parameters.\r\n    //\r\n            if (__instruction === 1)\r\n                return _clear_display();\r\n\r\n    //  2 is a _putchar() and expects an 8-bit param in EX.\r\n    //\r\n            if (__instruction === 2)\r\n            {\r\n                const   __operand           = read_ram(\r\n                    s16Process.code_segment,\r\n                    window.S16_REG['EX'],\r\n                    1\r\n                );\r\n\r\n                _putchar(String.fromCharCode(__operand));\r\n                return true;\r\n            }\r\n\r\n    //  3 is used to get the number of rows and columns\r\n    //  the display has, the number of rows/lines is\r\n    //  written to DX and the number of columns is\r\n    //  written to EX.\r\n    //\r\n            if (__instruction === 3)\r\n            {\r\n                write_ram(\r\n                    s16Process.code_segment,\r\n                    window.S16_REG['DX'],\r\n                    _objDisplay['terminal']['rows'],\r\n                    2\r\n                );\r\n                write_ram(\r\n                    s16Process.code_segment,\r\n                    window.S16_REG['EX'],\r\n                    _objDisplay['terminal']['cols'],\r\n                    2\r\n                );\r\n\r\n                return true;\r\n            }\r\n\r\n    //  4 is used to get the current cursor position,\r\n    //  the row is stored in the DX register, the\r\n    //  column in EX.\r\n    //\r\n            if (__instruction === 4)\r\n            {\r\n                write_ram(\r\n                    s16Process.code_segment,\r\n                    window.S16_REG['DX'],\r\n                    _objDisplay['cursor']['row'],\r\n                    2\r\n                );\r\n                write_ram(\r\n                    s16Process.code_segment,\r\n                    window.S16_REG['EX'],\r\n                    _objDisplay['cursor']['col'],\r\n                    2\r\n                );\r\n                \r\n                return true;\r\n            }\r\n\r\n    //  5 is used to move the cursor position, the\r\n    //  row should be set in CX and the column in\r\n    //  DX.\r\n    //\r\n    //  If either the row or column are out of bounds\r\n    //  the RT register is set to 1.\r\n    //\r\n            if (__instruction === 5)\r\n            {\r\n                // const   __row           = ram_view.getUint16(window.S16_REG['CX'], window.little_endian);\r\n                // const   __col           = ram_view.getUint16(window.S16_REG['DX'], window.little_endian);\r\n\r\n                const   __row           = read_ram(\r\n                    s16Process.code_segment,\r\n                    window.S16_REG['DX'],\r\n                    2\r\n                );\r\n                const   __col           = read_ram(\r\n                    s16Process.code_segment,\r\n                    window.S16_REG['EX'],\r\n                    2\r\n                );\r\n\r\n                if (__move_cursor(__row, __col) === false)\r\n                    write_ram(\r\n                        s16Process.code_segment,\r\n                        window.S16_REG['RT'],\r\n                        1\r\n                    );\r\n\r\n                return true;\r\n            }\r\n\r\n\r\n            if (__instruction === 6)\r\n                _shift_up();\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _reset_display()                                     //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _reset_display          = () =>\r\n        {\r\n\r\n            _objDisplay['cursor']['disable']();\r\n\r\n            _objDisplay                 = (0,_utils_DisplayInfo_js__WEBPACK_IMPORTED_MODULE_0__.DisplayInfo)(\r\n                                            objConfigure\r\n                                        );\r\n\r\n            console.log(`Refreshingdisplay`);\r\n\r\n        };\r\n\r\n\r\n        // $(window).on('resize', () =>\r\n        // {\r\n\r\n        //     if (__resize_timer_id !== false)\r\n        //     {\r\n        //         clearTimeout(__resize_timer_id);\r\n        //         __resize_timer_id = false;\r\n        //     }\r\n\r\n        //     __resize_timer_id = setTimeout(() =>\r\n        //     {\r\n        //         _reset_display();\r\n        //         __resize_timer_id = false;\r\n        //     }, 100);\r\n\r\n        // });\r\n\r\n\r\n        return {\r\n\r\n            reset_display:              _reset_display,\r\n\r\n            clear_display:              _clear_display,\r\n\r\n            putchar:                    _putchar,\r\n\r\n            interrupt:                  _interrupt,\r\n\r\n            objDisplay:                 _objDisplay\r\n\r\n        };\r\n\r\n\r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/s16/dev/s16Display.js?");

/***/ }),

/***/ "./src/js/s16/dev/s16Keyboard.js":
/*!***************************************!*\
  !*** ./src/js/s16/dev/s16Keyboard.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s16Keyboard: () => (/* binding */ s16Keyboard)\n/* harmony export */ });\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/s16/dev/s16Keyboard.js           //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//\r\n//\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The s16Keyboard module.                              //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const    s16Keyboard         = () =>\r\n    {\r\n\r\n\r\n        const   objConfigure            = window.__s16Config;\r\n\r\n        let     __s16Process            = false;\r\n\r\n        let     __get_reg               = false;\r\n        let     __set_reg               = false;\r\n\r\n\r\n        let     __keyval                = false;\r\n\r\n\r\n        const   _initialise             = (\r\n        ) =>\r\n        {\r\n\r\n            window.__s16HasFocus        = false;\r\n\r\n\r\n            $(`.${objConfigure['cell-class']}`).on('mouseenter', () => {\r\n\r\n                window.__s16HasFocus   = true;\r\n\r\n            });\r\n\r\n            $(`.${objConfigure['cell-class']}`).on('mouseleave', () => {\r\n\r\n                window.__s16HasFocus   = false;\r\n\r\n            });\r\n\r\n            window.addEventListener('keypress', event => {\r\n                \r\n                if (! __s16Process || __s16Process.status !== window.__s16Proc.S16_STATUS_BLOCKING)\r\n                    return;\r\n                \r\n                // if (! $('.cell').is(':focus'))\r\n                //     return;\r\n\r\n                if (! window.__s16HasFocus)\r\n                    return;\r\n\r\n                event.preventDefault();\r\n\r\n                let     __key           = event.key;\r\n\r\n    //  Disable the WAIT bit in FL - this will\r\n    //  allow the system to resume execution.\r\n    //\r\n                __s16Process.status     = window.__s16Proc.S16_STATUS_RUNNING;\r\n\r\n                if (__key === 'Enter')\r\n                {\r\n                    __key = 13;\r\n                //    ram_view.setUint8(window.S16_REG['FX'], __key, window.little_endian);\r\n                    __set_reg(\r\n                        __s16Process.code_segment,\r\n                        'FX',\r\n                        __key\r\n                    );\r\n                }\r\n                else\r\n                    //ram_view.setUint8(window.S16_REG['FX'], __key.charCodeAt(0), window.little_endian);\r\n                    __set_reg(\r\n                        __s16Process.code_segment,\r\n                        'FX',\r\n                        __key.charCodeAt(0)\r\n                    );\r\n\r\n            });\r\n\r\n        };\r\n        \r\n\r\n///////////////////////////////////////////////////////////\r\n//  _interrupt()                                         //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _interrupt              = (\r\n\r\n            s16Process,\r\n            read_ram,\r\n            write_ram,\r\n            get_reg,\r\n            set_reg\r\n\r\n        ) =>\r\n        {\r\n\r\n            ///alert('KEYBOARD')\r\n            \r\n            if (! __s16Process)\r\n            {\r\n                __s16Process            = s16Process;\r\n                __get_reg               = get_reg;\r\n                __set_reg               = set_reg;\r\n            }\r\n\r\n    //  The instruction is at FX:\r\n    //\r\n            const   __instruction       = read_ram(\r\n                s16Process.code_segment,\r\n                window.S16_REG['FX'],\r\n                1\r\n            );\r\n            \r\n            window.__s16_verbose(`Keyboard interrupted with instruction = ${__instruction}...`);\r\n\r\n    //  1 is a getchar - the next byte of input will\r\n    //  be returned in AX.\r\n    //\r\n            if (__instruction === 1)\r\n                s16Process.status = window.__s16Proc.S16_STATUS_BLOCKING;\r\n\r\n        };\r\n\r\n\r\n        _initialise();\r\n\r\n\r\n        return {\r\n\r\n            initialise:                 _initialise,\r\n            interrupt:                  _interrupt\r\n\r\n        };\r\n\r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/s16/dev/s16Keyboard.js?");

/***/ }),

/***/ "./src/js/s16/dev/s16Ram.js":
/*!**********************************!*\
  !*** ./src/js/s16/dev/s16Ram.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s16Ram: () => (/* binding */ s16Ram)\n/* harmony export */ });\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/s16/dev/s16Ram.js                //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//\r\n//\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The s16Ram module.                                   //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const    s16Ram              = () =>\r\n    {\r\n\r\n        let     __max_addr              = false;\r\n        let     __segments              = false;\r\n\r\n        let     __ram                   = false;\r\n        let     __view                  = false;\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _initialise()                                        //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _initialise             = (\r\n\r\n            segments,\r\n            max_addr\r\n\r\n        ) =>\r\n        {\r\n\r\n            if (__ram !== false)\r\n                return false;\r\n\r\n            __ram                       = [];\r\n            __view                      = [];\r\n\r\n            __segments                  = segments;\r\n            __max_addr                  = max_addr;\r\n\r\n            for (let segment_no = 0; segment_no < segments; segment_no++)\r\n            {\r\n                __ram.push(new ArrayBuffer(max_addr + 1));\r\n                __view.push(new DataView(__ram[segment_no]));\r\n            }\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __check_address_range()                              //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __check_address_range   = (\r\n\r\n            segment,\r\n            offset,\r\n            size\r\n\r\n        ) =>\r\n        {\r\n            \r\n            if (segment < 0 || segment >= __segments)\r\n                return window.__s16_error(`Error in s16Ram.write_m8() - segment index ${segment} out of range`);\r\n            if (offset < 0 || offset > (__max_addr - size))\r\n                return window.__s16_error(`Error in s16Ram.write_m8() - offset ${offset} out of range`);\r\n           \r\n            return true;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _write_m8()                                          //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _write_m8               = (\r\n        \r\n            segment,\r\n            offset,\r\n            value\r\n        \r\n        ) =>\r\n        {\r\n\r\n            if (! __check_address_range(segment, offset, 1))\r\n                return false;\r\n\r\n            __view[segment].setUint8(offset, value);\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _write_m16()                                         //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _write_m16              = (\r\n        \r\n            segment,\r\n            offset,\r\n            value\r\n        \r\n        ) =>\r\n        {\r\n\r\n            if (! __check_address_range(segment, offset, 2))\r\n                return false;\r\n\r\n            __view[segment].setUint16(offset, value, window.__s16Sys.little_endian);\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _write_m32()                                         //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _write_m32              = (\r\n        \r\n            segment,\r\n            offset,\r\n            value\r\n        \r\n        ) =>\r\n        {\r\n\r\n            if (! __check_address_range(segment, offset, 4))\r\n                return false;\r\n\r\n            __view[segment].setUint32(offset, value, window.__s16Sys.little_endian);\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _read_m8()                                           //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _read_m8                = (\r\n\r\n            segment,\r\n            offset\r\n\r\n        ) =>\r\n        {\r\n\r\n            if (! __check_address_range(segment, offset, 1))\r\n                return false;\r\n\r\n            return __view[segment].getUint8(offset);\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _read_m16()                                          //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _read_m16               = (\r\n\r\n            segment,\r\n            offset\r\n\r\n        ) =>\r\n        {\r\n\r\n            if (! __check_address_range(segment, offset, 2))\r\n                return false;\r\n\r\n            return __view[segment].getUint16(offset, window.__s16Sys.little_endian);\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _read_m32()                                          //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _read_m32               = (\r\n\r\n            segment,\r\n            offset\r\n\r\n        ) =>\r\n        {\r\n\r\n            if (! __check_address_range(segment, offset, 4))\r\n                return false;\r\n\r\n            return __view[segment].getUint32(offset, window.__s16Sys.little_endian);\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _load()                                              //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _load                   = (\r\n\r\n            segment,\r\n            offset,\r\n            data,\r\n            start,\r\n            size\r\n\r\n        ) =>\r\n        {\r\n\r\n    //  If no size is specified we try and copy the\r\n    //  entire data buffer.\r\n    //\r\n            if (size <= 0)\r\n                return false;\r\n\r\n            if (! __check_address_range(segment, offset, size))\r\n                return false;\r\n\r\n            let __src_view              = new DataView(data);\r\n            let __src_offset            = 0;\r\n            let __dst_offset            = offset;\r\n\r\n            for (let byte_no = 0; byte_no < size; byte_no++)\r\n                __view[segment].setUint8(__dst_offset++, __src_view.getUint8(start + byte_no));\r\n\r\n           return;\r\n\r\n        };\r\n\r\n\r\n        return {\r\n\r\n            initialise:                 _initialise,\r\n\r\n            write_m8:                   _write_m8,\r\n            write_m16:                  _write_m16,\r\n            write_m32:                  _write_m32,\r\n\r\n            read_m8:                    _read_m8,\r\n            read_m16:                   _read_m16,\r\n            read_m32:                   _read_m32,\r\n\r\n            load:                       _load\r\n\r\n        };\r\n\r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/s16/dev/s16Ram.js?");

/***/ }),

/***/ "./src/js/s16/s16.js":
/*!***************************!*\
  !*** ./src/js/s16/s16.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s16: () => (/* binding */ s16)\n/* harmony export */ });\n/* harmony import */ var _utils_Messenger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils/Messenger.js */ \"./src/js/utils/Messenger.js\");\n/* harmony import */ var _utils_LoadFile_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../utils/LoadFile.js */ \"./src/js/utils/LoadFile.js\");\n/* harmony import */ var _defs_s16Defs_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./defs/s16Defs.js */ \"./src/js/s16/defs/s16Defs.js\");\n/* harmony import */ var _defs_s16Sys_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./defs/s16Sys.js */ \"./src/js/s16/defs/s16Sys.js\");\n/* harmony import */ var _defs_s16Proc_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./defs/s16Proc.js */ \"./src/js/s16/defs/s16Proc.js\");\n/* harmony import */ var _defs_s16Eval_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./defs/s16Eval.js */ \"./src/js/s16/defs/s16Eval.js\");\n/* harmony import */ var _core_s16Core_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./core/s16Core.js */ \"./src/js/s16/core/s16Core.js\");\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/s16/s16.js                       //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//\r\n//\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Load utils.                                          //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  Some simple helper utilities - these aren't part of\r\n//  the s16 system, they're used to do generic things\r\n//  like report errors, load files, etc.\r\n//\r\n    \r\n    \r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Import global definitions                            //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  Strictly speaking, none of these are \"global\" in the\r\n//  true sense. They're just modules that define values\r\n//  and objects that are used throughout the application.\r\n//\r\n//  These exist to be passed around and used!\r\n//\r\n    \r\n    \r\n    \r\n    \r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Load s16 core modules.                               //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    \r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The s16 module.                                      //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const   s16                  = (\r\n\r\n        objConfigure                    = {\r\n\r\n    ////////////////////////////////////////////////////////\r\n    //  Default error reporting config.\r\n    //\r\n            'report_warnings':          true,\r\n            'exit_on_warnings':         false,\r\n            'be_verbose':               true,\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  Debugger settings.\r\n    //\r\n            'debugger_on':              false,\r\n            'debugger_mode':            false,\r\n    \r\n    ///////////////////////////////////////////////////////\r\n    //  Default system config.\r\n    //\r\n            'max_segments':             16,\r\n            'segment_size':             65536,\r\n            'max_processes':            16,\r\n            \r\n    ///////////////////////////////////////////////////////\r\n    //  Display configuration.\r\n    //\r\n            'font-family':              'vt323, monospace',\r\n            'font-size':                '22px',\r\n            'target-id':                'display',\r\n            'terminal-id':              'terminal',\r\n            'terminal-class':           'terminal',\r\n            'cell-class':               'cell',\r\n            'test-cell':                'test_cell',\r\n            'color':                    'rgba(132, 240, 160, 1)',\r\n            'flicker':                  true,\r\n            'blink':                    1000,\r\n\r\n        }\r\n\r\n    ) =>\r\n    {\r\n\r\n\r\n        const   __messenger             = (0,_utils_Messenger_js__WEBPACK_IMPORTED_MODULE_0__.Messenger)(\r\n                                            objConfigure\r\n                                        );\r\n\r\n        let     __s16_core              = false;\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __initialise()                                       //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  Not much happening, some initial setup and load the\r\n//  boot exe before the core controller module (s16Core)\r\n//  is initialised.\r\n//\r\n        const   __initialise            = () =>\r\n        {\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  Make the objConfigure object globally available.\r\n    //\r\n            window.__s16Config          = objConfigure;\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  The objects loaded from:\r\n    //\r\n    //      System16/src/js/s16/defs/\r\n    //\r\n    //  Are made global.\r\n    //\r\n            window.__s16Defs            = _defs_s16Defs_js__WEBPACK_IMPORTED_MODULE_2__.s16Defs;\r\n            window.__s16Sys             = _defs_s16Sys_js__WEBPACK_IMPORTED_MODULE_3__.s16Sys;\r\n            window.__s16Proc            = _defs_s16Proc_js__WEBPACK_IMPORTED_MODULE_4__.s16Proc;\r\n            window.__s16Eval            = _defs_s16Eval_js__WEBPACK_IMPORTED_MODULE_5__.s16Eval;\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  The Messenger error, warning and verbose methods\r\n    //  are made globally available.\r\n    //\r\n            window.__s16_error          = __messenger.error;\r\n            window.__s16_warning        = __messenger.warning;\r\n            window.__s16_verbose        = __messenger.verbose;\r\n\r\n            window.__s16_verbose(`Attempting to load boot exe from ${window.s16_boot_url}...\\n`);\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  Set event handlers for error and warning, see the\r\n    //  Messenger utility:\r\n    //\r\n    //      System16/src/js/s16/utils/Messenger.js\r\n    //\r\n            window.__s16_got_error      = objError =>\r\n            {\r\n    //  A non-recoverable error - this terminates the\r\n    //  system.\r\n    //\r\n                _defs_s16Sys_js__WEBPACK_IMPORTED_MODULE_3__.s16Sys.S16_SYSTEM_ERROR = objError.detail.message;\r\n                _defs_s16Sys_js__WEBPACK_IMPORTED_MODULE_3__.s16Sys.S16_SYSTEM_RUN = false;\r\n            };\r\n\r\n            window.__s16_got_warning    = objWarning =>\r\n            {\r\n                if (window.__s16Config.hasOwnProperty('exit_on_warnings'))\r\n                {\r\n                    _defs_s16Sys_js__WEBPACK_IMPORTED_MODULE_3__.s16Sys.S16_SYSTEM_WARNING = objWarning.detail.message;\r\n\r\n    //  If exit_on_warnings is true then a warning is\r\n    //  treated the same as a fatal error.\r\n    //\r\n                    if (window.__s16Config['exit_on_warnings'] === true)\r\n                        _defs_s16Sys_js__WEBPACK_IMPORTED_MODULE_3__.s16Sys.S16_SYSTEM_RUN = false;\r\n                }\r\n            }\r\n\r\n    //  Set up the event handlers and notify __messneger.\r\n    //\r\n            document.addEventListener(_defs_s16Defs_js__WEBPACK_IMPORTED_MODULE_2__.s16Defs.S16_ERROR_MSG, window.__s16_got_error);\r\n            document.addEventListener(_defs_s16Defs_js__WEBPACK_IMPORTED_MODULE_2__.s16Defs.S16_WARNING_MSG, window.__s16_got_warning);\r\n\r\n            __messenger.error_event(_defs_s16Defs_js__WEBPACK_IMPORTED_MODULE_2__.s16Defs.S16_ERROR_MSG);\r\n            __messenger.warning_event(_defs_s16Defs_js__WEBPACK_IMPORTED_MODULE_2__.s16Defs.S16_WARNING_MSG);\r\n\r\n    //  The boot process must be loaded for execution, the\r\n    //  LoadFile module is used to grab the file from the\r\n    //  server...without this we can't proceed.\r\n    //\r\n    //  The index.html will define:\r\n    //\r\n    //      window.s16_boot_url\r\n    //\r\n    //  Giving us the URL we need to grab the data.\r\n    //\r\n            const __objExe              = (0,_utils_LoadFile_js__WEBPACK_IMPORTED_MODULE_1__.LoadFile)(\r\n                window.s16_boot_url,\r\n                __s16_boot,\r\n                __s16_boot_fail\r\n            );\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __s16_boot()                                         //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __s16_boot              = objExe =>\r\n        {\r\n            \r\n            window.__s16_verbose(`Got exe data, ${objExe.exe_data.byteLength} bytes`);\r\n\r\n            window.__s16Sys.exe_path    = objExe.exe_path;\r\n            window.__s16Sys.exe_data    = objExe.exe_data;\r\n\r\n    //  We have an executable, the s16Core module can\r\n    //  now be initialised and will take over from here.\r\n    //\r\n            __s16_core                  = (0,_core_s16Core_js__WEBPACK_IMPORTED_MODULE_6__.s16Core)()\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __s16_boot_fail()                                    //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __s16_boot_fail         = error_msg =>\r\n        {\r\n\r\n            window.__s16_error(`There was an error fetching the file ${window.s16_boot_url}:`, error_msg);\r\n\r\n        };\r\n\r\n\r\n        __initialise();\r\n\r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/s16/s16.js?");

/***/ }),

/***/ "./src/js/utils/ConsoleView.js":
/*!*************************************!*\
  !*** ./src/js/utils/ConsoleView.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConsoleView: () => (/* binding */ ConsoleView)\n/* harmony export */ });\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/s16/utils/ConsoleView.js         //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  Some ugly functions for writing to the console, this\r\n//  is for analysis/debugging and can slow the system\r\n//  down - they can be enabled by seeing be_verbose\r\n//  to true in the objConfigure object - see:\r\n//\r\n//      System16/s16/src/js/s16/s16.js\r\n//\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The ConsoleView module.                              //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const    ConsoleView         = (\r\n\r\n        get_reg,\r\n        set_reg\r\n\r\n    ) =>\r\n    {\r\n\r\n        let     __format                = window.__s16Defs.S16_NUMBER_FORMAT;\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _dump_registers()                                    //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _dump_registers         = segment =>\r\n        {\r\n\r\n            window.__s16_verbose(\r\n` IP=${get_reg(segment, 'IP')}, BP=${get_reg(segment, 'BP')}, SP=${get_reg(segment, 'SP')}, FL=${get_reg(segment, 'FL').toString(2)}\r\n  AX=${get_reg(segment, 'AX')}, BX=${get_reg(segment, 'BX')}, CX=${get_reg(segment, 'CX')}, \r\n  DX=${get_reg(segment, 'DX')}, EX=${get_reg(segment, 'EX')}, FX=${get_reg(segment, 'FX')}, \r\n`\r\n            );\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _print_operands()                                    //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _print_operands     = code_line =>\r\n        {\r\n\r\n            let __string_out        = false;\r\n\r\n            for (let operand = 6; operand < code_line.length; operand++)\r\n            {\r\n                if (__string_out === false)\r\n                    __string_out = code_line[operand].toString(__format);\r\n                else\r\n                    __string_out += `, ${code_line[operand].toString(__format)}`;\r\n            }\r\n\r\n            return __string_out;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __generate_report()                                  //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  The cycle_stage can be either 'fetch', 'decode' or\r\n//  'execute'.\r\n//\r\n//  If be_verbose is enabled in objConfig this function\r\n//  will be called after every fetch, decode and execute,\r\n//  that's 3 times a cycle!\r\n//\r\n//  Naturally, this is disabled but can be useful if\r\n//  you're trying to track a bug.\r\n//\r\n        const   _generate_report        = (\r\n            \r\n            cycle_stage,\r\n            segment,\r\n            code_line\r\n        \r\n        ) =>\r\n        {\r\n\r\n    //  This will be dumped to console after every fetch.\r\n    //\r\n            if (cycle_stage === 'fetch')\r\n                window.__s16_verbose(\r\n` Fetched line (${code_line[2]} bytes) at offset (${code_line[0].toString(__format)}):\r\n    ${code_line[4]} (opcode=${code_line[5]}}) ${_print_operands(code_line)}\r\n    ${_dump_registers(segment)}`\r\n                );\r\n\r\n\r\n    //  This will be dumped each time a fetched line is\r\n    //  decoded.\r\n    //\r\n            if (cycle_stage === 'decode')\r\n                window.__s16_verbose(\r\n`Decoded line (${code_line[2]} bytes) at offset (${code_line[0].toString(__format)}):\r\n    ${code_line[4]} (opcode=${code_line[5]}, modifiers=${code_line[1].toString(__format)}) ${_print_operands(code_line)}\r\n    ${_dump_registers(segment)}`\r\n                );\r\n\r\n\r\n    //  This will be dumped after the decoded line has\r\n    //  been executed.\r\n    //\r\n            if (cycle_stage === 'execute')\r\n                window.__s16_verbose(\r\n`Executed line (${code_line[2]} bytes) at offset (${code_line[0].toString(__format)}):\r\n    ${_dump_registers(segment)}`\r\n                );\r\n\r\n        };\r\n\r\n\r\n        return {\r\n\r\n            dump_registers:             _dump_registers,\r\n            generate_report:            _generate_report\r\n\r\n        };\r\n\r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/utils/ConsoleView.js?");

/***/ }),

/***/ "./src/js/utils/DisplayInfo.js":
/*!*************************************!*\
  !*** ./src/js/utils/DisplayInfo.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DisplayInfo: () => (/* binding */ DisplayInfo)\n/* harmony export */ });\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/s16/utils/DisplayInfo.js         //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//\r\n//\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The DisplayInfo module.                              //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const    DisplayInfo         = (\r\n\r\n        objConfigure,\r\n        cursor_row                      = false,\r\n        cursor_col                      = false\r\n\r\n    ) =>\r\n    {\r\n\r\n        let     _objDisplay             = {\r\n\r\n                                            'target-id':    false,\r\n                                            'target-el':    false,\r\n                                        \r\n                                            'terminal':     {\r\n                                                                'id':               false,\r\n                                                                'el':               false,\r\n                                                                'class':            false,\r\n                                                                'top':              0,\r\n                                                                'left':             0,\r\n                                                                'width':            0,\r\n                                                                'height':           0,\r\n                                                                'color':            0,\r\n                                                                'background-color': 0,\r\n                                                                'rows':             0,\r\n                                                                'cols':             0\r\n                                                            },\r\n\r\n                                            'cells':        {\r\n                                                                'id-prefix':        false,\r\n                                                                'class':            false,\r\n                                                                'font-family':      false,\r\n                                                                'font-size':        false,\r\n                                                                'width':            0,\r\n                                                                'height':           0,\r\n                                                                'color':            0,\r\n                                                                'background-color': 0\r\n                                                            },\r\n\r\n                                            'cursor':       {\r\n                                                                'blink':            1000,\r\n                                                                'color':            '#FFF',\r\n                                                                'background-color': '#000',\r\n                                                                'row':              0,\r\n                                                                'col':              0\r\n                                                            }\r\n\r\n                                        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __check_options()                                    //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __check_option          = (\r\n\r\n            option_name,\r\n            option_value,\r\n            set                         = false\r\n\r\n        ) =>\r\n        {\r\n\r\n            if (! set)\r\n            {\r\n                if (! objConfigure.hasOwnProperty(option_name))\r\n                    objConfigure[option_name] = option_value;\r\n            }\r\n            else\r\n            {\r\n                if (set === true)\r\n                    _objDisplay[option_name] = option_value\r\n                else\r\n                {\r\n                    if (! objConfigure.hasOwnProperty(option_name))\r\n                        _objDisplay[set][option_name] = option_value;\r\n                    else\r\n                        _objDisplay[set][option_name] = objConfigure[option_name];\r\n                }\r\n            }\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __display_error()                                    //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __display_error         = error_message =>\r\n        {\r\n\r\n            _objDisplay = false;\r\n            return window.__s16_error(error_message);\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __set_target()                                       //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __set_target            = () =>\r\n        {\r\n\r\n            __check_option('target-id', 'inner');\r\n\r\n            const   __target            = $(`#${objConfigure['target-id']}`);\r\n\r\n            if (! __target.length)\r\n                return __display_error(`  Error creating display - target-element '${objConfigure['target-id']}' not found`);\r\n        \r\n            _objDisplay['target-id'] = objConfigure['target-id'];\r\n            _objDisplay['target-el'] = __target;\r\n\r\n            window.__s16_verbose(`  Building terminal in target element '${_objDisplay['target-id']}'`);\r\n        \r\n        };\r\n        \r\n\r\n///////////////////////////////////////////////////////////\r\n//  __set_terminal()                                     //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __set_terminal          = () =>\r\n        {\r\n\r\n            __check_option('terminal', {}, true);\r\n\r\n            __check_option('id', 'terminal', 'terminal');\r\n            __check_option('class', 'terminal', 'terminal');\r\n            __check_option('color', 'rgba(64, 180, 120, 1)', 'terminal');\r\n            __check_option('background-color', 'rgba(0, 0, 0, 1)', 'terminal');\r\n\r\n            const   __height            = parseInt(_objDisplay['target-el'].css('height').replace('px', ''));\r\n            const   __width             = parseInt(_objDisplay['target-el'].css('width').replace('px', ''));\r\n\r\n            // if (objConfigure.hasOwnProperty('debug') && objConfigure['debug'] !== false)\r\n            //     _objDisplay['terminal']['width'] = ((__width / 10) * 7);\r\n            // else\r\n                _objDisplay['terminal']['width'] = __width;\r\n    \r\n            _objDisplay['terminal']['height'] = __height;\r\n\r\n            window.__s16_verbose(`   Terminal width: ${_objDisplay['terminal']['width']} `);\r\n            window.__s16_verbose(`   Terminal height: ${_objDisplay['terminal']['height']} `);\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __set_cells()                                        //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __set_cells             = () =>\r\n        {\r\n\r\n            __check_option('cells', {}, true);\r\n\r\n            __check_option('id-prefix', 'cell_', 'cells');\r\n            __check_option('class', 'cell', 'cells');\r\n            __check_option('font-family', 'vt323, monospace', 'cells');\r\n            __check_option('font-size', '22px', 'cells');\r\n            __check_option('color', 'rgba(64, 180, 120, 1)', 'cells');\r\n            __check_option('background-color', 'rgba(0, 0, 0, 0)', 'cells');\r\n            __check_option('test-cell', 'testcell', 'cells');\r\n\r\n            const   __cell = $(`#${_objDisplay['cells']['test-cell']}`);\r\n\r\n            if (! __cell.length)\r\n                return __display_error(`Can't find test-cell '${_objDisplay['cells']['test-cell']}'`);\r\n\r\n            _objDisplay['cells']['width'] = parseInt(__cell.css('width').replace('px', ''));\r\n            _objDisplay['cells']['height'] = (parseInt(_objDisplay['cells']['font-size'].replace('px', '')) - 3);\r\n\r\n            window.__s16_verbose(`   Cell width: ${_objDisplay['cells']['width']} px`);\r\n            window.__s16_verbose(`   Cell height: ${_objDisplay['cells']['height']} px`);\r\n\r\n            _objDisplay['terminal']['rows'] = Math.floor(_objDisplay['terminal']['height'] / _objDisplay['cells']['height']);\r\n            _objDisplay['terminal']['cols'] = Math.floor(_objDisplay['terminal']['width'] / _objDisplay['cells']['width']);\r\n            \r\n            window.__s16_verbose(`   Terminal rows: ${_objDisplay['terminal']['rows']} `);\r\n            window.__s16_verbose(`   Terminal columns: ${_objDisplay['terminal']['cols']} `);\r\n\r\n            _objDisplay['terminal']['top'] = ((_objDisplay['terminal']['height'] % _objDisplay['cells']['height']) / 2);\r\n            _objDisplay['terminal']['left'] = ((_objDisplay['terminal']['width'] % _objDisplay['cells']['width']) / 2);\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __blink_cursor()                                     //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __blink_cursor         = () =>\r\n        {\r\n\r\n            const   __row = _objDisplay['cursor']['row'];\r\n            const   __col = _objDisplay['cursor']['col'];\r\n\r\n            $(`.${_objDisplay['cells']['class']}`).removeClass('cursor_blink');\r\n            $(`.${_objDisplay['cells']['class']}`).removeClass('cursor');\r\n\r\n\r\n            if (_objDisplay['cursor']['state'])\r\n            {\r\n                $(`#${_objDisplay['cells']['id-prefix']}${__row}_${__col}`).removeClass('cursor_blink')\r\n                $(`#${_objDisplay['cells']['id-prefix']}${__row}_${__col}`).addClass('cursor')\r\n                \r\n                _objDisplay['cursor']['state'] = 0;\r\n            }\r\n            else\r\n            {\r\n                $(`#${_objDisplay['cells']['id-prefix']}${__row}_${__col}`).removeClass('cursor')\r\n                $(`#${_objDisplay['cells']['id-prefix']}${__row}_${__col}`).addClass('cursor_blink')\r\n\r\n                _objDisplay['cursor']['state'] = 1;\r\n            }\r\n\r\n            _objDisplay['cursor']['timer_id'] = setTimeout(() => {\r\n                __blink_cursor();\r\n            }, _objDisplay['cursor']['blink']);\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __disable_cursor()                                   //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __disable_cursor        = () =>\r\n        {\r\n\r\n            if (_objDisplay['cursor']['timer_id'])\r\n            {\r\n                clearTimeout(_objDisplay['cursor']['timer_id'])\r\n                _objDisplay['cursor']['timer_id'] = false;\r\n            }\r\n\r\n            $(`.${_objDisplay['cells']['class']}`).removeClass('cursor_blink');\r\n            $(`.${_objDisplay['cells']['class']}`).removeClass('cursor');\r\n            \r\n            _objDisplay['cursor']['state'] = 0;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _reset_cursor()                                      //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _reset_cursor           = () =>\r\n        {\r\n\r\n            __disable_cursor();\r\n            __blink_cursor();\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __set_cursor()                                       //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __set_cursor            = (\r\n            \r\n            is_reset                    = false\r\n            \r\n        ) =>\r\n        {\r\n\r\n            __check_option('cursor', {}, true);\r\n\r\n            __check_option('blink', 500, 'cursor');\r\n            __check_option('row', 0, 'cursor');\r\n            __check_option('col', 0, 'cursor');\r\n            __check_option('state', 0, 'cursor');\r\n            __check_option('timer_id', false, 'cursor');\r\n\r\n            __blink_cursor();\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __build_terminal()                                   //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __build_terminal        = (\r\n\r\n            is_reset                    = false\r\n\r\n        ) =>\r\n        {\r\n\r\n            __check_option('flicker', false, 'terminal');\r\n\r\n            _objDisplay['target-el'].html(\r\n                `<div\r\n                    id=\"${_objDisplay['terminal']['id']}\"\r\n                    class=\"${_objDisplay['terminal']['class']}\"\r\n                    style=\"\r\n                        width:                  ${_objDisplay['terminal']['width']}px;\r\n                        height:                 ${_objDisplay['terminal']['height']}px;\r\n                        top:                    ${_objDisplay['terminal']['top']}px;\r\n                        left:                   ${_objDisplay['terminal']['left']}px;\r\n                        color:                  ${_objDisplay['terminal']['color']};\r\n                        background-color:       ${_objDisplay['terminal']['background-color']};\r\n                        padding:                0px;\r\n                    \"\r\n                >\r\n                    &nbsp;\r\n                </div>`\r\n            );\r\n\r\n            _objDisplay['terminal']['el'] = $(`#${_objDisplay['terminal']['id']}`);\r\n\r\n            if (_objDisplay['terminal']['flicker'])\r\n                _objDisplay['terminal']['el'].addClass('screen_flicker');\r\n\r\n            const   __rows              = _objDisplay['terminal']['rows'];\r\n            const   __cols              = _objDisplay['terminal']['cols'];\r\n\r\n            let     __html_string       = '';\r\n            let     __char_index        = 0;\r\n\r\n            for (let row = 0; row < __rows; row++)\r\n            {\r\n\r\n                const   __chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\"£$%^&*()_+-=[]{};'#:@~,./<>?\";\r\n\r\n\r\n                for (let col = 0; col < __cols; col++,  __char_index++)\r\n                {\r\n\r\n                    if  (__char_index >= __chars.length)\r\n                        __char_index = 0;\r\n\r\n                    let __char = __chars.substr(__char_index, 1);\r\n\r\n                    if (is_reset)\r\n                        __char = '';\r\n\r\n                    __html_string += `\r\n                        <div\r\n                            id=\"${_objDisplay['cells']['id-prefix']}${row}_${col}\"\r\n                            class=\"${_objDisplay['cells']['class']}\"\r\n                            style=\"\r\n                                top:                    ${(_objDisplay['cells']['height'] * row)}px;\r\n                                left:                   ${(_objDisplay['cells']['width'] * col)}px;\r\n                                width:                  ${_objDisplay['cells']['width']}px;\r\n                                height:                 ${_objDisplay['cells']['height']}px;\r\n                                font-family:            ${_objDisplay['cells']['font-family']};\r\n                                font-size:              ${_objDisplay['cells']['font-size']}px;\r\n                                line-height:            ${_objDisplay['cells']['height'] - 2}px;\r\n                                color:                  ${_objDisplay['cells']['color']};\r\n                                background-color:       ${_objDisplay['cells']['background-color']}px;\r\n                            \"\r\n                        >\r\n                            &nbsp;\r\n                        </div>\r\n                    `;\r\n\r\n                }\r\n\r\n            }\r\n\r\n            _objDisplay['terminal']['el'].html(__html_string);\r\n\r\n            __set_cursor(is_reset);\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __initialise()                                       //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __initialise            = (\r\n\r\n            is_reset                    = false\r\n\r\n        ) =>\r\n        {\r\n\r\n            if (objConfigure.hasOwnProperty('debug') && objConfigure['debug'] !== false)\r\n            {\r\n                $(`#${objConfigure['terminal-id']}_debug_panel`).css({\r\n                    'display': 'block'\r\n                });\r\n            }\r\n\r\n            if (is_reset)\r\n                __disable_cursor();\r\n           \r\n\r\n            __set_target();\r\n            __set_terminal();\r\n            __set_cells();\r\n\r\n            __build_terminal(is_reset);\r\n\r\n            // if (cursor_row !== false || cursor_col !== false)\r\n            // {\r\n            //     __disable_cursor();\r\n\r\n            //     if (cursor_row !== false)\r\n            //         _objDisplay['cursor']['row'] = cursor_row;\r\n            //     if (cursor_col !== false)\r\n            //         _objDisplay['cursor']['col'] = cursor_col;\r\n\r\n            //     _reset_cursor();\r\n            // }\r\n\r\n            _objDisplay['cursor']['reset'] = _reset_cursor;\r\n            _objDisplay['cursor']['disable'] = __disable_cursor;\r\n\r\n            if (cursor_row)\r\n                _objDisplay['cursor']['row'] = cursor_row;\r\n            if (cursor_col)\r\n                _objDisplay['cursor']['col'] = cursor_col;\r\n            \r\n        };\r\n\r\n\r\n        window.__s16_verbose(` Building terminal...`);\r\n\r\n        __initialise();\r\n\r\n        return _objDisplay;\r\n\r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/utils/DisplayInfo.js?");

/***/ }),

/***/ "./src/js/utils/Instructions.js":
/*!**************************************!*\
  !*** ./src/js/utils/Instructions.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Instructions: () => (/* binding */ Instructions)\n/* harmony export */ });\n/* harmony import */ var _s16_core_ins_s16Dev_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../s16/core/ins/s16Dev.js */ \"./src/js/s16/core/ins/s16Dev.js\");\n/* harmony import */ var _s16_core_ins_s16Call_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../s16/core/ins/s16Call.js */ \"./src/js/s16/core/ins/s16Call.js\");\n/* harmony import */ var _s16_core_ins_s16Int_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../s16/core/ins/s16Int.js */ \"./src/js/s16/core/ins/s16Int.js\");\n/* harmony import */ var _s16_core_ins_s16Ret_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../s16/core/ins/s16Ret.js */ \"./src/js/s16/core/ins/s16Ret.js\");\n/* harmony import */ var _s16_core_ins_s16Mov_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../s16/core/ins/s16Mov.js */ \"./src/js/s16/core/ins/s16Mov.js\");\n/* harmony import */ var _s16_core_ins_s16Pop_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../s16/core/ins/s16Pop.js */ \"./src/js/s16/core/ins/s16Pop.js\");\n/* harmony import */ var _s16_core_ins_s16Push_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../s16/core/ins/s16Push.js */ \"./src/js/s16/core/ins/s16Push.js\");\n/* harmony import */ var _s16_core_ins_s16Cmp_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./../s16/core/ins/s16Cmp.js */ \"./src/js/s16/core/ins/s16Cmp.js\");\n/* harmony import */ var _s16_core_ins_s16Jmp_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./../s16/core/ins/s16Jmp.js */ \"./src/js/s16/core/ins/s16Jmp.js\");\n/* harmony import */ var _s16_core_ins_s16Calc_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./../s16/core/ins/s16Calc.js */ \"./src/js/s16/core/ins/s16Calc.js\");\n/* harmony import */ var _s16_core_ins_s16Peek_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./../s16/core/ins/s16Peek.js */ \"./src/js/s16/core/ins/s16Peek.js\");\n/* harmony import */ var _s16_core_ins_s16Par_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./../s16/core/ins/s16Par.js */ \"./src/js/s16/core/ins/s16Par.js\");\n///////////////////////////////////////////////////////////\r\n//  system16/s16/src/js/s16/utils/Instructions.js        //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//\r\n//\r\n\r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The Instructions module.                             //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const    Instructions        = (\r\n\r\n        s16Devices,\r\n        read_ram,\r\n        write_ram,\r\n        get_reg,\r\n        set_reg\r\n\r\n    ) =>\r\n    {\r\n\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  Every module is initialised and stored here.\r\n    //\r\n        const   __modules               =\r\n        [\r\n\r\n            (0,_s16_core_ins_s16Dev_js__WEBPACK_IMPORTED_MODULE_0__.s16Dev)(s16Devices, read_ram, write_ram, get_reg, set_reg),\r\n            (0,_s16_core_ins_s16Call_js__WEBPACK_IMPORTED_MODULE_1__.s16Call)(s16Devices, read_ram, write_ram, get_reg, set_reg),\r\n            (0,_s16_core_ins_s16Int_js__WEBPACK_IMPORTED_MODULE_2__.s16Int)(s16Devices, read_ram, write_ram, get_reg, set_reg),\r\n            (0,_s16_core_ins_s16Ret_js__WEBPACK_IMPORTED_MODULE_3__.s16Ret)(s16Devices, read_ram, write_ram, get_reg, set_reg),\r\n            (0,_s16_core_ins_s16Mov_js__WEBPACK_IMPORTED_MODULE_4__.s16Mov)(s16Devices, read_ram, write_ram, get_reg, set_reg),\r\n            (0,_s16_core_ins_s16Pop_js__WEBPACK_IMPORTED_MODULE_5__.s16Pop)(s16Devices, read_ram, write_ram, get_reg, set_reg),\r\n            (0,_s16_core_ins_s16Push_js__WEBPACK_IMPORTED_MODULE_6__.s16Push)(s16Devices, read_ram, write_ram, get_reg, set_reg),\r\n            (0,_s16_core_ins_s16Cmp_js__WEBPACK_IMPORTED_MODULE_7__.s16Cmp)(s16Devices, read_ram, write_ram, get_reg, set_reg),\r\n            (0,_s16_core_ins_s16Jmp_js__WEBPACK_IMPORTED_MODULE_8__.s16Jmp)(s16Devices, read_ram, write_ram, get_reg, set_reg),\r\n            (0,_s16_core_ins_s16Calc_js__WEBPACK_IMPORTED_MODULE_9__.s16Calc)(s16Devices, read_ram, write_ram, get_reg, set_reg),\r\n            (0,_s16_core_ins_s16Peek_js__WEBPACK_IMPORTED_MODULE_10__.s16Peek)(s16Devices, read_ram, write_ram, get_reg, set_reg),\r\n            (0,_s16_core_ins_s16Par_js__WEBPACK_IMPORTED_MODULE_11__.s16Par)(s16Devices, read_ram, write_ram, get_reg, set_reg)\r\n            \r\n        ];\r\n\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  Every group of instruction has a corresponding\r\n    //  module that reveals one or more public methods,\r\n    //  e.g the s16Mov module reveals 3 methods:\r\n    //\r\n    //      mov8()\r\n    //      mov16()\r\n    //      mov32()\r\n    //\r\n    //  Every single method will be added to an object\r\n    //  using the opcode to generate a key/index for\r\n    //  quick lookup and execution.\r\n    //\r\n        const   _instruction_set        = {};\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __initialise()                                       //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __initialise            = () =>\r\n        {\r\n\r\n            console.log(`>>> DEVICES:`);\r\n            console.log(s16Devices)\r\n\r\n            __modules.forEach(__module =>\r\n            {\r\n\r\n    //  Grab the mnemonic info from the module, this\r\n    //  tells us how many methods it reveals and what\r\n    //  the names of those methods are.\r\n    //\r\n                const   __info          = __module.info;\r\n\r\n    //  Every entry in the __info array describes a\r\n    //  single method, these need to be added to the\r\n    //  _operations object.\r\n    //\r\n                __info.forEach(_info =>\r\n                {\r\n\r\n                    const   __opcode    = _info.opcode;\r\n                    const   __params    = _info.params;\r\n                    const   __mnemonic  = _info.mnemonic;\r\n\r\n    //  We add the method, indexing it using a key generated\r\n    //  using the opcode - example, the opcode for the dev\r\n    //  instruction is 10, so to execute a dev instruction\r\n    //  all we do is:\r\n    //\r\n    //      _operations.__in_10.method(code_line);\r\n    //\r\n                    const   __key       = `__in_${__opcode}`;\r\n                \r\n                    _instruction_set[__key] = {\r\n                        'opcode':       __opcode,\r\n                        'params':       __params,\r\n                        'mnemonic':     __mnemonic,\r\n                        'method':       __module[__mnemonic]\r\n                    };\r\n\r\n                });\r\n\r\n            });\r\n\r\n        };\r\n\r\n\r\n        __initialise();\r\n\r\n\r\n        return {\r\n\r\n            instruction_set:            _instruction_set\r\n\r\n        };\r\n\r\n    };\r\n\n\n//# sourceURL=webpack://s16/./src/js/utils/Instructions.js?");

/***/ }),

/***/ "./src/js/utils/LoadFile.js":
/*!**********************************!*\
  !*** ./src/js/utils/LoadFile.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LoadFile: () => (/* binding */ LoadFile)\n/* harmony export */ });\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/s16/utils/Loader.js              //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  This module is used to load s16 files for execution,\r\n//  the file is retrieved via a HTTP Get request so will\r\n//  call success_callback() to pass the file data to the\r\n//  caller.\r\n//\r\n\r\n    const    LoadFile            = (\r\n        \r\n        exe_url,\r\n        success_callback,\r\n        failure_callback\r\n    \r\n    ) =>\r\n    {\r\n\r\n        let     _objExe                 = {\r\n            'exe_path':                 exe_url,\r\n            'exe_data':                 false\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __string_to_arraybuffer()                            //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  The incoming data is encoded as a string so needs to\r\n//  be decoded.\r\n//\r\n        const   __string_to_arraybuffer     = str =>\r\n        {\r\n\r\n            var buffer                      = new ArrayBuffer(str.length * 2);\r\n            var buffer_view                 = new Uint16Array(buffer);\r\n\r\n            for (var i = 0, str_len = str.length; i < str_len; i++)\r\n                buffer_view[i]  = str.charCodeAt(i);\r\n\r\n            return buffer;\r\n            \r\n        };\r\n\r\n        const   req                         = new XMLHttpRequest();\r\n        let     file_name;\r\n\r\n        if (window.location.href.substr(0, 14) === 'https://b0x3n.')\r\n            exe_url = `https://b0x3n.github.io/system16/s16/exe/sys16.s16`;\r\n        // if (window.hostname === '127.0.0.1' || window.hostname === 'localhost')\r\n        //     file_name = window.s16_boot_url;\r\n\r\n        req.open(\"GET\", exe_url, false);\r\n        req.responseType = \"utf-16\";\r\n\r\n\r\n        req.onload                          = event =>\r\n        {\r\n            let array_buffer                = __string_to_arraybuffer(req.response);\r\n            _objExe.exe_data                = new Uint8Array(array_buffer).buffer;\r\n            \r\n            success_callback(_objExe);\r\n        };\r\n\r\n        req.onerror                         = error =>\r\n        {\r\n            failure_callback(error.statusText)\r\n        };\r\n\r\n        req.send(null);\r\n\r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/utils/LoadFile.js?");

/***/ }),

/***/ "./src/js/utils/Messenger.js":
/*!***********************************!*\
  !*** ./src/js/utils/Messenger.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Messenger: () => (/* binding */ Messenger)\n/* harmony export */ });\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/s16/utils/Messenger.js           //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//\r\n//\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The Messenger module.                                //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const    Messenger           = (\r\n\r\n        objConfigure\r\n\r\n    ) =>\r\n    {\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Default output streams for the _error(), _warning()\r\n//  and _verbose() methods.\r\n//\r\n        const   DEFAULT_ERROR_STREAM        = console.error;\r\n        const   DEFAULT_WARNING_STREAM      = console.error;\r\n        const   DEFAULT_VERBOSE_STREAM      = console.log;\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Output streams.\r\n//\r\n        let     __error_stream              = DEFAULT_ERROR_STREAM;\r\n        let     __warning_stream            = DEFAULT_WARNING_STREAM;\r\n        let     __verbose_stream            = DEFAULT_VERBOSE_STREAM;\r\n\r\n\r\n        let     __error_event               = false;\r\n        let     __warning_event             = false;\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __check_option()                                     //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  Checks if option_name is set in objConfigure, if\r\n//  it doesn't exist then it sets it with default_value.\r\n//\r\n        const   __check_option          = (\r\n\r\n            option_name,\r\n            default_value\r\n\r\n        ) =>\r\n        {\r\n\r\n            if (! objConfigure.hasOwnProperty(option_name))\r\n                objConfigure[option_name] = default_value;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __initialise()                                       //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __initialise            = () =>\r\n        {\r\n\r\n    //  Set any options not set in objConfigure with\r\n    //  default values.\r\n    //\r\n            __check_option('report_warnings', true);\r\n            __check_option('exit_on_warnings', true);\r\n            __check_option('be_verbose', true);\r\n\r\n    //  Set the output streams.\r\n    //\r\n            if (objConfigure.hasOwnProperty('error_stream'))\r\n                __error_stream = objConfigure.error_stream;\r\n            if (objConfigure.hasOwnProperty('warningstream'))\r\n                __warning_stream = objConfigure.warning_stream;\r\n            if (objConfigure.hasOwnProperty('verbose_stream'))\r\n                __verbose_stream = objConfigure.verbose_stream;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _error()                                             //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  Errors are always dumped to the __error_stream and\r\n//  the process will terminate.\r\n//\r\n        const   _error                  = error_message =>\r\n        {\r\n                \r\n            __error_stream(error_message);\r\n\r\n            if (__error_event === false)\r\n                return false;\r\n\r\n            const   __new_event         = new CustomEvent(\r\n                __error_event,\r\n                {\r\n                    detail: {\r\n                        'type':         'Error',\r\n                        'message':      error_message\r\n                    }\r\n                }\r\n            );\r\n\r\n            document.dispatchEvent(__new_event);\r\n\r\n            return false;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _warning()                                           //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  Warnings are only reported if the report_warnings\r\n//  property of objConfgure is set to true.\r\n//\r\n//  If exit_on_warnings is set to true, the process will\r\n//  exit only if report_warnings is also true - we don't\r\n//  want to terminate and leave the user guessing.\r\n//\r\n        const   _warning                = warning_message =>\r\n        {\r\n\r\n            if (objConfigure.report_warnings)\r\n                __warning_stream(warning_message);\r\n\r\n            if (__warning_event === false)\r\n                return false;\r\n\r\n            const   __new_event         = new CustomEvent(\r\n                __warning_event,\r\n                {\r\n                    detail: {\r\n                        'type':         'Warning',\r\n                        'message':      warning_message\r\n                    }\r\n                }\r\n            );\r\n\r\n            document.dispatchEvent(__new_event);\r\n\r\n            return false;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _verbose()                                           //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  Only outputs is objConfigure.be_verbose is true, \r\n//  never exits.\r\n//\r\n        const   _verbose                = verbose_message =>\r\n        {\r\n\r\n            if (objConfigure.be_verbose)\r\n                __verbose_stream(verbose_message);\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _error_event()                                       //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  Set up a custom event handler to be invoked when\r\n//  an error is reported.\r\n//\r\n        const   _error_event            = event_handler =>\r\n        {\r\n\r\n            __error_event               = event_handler;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _error_warning()                                     //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  Set up a custom event handler to be invoked when\r\n//  a warning is reported.\r\n//\r\n        const   _warning_event          = event_handler =>\r\n        {\r\n\r\n            __warning_event             = event_handler;\r\n\r\n        };\r\n\r\n\r\n        __initialise();\r\n\r\n\r\n        return {\r\n        \r\n            error:                      _error,\r\n            warning:                    _warning,\r\n            verbose:                    _verbose,\r\n\r\n            error_event:                _error_event,\r\n            warning_event:              _warning_event\r\n\r\n        };\r\n\r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/utils/Messenger.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/Bootstrap.js");
/******/ 	
/******/ })()
;