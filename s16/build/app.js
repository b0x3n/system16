/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/Bootstrap.js":
/*!*****************************!*\
  !*** ./src/js/Bootstrap.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _src_App_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/App.js */ \"./src/js/src/App.js\");\n\r\n\r\n\r\n    \r\n\r\n\r\n    const   Main                        = () =>\r\n    {\r\n\r\n        $(function() {\r\n            $(window).on('load', () => {\r\n                const   __app                   = (0,_src_App_js__WEBPACK_IMPORTED_MODULE_0__.App)();\r\n            });\r\n        });\r\n\r\n    };\r\n\r\n\r\n    Main();\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/Bootstrap.js?");

/***/ }),

/***/ "./src/js/src/App.js":
/*!***************************!*\
  !*** ./src/js/src/App.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   App: () => (/* binding */ App)\n/* harmony export */ });\n/* harmony import */ var _sys_s16_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sys/s16.js */ \"./src/js/src/sys/s16.js\");\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/src/App.js                       //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//\r\n//\r\n\r\n\r\n    \r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The App module.                                      //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const    App                 = () =>\r\n    {\r\n\r\n\r\n        const   __s16                   = (0,_sys_s16_js__WEBPACK_IMPORTED_MODULE_0__.s16)();\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __initialise()                                       //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __initialise            = () =>\r\n        {\r\n\r\n        };\r\n\r\n\r\n        __initialise();\r\n\r\n    };\n\n//# sourceURL=webpack://s16/./src/js/src/App.js?");

/***/ }),

/***/ "./src/js/src/Messenger.js":
/*!*********************************!*\
  !*** ./src/js/src/Messenger.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Messenger: () => (/* binding */ Messenger)\n/* harmony export */ });\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/src/Messenger.js                 //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  Basic routines for managing errors/warnings and\r\n//  verbose output.\r\n//\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The Messenger module.                                //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const    Messenger           = (\r\n\r\n        objConfigure\r\n\r\n    ) =>\r\n    {\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Default output streams for the _error(), _warning()\r\n//  and _verbose() methods.\r\n//\r\n        const   DEFAULT_ERROR_STREAM        = console.error;\r\n        const   DEFAULT_WARNING_STREAM      = console.error;\r\n        const   DEFAULT_VERBOSE_STREAM      = console.log;\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Output streams.\r\n//\r\n        let     __error_stream              = DEFAULT_ERROR_STREAM;\r\n        let     __warning_stream            = DEFAULT_WARNING_STREAM;\r\n        let     __verbose_stream            = DEFAULT_VERBOSE_STREAM;\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __check_option()                                     //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  Checks if option_name is set in objConfigure, if\r\n//  it doesn't exist then it sets it with default_value.\r\n//\r\n        const   __check_option          = (\r\n\r\n            option_name,\r\n            default_value\r\n\r\n        ) =>\r\n        {\r\n\r\n            if (! objConfigure.hasOwnProperty(option_name))\r\n                objConfigure[option_name] = default_value;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __initialise()                                       //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __initialise            = () =>\r\n        {\r\n\r\n    //  Set any options not set in objConfigure with\r\n    //  default values.\r\n    //\r\n            __check_option('report_warnings', true);\r\n            __check_option('exit_on_warnings', true);\r\n            __check_option('be_verbose', true);\r\n\r\n            // __check_option('error_stream', DEFAULT_ERROR_STREAM);\r\n            // __check_option('warning_stream', DEFAULT_WARNING_STREAM);\r\n            // __check_option('verbose_stream', DEFAULT_VERBOSE_STREAM);\r\n\r\n    //  Set the output streams.\r\n    //\r\n            if (objConfigure.hasOwnProperty('error_stream'))\r\n                __error_stream = objConfigure.error_stream;\r\n            if (objConfigure.hasOwnProperty('warningstream'))\r\n                __warning_stream = objConfigure.warning_stream;\r\n            if (objConfigure.hasOwnProperty('verbose_stream'))\r\n                __verbose_stream = objConfigure.verbose_stream;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _error()                                             //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  Errors are always dumped to the __error_stream and\r\n//  the process will terminate.\r\n//\r\n        const   _error                  = error_message =>\r\n        {\r\n\r\n            // if (__error_stream === process.stdout || __error_stream === process.stderr)\r\n            //     __error_stream.write(error_message);\r\n            // else\r\n                __error_stream(error_message);\r\n\r\n            //process.exit(1);\r\n\r\n            return false;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _warning()                                           //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  Warnings are only reported if the report_warnings\r\n//  property of objConfgure is set to true.\r\n//\r\n//  If exit_on_warnings is set to true, the process will\r\n//  exit only if report_warnings is also true - we don't\r\n//  want to terminate and leave the user guessing.\r\n//\r\n        const   _warning                = warning_message =>\r\n        {\r\n\r\n            if (objConfigure.report_warnings)\r\n            {\r\n                // if (__warning_stream === process.stdout || __warning_stream === process.stderr)\r\n                //     __warning_stream.write(warning_message);\r\n                // else\r\n                    __warning_stream(warning_message);\r\n\r\n                // if (objConfigure.exit_on_warnings)\r\n                //     process.exit(1);\r\n            }\r\n\r\n            return false;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _verbose()                                           //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  Only outputs is objConfigure.be_verbose is true, \r\n//  never exits.\r\n//\r\n        const   _verbose                = verbose_message =>\r\n        {\r\n\r\n            if (objConfigure.be_verbose)\r\n            {\r\n                // if (__verbose_stream === process.stdout || __verbose_stream === process.stderr)\r\n                //     __verbose_stream.write(verbose_message);\r\n                // else\r\n                    __verbose_stream(verbose_message);\r\n            }\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _file_error()                                        //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  This is used by the s16a and s16l applications to\r\n//  report file errors.\r\n//\r\n//  See:\r\n//\r\n//      System16/s16a/src/core/Tokeniser.mjs\r\n//\r\n//  For information about tokens.\r\n//\r\n//  In this case all we care about are tokens[0] and\r\n//  tokens[1] which contain the absolute path to a file\r\n//  and a line number, respectively.\r\n//\r\n        // const   _file_error             = (\r\n\r\n        //     tokens,\r\n        //     error_message\r\n\r\n        // ) =>\r\n        // {\r\n\r\n        //     _error(`Error in file ${tokens[0]}, line ${tokens[1]}: ${error_message}`);\r\n\r\n        // };\r\n\r\n\r\n        __initialise();\r\n\r\n\r\n        return {\r\n        \r\n            error:                      _error,\r\n            warning:                    _warning,\r\n            verbose:                    _verbose\r\n\r\n        };\r\n\r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/src/Messenger.js?");

/***/ }),

/***/ "./src/js/src/sys/dev/ALU.js":
/*!***********************************!*\
  !*** ./src/js/src/sys/dev/ALU.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ALU: () => (/* binding */ ALU)\n/* harmony export */ });\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/src/sys/dev/ALU.js               //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//\r\n//\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The ALU module.                                      //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const    ALU                 = (\r\n\r\n        messenger,\r\n        ram,\r\n        segment,\r\n        get_reg,\r\n        set_reg,\r\n        is_writeable\r\n\r\n    ) =>\r\n    {\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Mathematical operations.                             //\r\n///////////////////////////////////////////////////////////\r\n//                                                       //\r\n//  Many of these methods work the same way.             //\r\n//                                                       //\r\n//  We typically have two operands, the left operand     //\r\n//  and the right operand, e.g - the add16 instruction:  //\r\n//                                                       //\r\n//      add16 left_operand, right_operand;               //\r\n//                                                       //\r\n//  The left operand should always point to a location   //\r\n//  or register, example:                                //\r\n//                                                       //\r\n//      add16 AX, 10                                     //\r\n//                                                       //\r\n//  AX is the destination address for the result to be   //\r\n//  written to, AX should also contain the value we      //\r\n//  want to add 10 to - we should assign that first:     //\r\n//                                                       //\r\n//      mov16 AX, 20;                                    //\r\n//      add16 AX, 10;                                    //\r\n//                                                       //\r\n//  The result (30) will be stored in AX.                //\r\n//                                                       //\r\n//  We are not limited only to registers, we can use     //\r\n//  labels that point to locations in memory, e.g:       //\r\n//                                                       //\r\n//      .section        rw                               //\r\n//          m16         result = 20;                     //\r\n//                                                       //\r\n//      .section        code                             //\r\n//          function    _addnums                         //\r\n//              add16   result, 10;                      //\r\n//          end                                          //\r\n//                                                       //\r\n///////////////////////////////////////////////////////////\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __execute_add()                                      //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __execute_add           = (\r\n\r\n            ram_view,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   __dst               = code_line[2];\r\n            const   __rval              = code_line[3];\r\n\r\n            let     __lval              = false;\r\n\r\n            if (code_line[0].mnemonic === window.S16_MNEMONIC_ADD8)\r\n            {\r\n                if (! is_writeable(ram_view, code_line[2]))\r\n                    return `${code_line[0].mnemonic} - Attempt to write to read-only memory @ ${code_line[2]}`;\r\n    \r\n                __lval                  = ram_view.getUint8(__dst);\r\n                ram_view.setUint8(__dst, (__lval + __rval));\r\n            }\r\n            if (code_line[0].mnemonic === window.S16_MNEMONIC_ADD16)\r\n            {\r\n                if (! is_writeable(ram_view, code_line[2]))\r\n                    return `${code_line[0].mnemonic} - Attempt to write to read-only memory @ ${code_line[2]}`;\r\n    \r\n                __lval                  = ram_view.getUint16(__dst, window.little_endian);\r\n                ram_view.setUint16(__dst, (__lval + __rval), window.little_endian);\r\n            }\r\n            if (code_line[0].mnemonic === window.S16_MNEMONIC_ADD32)\r\n            {\r\n                if (! is_writeable(ram_view, code_line[2]))\r\n                    return `${code_line[0].mnemonic} - Attempt to write to read-only memory @ ${code_line[2]}`;\r\n    \r\n                __lval                  = ram_view.getUint32(__dst, window.little_endian);\r\n                ram_view.setUint32(__dst, (__lval + __rval), window.little_endian);\r\n            }\r\n\r\n            if (__lval !== false)\r\n            {\r\n                messenger.verbose(`Executed ${code_line[0].mnemonic} @ ${__dst}: ${__lval} + ${__rval} = (${__lval + __rval})`);    \r\n                __lval = true;\r\n            }\r\n\r\n            return __lval;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __execute_sub()                                      //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __execute_sub           = (\r\n\r\n            ram_view,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   __dst               = code_line[2];\r\n            const   __rval              = code_line[3];\r\n\r\n            let     __lval              = false;\r\n\r\n            // if (! is_writeable(code_line[2]))\r\n            //     return `${code_line[0].mnemonic} - Attempt to write to read-only memory @ ${code_line[0]}`;\r\n\r\n            if (code_line[0].mnemonic === window.S16_MNEMONIC_SUB8)\r\n            {\r\n                if (! is_writeable(ram_view, code_line[2]))\r\n                    return `${code_line[0].mnemonic} - Attempt to write to read-only memory @ ${code_line[2]}`;\r\n    \r\n                __lval                  = ram_view.getUint8(__dst);\r\n                ram_view.setUint8(__dst, (__lval - __rval));\r\n            }\r\n            if (code_line[0].mnemonic === window.S16_MNEMONIC_SUB16)\r\n            {\r\n                if (! is_writeable(ram_view, code_line[2]))\r\n                    return `${code_line[0].mnemonic} - Attempt to write to read-only memory @ ${code_line[2]}`;\r\n    \r\n                __lval                  = ram_view.getUint16(__dst, window.little_endian);\r\n                ram_view.setUint16(__dst, (__lval - __rval), window.little_endian);\r\n            }\r\n            if (code_line[0].mnemonic === window.S16_MNEMONIC_SUB32)\r\n            {\r\n                if (! is_writeable(ram_view, code_line[2]))\r\n                    return `${code_line[0].mnemonic} - Attempt to write to read-only memory @ ${code_line[2]}`;\r\n    \r\n                __lval                  = ram_view.getUint32(__dst, window.little_endian);\r\n                ram_view.setUint32(__dst, (__lval - __rval), window.little_endian);\r\n            }\r\n\r\n            if (__lval !== false)\r\n            {\r\n                messenger.verbose(`Executed ${code_line[0].mnemonic} @ ${__dst}: ${__lval} - ${__rval} = (${__lval - __rval})`);    \r\n                __lval = true;\r\n            }\r\n\r\n            return __lval;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Logical operations.                                  //\r\n///////////////////////////////////////////////////////////\r\n//                                                       //\r\n//  Logical operations will make comparisons and set     //\r\n//  or unset bits in the FL (flags) register based on    //\r\n//  the outcome of the comparison.                       //\r\n//                                                       //\r\n//  The frist 3 bits of flags are used to indicate the   //\r\n//  the results of any logical evaluation:               //\r\n//                                                       //\r\n//      FL          0  0  0  0  0  0  0  0               //\r\n//                  |  |  |                              //\r\n//      Less than --+  |  +-- Greater than               //\r\n//                     |                                 //\r\n//                  Equal to                             //\r\n//                                                       //\r\n//  If we do a comparison, e.g:                          //\r\n//                                                       //\r\n//      cmp32   100, 200;                                //\r\n//                                                       //\r\n//  The appropriate flags will be set to describe the    //\r\n//  outcome. We're asking to compare the right value     //\r\n//  against the left - 200 is greater than 100 so the    //\r\n//  first two bits of FL will be 0 and the third bit     //\r\n//  will be 1:                                           //\r\n//                                                       //\r\n//      FL          0  0  1  0  0  0  0  0               //\r\n//                                                       //\r\n//  We can then make choices based on this result, for   //\r\n//  example, we can do a jne (jump if not equal) to      //\r\n//  execute a specific block of code:                    //\r\n//                                                       //\r\n//      cmp32   100, 200;                                //\r\n//      jne     __address_label;                         //\r\n//                                                       //\r\n//  Or we could use jgt (jump if grater than). The jump  //\r\n//  instructions will check which bits are set in FL     //\r\n//  and act accordingly.                                 //\r\n//                                                       //\r\n//    Instruction    Equivalent    Flags                 //\r\n//                                                       //\r\n//      je             ==            0 1 0 0 0 0 0 0     //\r\n//      jne            !=            0 0 0 0 0 0 0 0     //\r\n//      jlt            <             1 0 0 0 0 0 0 0     //\r\n//      jgt            >             0 0 1 0 0 0 0 0     //\r\n//      jle            <=            1 1 0 0 0 0 0 0     //\r\n//      jge            >=            0 1 1 0 0 0 0 0     //\r\n//                                                       //\r\n//  The above table shows what flags/bits need to be     //\r\n//  set for a particular jump instruction to work.       //\r\n//                                                       //\r\n///////////////////////////////////////////////////////////\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __execute_cmp()                                      //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __execute_cmp           = (\r\n\r\n            ram_view,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   __lval              = code_line[2];\r\n            const   __rval              = code_line[3];\r\n\r\n            let     __flags             = get_reg('FL', segment);\r\n\r\n            if (\r\n                code_line[0].mnemonic !== window.S16_MNEMONIC_CMP8     &&\r\n                code_line[0].mnemonic !== window.S16_MNEMONIC_CMP16    &&\r\n                code_line[0].mnemonic !== window.S16_MNEMONIC_CMP32\r\n            )\r\n                return false;\r\n\r\n    //  Unset the first 3 bits in flags.2\r\n    //\r\n            __flags = __flags & (~0b11100000);\r\n\r\n    //  Evaluate...\r\n    //\r\n            if (__rval === __lval)\r\n                __flags = __flags |= 0b01000000;\r\n            if (__rval < __lval)\r\n                __flags = __flags |= 0b10000000;\r\n            if (__rval > __lval)\r\n                __flags = __flags |= 0b00100000;\r\n\r\n    //  Set the flags in the FL register.\r\n            set_reg('FL', __flags, segment);\r\n\r\n            messenger.verbose(`Executed ${code_line[0].mnemonic} on ${__lval}, ${__rval} - FLAGS = ${__flags.toString(2)}`)\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __execute_jmp()                                      //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __execute_jmp           = (\r\n\r\n            ram_view,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   __addr              = code_line[2];\r\n            const   __flags             = get_reg('FL');\r\n\r\n            let     __outcome           = \"false\";\r\n\r\n            if (\r\n                code_line[0].mnemonic !== window.S16_MNEMONIC_JMP   &&\r\n                code_line[0].mnemonic !== window.S16_MNEMONIC_JE    &&\r\n                code_line[0].mnemonic !== window.S16_MNEMONIC_JNE   &&\r\n                code_line[0].mnemonic !== window.S16_MENMONIC_JLT   &&\r\n                code_line[0].mnemonic !== window.S16_MNEMONIC_JLE   &&\r\n                code_line[0].mnemonic !== window.S16_MENMONIC_JGT   &&\r\n                code_line[0].mnemonic !== window.S16_MNEMONIC_JGE\r\n            )\r\n                return false;\r\n\r\n            // if (__addr < window.S16_HEADER_CODE || __addr >= window.S16_HEADER_EXESIZE)\r\n            //     return `${code_line[0].mnemonic} - Attempt to execute code at ${code_line[2]}`;\r\n    \r\n            if (code_line[0].mnemonic === window.S16_MNEMONIC_JMP)\r\n                __outcome = \"true\";\r\n            else\r\n            {\r\n                if (code_line[0].mnemonic === window.S16_MNEMONIC_JE && (__flags & 0b01000000))\r\n                    __outcome = \"true\";\r\n                if (code_line[0].mnemonic === window.S16_MNEMONIC_JNE && ! (__flags & 0b01000000))\r\n                    __outcome = \"true\";\r\n                if (code_line[0].mnemonic === window.S16_MNEMONIC_JLT && (__flags & 0b10000000))\r\n                    __outcome = \"true\";\r\n                if (code_line[0].mnemonic === window.S16_MNEMONIC_JLE && (__flags & 0b11000000))\r\n                    __outcome = \"true\";\r\n                if (code_line[0].mnemonic === window.S16_MNEMONIC_JGT && (__flags & 0b00100000))\r\n                    __outcome = \"true\";\r\n                if (code_line[0].mnemonic === window.S16_MNEMONIC_JGE && (__flags & 0b01100000))\r\n                    __outcome = \"true\";\r\n            }\r\n\r\n            if (__outcome === \"true\")\r\n                set_reg('IP', __addr);\r\n\r\n            messenger.verbose(`Executed ${code_line[0].mnemonic} - evaluated as ${__outcome}, IP = ${get_reg('IP')}`);\r\n\r\n            return true;\r\n\r\n        };\r\n        \r\n\r\n///////////////////////////////////////////////////////////\r\n//  Bitwise operations.                                  //\r\n///////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _execute_line()                                      //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _execute_line           = (\r\n\r\n            code_line,\r\n            segment_id                  = false\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   __ram_view          = new DataView(ram[segment]);\r\n            let     __return_value      = false;\r\n\r\n            if (code_line[0] === 0)\r\n                return false;\r\n            \r\n            if (segment_id !== false)\r\n                segment = segment_id;\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Mathematical operations.\r\n//\r\n\r\n            __return_value              = __execute_add(__ram_view, code_line);\r\n\r\n            if (__return_value === true || typeof __return_value === 'string')\r\n                return __return_value;\r\n\r\n            __return_value              = __execute_sub(__ram_view, code_line);\r\n\r\n            if (__return_value === true || typeof __return_value === 'string')\r\n                return __return_value;\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Logical operations.\r\n//\r\n\r\n            __return_value              = __execute_cmp(__ram_view, code_line);\r\n\r\n            if (__return_value === true || typeof __return_value === 'string')\r\n                return __return_value;\r\n\r\n            __return_value              = __execute_jmp(__ram_view, code_line);\r\n\r\n            if (__return_value === true || typeof __return_value === 'string')\r\n                return __return_value;\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Bitwise operations.\r\n//\r\n\r\n\r\n            return __return_value;\r\n\r\n        };\r\n\r\n\r\n        return {\r\n\r\n            execute_line:               _execute_line\r\n\r\n        };\r\n\r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/src/sys/dev/ALU.js?");

/***/ }),

/***/ "./src/js/src/sys/dev/CPU.js":
/*!***********************************!*\
  !*** ./src/js/src/sys/dev/CPU.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CPU: () => (/* binding */ CPU)\n/* harmony export */ });\n/* harmony import */ var _Timer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Timer.js */ \"./src/js/src/sys/dev/Timer.js\");\n/* harmony import */ var _Timer_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Timer_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ALU_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ALU.js */ \"./src/js/src/sys/dev/ALU.js\");\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/src/sys/dev/CPU.js               //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//\r\n//\r\n\r\n    \r\n    \r\n\r\n    \r\n\r\n\r\n    const   S16_DEV_MAX                 = 8;\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  These bits can be set in the FL register to halt\r\n//  or pause the system.\r\n//\r\n    const   S16_SYSTEM_HALT             = 0b00001000;\r\n    const   S16_SYSTEM_WAIT             = 0b00000100;\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The CPU module.                                      //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const    CPU                 = (\r\n\r\n        objConfigure,\r\n        objDevices,\r\n        messenger,\r\n        ram\r\n\r\n    ) =>\r\n    {\r\n\r\n\r\n        const   __ram                   = objDevices[0].ram;\r\n\r\n\r\n        const   __display               = objDevices[1];\r\n\r\n\r\n        let     __segment               = 0;\r\n\r\n\r\n        const   __opcode_table          = {};\r\n\r\n    \r\n        let     __call_depth            = 1;\r\n        let     __int_handler           = false;\r\n\r\n\r\n        let     __clock_speed           = .5;\r\n        let     __clock_timer_id        = false;\r\n\r\n        let     __alu                   = false;\r\n        \r\n        let     __message               = false;\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __set_reg()                                          //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __set_reg               = (\r\n\r\n            reg,\r\n            value,\r\n            segment                     = 0\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   __ram_view          = new DataView(__ram[segment]);\r\n\r\n            if (reg === 'RT' || reg === 'FL' || reg === 'OI' || reg === 'II')\r\n                __ram_view.setUint8(window.S16_REG[reg], value);\r\n            else\r\n                __ram_view.setUint32(window.S16_REG[reg], value, window.little_endian);\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __get_reg()                                          //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __get_reg               = (\r\n\r\n            reg,\r\n            segment                     = 0\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   __ram_view          = new DataView(__ram[segment]);\r\n\r\n            if (reg === 'RT' || reg === 'FL' || reg === 'OI' || reg === 'II')\r\n                return __ram_view.getUint8(window.S16_REG[reg]);\r\n            else\r\n                return __ram_view.getUint32(window.S16_REG[reg], window.little_endian);\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __reg_writeable()                                    //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __reg_writeable         = reg =>\r\n        {\r\n\r\n            if (\r\n                reg === window.S16_REG['CS']    ||\r\n                reg === window.S16_REG['DS']    ||\r\n                reg === window.S16_REG['SS']    ||\r\n                reg === window.S16_REG['IP']    ||\r\n                reg === window.S16_REG['SP']    ||\r\n                reg === window.S16_REG['HB']    ||\r\n                reg === window.S16_REG['HP']    ||\r\n                reg === window.S16_REG['FL']\r\n            )\r\n            {\r\n                console.log(`Register ${reg} is not writeable`);\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __is_writeable()                                     //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __is_writeable          = (\r\n\r\n            ram_view,\r\n            operand\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   __rw_offset         = ram_view.getUint32(window.S16_HEADER_RW, window.little_endian);\r\n            const   __code_offset       = ram_view.getUint32(window.S16_HEADER_CODE, window.little_endian);\r\n            const   __exe_size          = ram_view.getUint32(window.S16_HEADER_EXESIZE, window.little_endian);\r\n\r\n    //  If it's a register (these are stored in RAM\r\n    //  between the header and RO sections) then we\r\n    //  need to check which register is being written\r\n    //  to - some cannot be changed directly such as\r\n    //  the CS, DS and SS registers.\r\n    //\r\n            if (operand >= window.S16_REG['CS'] && operand <= window.S16_REG['FX'])\r\n            {\r\n                if (__reg_writeable(operand))\r\n                    return true;\r\n\r\n                return false;\r\n            }\r\n    \r\n    //  We can write to the rw section and between the\r\n    //  code section and stack - anywhere else is\r\n    //  read-only.\r\n    //\r\n            if (\r\n                operand < __rw_offset       ||\r\n                (operand >= __code_offset && operand < __exe_size)\r\n            )\r\n                return false;\r\n            \r\n            return true;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __build_vector_table()                               //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __build_vector_table    = () =>\r\n        {\r\n\r\n            const   __ram_view          = new DataView(__ram[__segment]);\r\n\r\n            for (let byte_no = 0; byte_no < S16_DEV_MAX; byte_no++)\r\n            {\r\n                __ram_view.setUint8((window.S16_HEADER_VTABLE + byte_no), 0);\r\n                __ram_view.setUint32(((window.S16_HEADER_VTABLE + S16_DEV_MAX + (byte_no * 4))), 0, window.little_endian);\r\n            }\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __vector_lookup()                                    //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __vector_lookup         = (\r\n        \r\n            ram_view,\r\n            interrupt\r\n        \r\n        ) =>\r\n        {\r\n\r\n    //  We search the first 8 bytes of the table looking\r\n    //  for the matching interrupt handler.\r\n    //\r\n            for (let byte_no = 0; byte_no < S16_DEV_MAX; byte_no++)\r\n            {\r\n                const   __int           = ram_view.getUint8(window.S16_HEADER_VTABLE + byte_no);\r\n\r\n                if (__int === interrupt)\r\n                {\r\n                    return {\r\n                        'offset': ram_view.getUint32((window.S16_HEADER_VTABLE + S16_DEV_MAX + (byte_no * 4)), window.little_endian),\r\n                        'index': byte_no\r\n                    };\r\n                }\r\n            }\r\n\r\n            return `Error - unknown interrupt '${interrupt}'`;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __execute_dev()                                      //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __execute_dev           = (\r\n\r\n            ram_view,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            if (code_line[0].mnemonic !== __webpack_require__.g.S16_MNEMONIC_DEV)\r\n                return false;\r\n\r\n            const   __intHandler        = __vector_lookup(\r\n                ram_view,\r\n                code_line[3]\r\n            );\r\n\r\n            if (typeof __intHandler !== 'string')\r\n                return `Error - interrupt ID ${code_line[2]} previously assigned to device index${__intHandler.index}, offset=${__intHandler.offset}`;\r\n\r\n            if (ram_view.getUint32((window.S16_HEADER_VTABLE + S16_DEV_MAX + (code_line[2] * 4)), window.little_endian) !== 0)\r\n                return `Error - Device ${code_line[2]} previously assigned to interrupt=${ram_view.getUint8(window.S16_HEADER_VTABLE + code_line[2])}, offset=${ram_view.getUint32((window.S16_HEADER_VTABLE + S16_DEV_MAX + (code_line[2] * 4)), window.little_endian)}`;\r\n\r\n            ram_view.setUint8((window.S16_HEADER_VTABLE + code_line[2]), code_line[3]);\r\n            ram_view.setUint32((window.S16_HEADER_VTABLE + S16_DEV_MAX + (code_line[2] * 4)), code_line[4], window.little_endian);\r\n            \r\n            messenger.verbose(` Set handler in vector table: index=${ram_view.getUint8(window.S16_HEADER_VTABLE + code_line[2])}, offset=${ram_view.getUint32((window.S16_HEADER_VTABLE + S16_DEV_MAX + (code_line[2] * 4)), window.little_endian)}`)\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __execute_int()                                      //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __execute_int           = (\r\n            \r\n            ram_view,\r\n            code_line\r\n        \r\n        ) =>\r\n        {\r\n\r\n            const   __operand           = code_line[2];\r\n\r\n            let     __return_value      = false;\r\n\r\n            if (code_line[0].mnemonic === window.S16_MNEMONIC_INT)\r\n            {\r\n    //  The operand tells us what device we're referring\r\n    //  to - it has to be indexed via the vector table\r\n    //\r\n                let     __intHandler    = __vector_lookup(\r\n                    ram_view,\r\n                    code_line[2]\r\n                );\r\n\r\n                if (typeof __intHandler === 'string')\r\n                    return __intHandler;\r\n\r\n    //  The index of the interrupt in the vector table\r\n    //  is used to index the actual device module in\r\n    //  objDevices[]\r\n    //\r\n                __int_handler = __intHandler.index;\r\n\r\n    //  This is the address of the device handler to\r\n    //  be passed into the __execute_function() method.\r\n    //\r\n    //  The device handler function will run first, then\r\n    //  the device module will be invoked on return.\r\n    //\r\n                const   __dev_handler = __intHandler.offset;\r\n\r\n                if (__dev_handler === 0 || __int_handler === 0)\r\n                    return `Error - interrupt '${code_line[2]}' has no handler`;\r\n\r\n                messenger.verbose(`Executing interrupt ${code_line[2]} (vector ID ${__dev_handler})`);\r\n\r\n                return __execute_function(\r\n                    ram_view,\r\n                   __dev_handler\r\n                );\r\n            }\r\n\r\n            return __return_value;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __execute_function()                                 //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __execute_function      = (\r\n\r\n            ram_view,\r\n            code_addr\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   __exe_size          = ram_view.getUint32(window.S16_HEADER_EXESIZE, window.little_endian);\r\n\r\n            const   __ip                = __get_reg('IP', __segment);\r\n            let     __sp                = __get_reg('SP', __segment);\r\n\r\n            if ((__sp - 4) < __get_reg('HP'))\r\n                return `Call error - stack full`;\r\n\r\n    //  Push the return address onto the stack.\r\n    //\r\n            ram_view.setUint32(__sp, __ip, window.little_endian);\r\n\r\n            __sp -= 4;\r\n\r\n            __set_reg('SP', __sp);\r\n            __set_reg('IP', code_addr, __segment);\r\n\r\n            __call_depth++;\r\n\r\n            messenger.verbose(`>> ${ram_view.getUint32(__sp + 4, window.little_endian)} <<Executed call instruction to address ${code_addr}, return address ${__ip}, call depth = ${__call_depth}, BP == ${__get_reg('BP').toString(16)}`);\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __execute_call()                                     //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __execute_call          = (\r\n\r\n            ram_view,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            if (code_line[0].mnemonic !== 'call')\r\n                return false;\r\n\r\n    //  The operand should point to a memory location\r\n    //  >= than the code offset.\r\n    //\r\n            if (code_line[2] < ram_view.getUint32((window.S16_HEADER_CODE), window.little_endian))\r\n                return `Call error - can't execute data or header sections`;\r\n\r\n            return __execute_function(\r\n                ram_view,\r\n                code_line[2]\r\n            );\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __function_return()                                  //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __function_return       = (\r\n\r\n            ram_view,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            let     __sp                = __get_reg('SP');\r\n\r\n            if (__int_handler)\r\n                objDevices[__int_handler].interrupt(ram, __segment);\r\n\r\n    //  Pop the return address from the stack into the\r\n    //  IP register.\r\n    //\r\n            if ((__sp + 4) > 0xFFFF && __call_depth > 1)\r\n                return `STACK`;\r\n            else if (__call_depth > 1)\r\n            {\r\n                __sp += 4;\r\n                __set_reg('SP', __sp);\r\n                __set_reg('IP', ram_view.getUint32(__sp, window.little_endian));\r\n            }    \r\n\r\n            messenger.verbose(`Executed return to ${__get_reg('IP')}`);\r\n\r\n            __call_depth--;\r\n\r\n            if (__int_handler)\r\n            {\r\n                __int_handler = false;\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __execute_return()                                   //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __execute_return        = (\r\n\r\n            ram_view,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            if (typeof code_line === 'undefined')\r\n                return __function_return(ram_view);\r\n            \r\n            if (code_line[0].mnemonic !== window.S16_MNEMONIC_RET)\r\n                return false;\r\n\r\n            __set_reg('RT', code_line[2], __segment);\r\n\r\n            return __function_return(ram_view);\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __execute_mov()                                      //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __execute_mov           = (\r\n\r\n            ram_view,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            let     __return_value      = false;\r\n\r\n            if (code_line[0].mnemonic === window.S16_MNEMONIC_MOV8)\r\n            {\r\n                if (! __is_writeable(ram_view, code_line[2]))\r\n                    return `Attempt to write to a read-only location: ${__get_reg('IP')} ${code_line[2]}, ${code_line[3]}`;\r\n        \r\n                ram_view.setUint8(code_line[2], code_line[3]);\r\n                __return_value = true;\r\n            }\r\n            if (code_line[0].mnemonic === window.S16_MNEMONIC_MOV16)\r\n            {\r\n                if (! __is_writeable(ram_view, code_line[2]))\r\n                    return `Attempt to write to a read-only location: ${__get_reg('IP')} ${code_line[2]}, ${code_line[3]}`;\r\n        \r\n                ram_view.setUint16(code_line[2], code_line[3], window.little_endian);\r\n                __return_value = true;\r\n            }\r\n            if (code_line[0].mnemonic === window.S16_MNEMONIC_MOV32)\r\n            {\r\n                if (! __is_writeable(ram_view, code_line[2]))\r\n                    return `Attempt to write to a read-only location: ${__get_reg('IP')} ${code_line[2]}, ${code_line[3]}`;\r\n        \r\n                ram_view.setUint32(code_line[2], code_line[3], window.little_endian);\r\n                __return_value = true;\r\n            }\r\n\r\n            if (__return_value)\r\n                messenger.verbose(`Executed ${code_line[0].mnemonic}`);\r\n\r\n            return __return_value;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __execute_push()                                     //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __execute_push          = (\r\n\r\n            ram_view,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   __exe_size          = ram_view.getUint32(window.S16_HEADER_EXESIZE, window.little_endian);\r\n\r\n            let     __sp                = __get_reg('SP', __segment);\r\n            let     __mnemonic          = code_line[0].mnemonic;\r\n\r\n            messenger.verbose(` Executed ${__mnemonic} (${__sp} = ${code_line[2]})`)\r\n\r\n            if (__sp < __get_reg('HP'))\r\n                return `Call error - stack full`;\r\n        \r\n            if (__mnemonic === window.S16_MNEMONIC_PUSH8)\r\n                ram_view.setUint8(__sp, code_line[2]);\r\n            if (__mnemonic === window.S16_MNEMONIC_PUSH16)\r\n                ram_view.setUint16(__sp, code_line[2], window.little_endian);\r\n            if (__mnemonic === window.S16_MNEMONIC_PUSH32)\r\n                ram_view.setUint32(__sp, code_line[2], window.little_endian);\r\n\r\n            if (__mnemonic === window.S16_MNEMONIC_PUSH8)\r\n                __sp -= 1;\r\n            else if (__mnemonic === window.S16_MNEMONIC_PUSH16)\r\n                __sp -= 2;\r\n            else if (__mnemonic === window.S16_MNEMONIC_PUSH32)\r\n                __sp -= 4;    \r\n            else\r\n                return false;\r\n\r\n            __set_reg('SP', __sp, __segment);\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __execute_pop()                                      //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __execute_pop           = (\r\n\r\n            ram_view,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   __exe_size          = ram_view.getUint32(window.S16_HEADER_EXESIZE, window.little_endian);\r\n\r\n            let     __sp                = __get_reg('SP', __segment);\r\n            let     __mnemonic          = code_line[0].mnemonic;\r\n            \r\n            if (__mnemonic === window.S16_MNEMONIC_POP8)\r\n                __sp += 1;\r\n            if (__mnemonic === window.S16_MNEMONIC_POP16)\r\n                __sp += 2;\r\n            if (__mnemonic === window.S16_MNEMONIC_POP32)\r\n                __sp += 4;    \r\n\r\n            if (__sp > 0xFFFF)\r\n                return `Cannot pop - bottom of stack reached`;\r\n\r\n            if (__mnemonic === window.S16_MNEMONIC_POP8)\r\n            {\r\n                if (! __is_writeable(ram_view, code_line[2]))\r\n                    return `Attempt to write to a read-only location: ${__get_reg('IP')} ${code_line[2]}, ${code_line[3]}`;\r\n        \r\n                ram_view.setUint8(code_line[2], ram_view.getUint16(__sp, window.little_endian));\r\n            }\r\n            else if (__mnemonic === window.S16_MNEMONIC_POP16)\r\n            {\r\n                if (! __is_writeable(ram_view, code_line[2]))\r\n                    return `Attempt to write to a read-only location: ${__get_reg('IP')} ${code_line[2]}, ${code_line[3]}`;\r\n        \r\n                ram_view.setUint16(code_line[2], ram_view.getUint16(__sp, window.little_endian), window.little_endian);\r\n            }    \r\n            else if (__mnemonic === window.S16_MNEMONIC_POP32)\r\n            {\r\n                if (! __is_writeable(ram_view, code_line[2]))\r\n                    return `Attempt to write to a read-only location: ${__get_reg('IP')} ${code_line[2]}, ${code_line[3]}`;\r\n        \r\n                ram_view.setUint32(code_line[2], ram_view.getUint32(__sp, window.little_endian), window.little_endian);\r\n            }\r\n            else\r\n                return false;\r\n\r\n            __set_reg('SP', __sp, __segment);\r\n\r\n            messenger.verbose(`Executed ${__mnemonic} (${__sp.toString(2)} = ${code_line[2].toString(2)})`)\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __execute_par()                                      //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __execute_par           = (\r\n\r\n            ram_view,\r\n            code_line\r\n\r\n        ) =>\r\n        {\r\n\r\n            let     __bp                = __get_reg('BP');\r\n            let     __offset            = __bp + 4;\r\n\r\n            if (\r\n                code_line[0].mnemonic !== window.S16_MNEMONIC_PAR8      &&\r\n                code_line[0].mnemonic !== window.S16_MNEMONIC_PAR16     &&\r\n                code_line[0].mnemonic !== window.S16_MNEMONIC_PAR32\r\n            )\r\n                return false;\r\n\r\n            console.log(`>>> PARAM base offset = ${__offset}, BP=${__bp}`);\r\n\r\n            if (code_line[0].mnemonic === window.S16_MNEMONIC_PAR8)\r\n            {\r\n                __offset += code_line[3];\r\n                if (__offset > 0xFFFF)\r\n                    return `Cannot access parameter ${code_line[3]} at offset ${__offset}, out of range`;\r\n                ram_view.setUint8(code_line[2], ram_view.getUint8(__offset));\r\n            }\r\n            if (code_line[0].mnemonic === window.S16_MNEMONIC_PAR16)\r\n            {\r\n                __offset += ((code_line[3] * 2) + 2);\r\n                if (__offset > 0xFFFE)\r\n                    return `Cannot access parameter ${code_line[3]} at offset ${__offset}, out of range`;\r\n                ram_view.setUint16(code_line[2], ram_view.getUint16(__offset, window.little_endian), window.little_endian);\r\n            }\r\n            if (code_line[0].mnemonic === window.S16_MNEMONIC_PAR32)\r\n            {\r\n                __offset += ((code_line[3] * 4) + 4);\r\n                if (__offset > 0xFFFC)\r\n                    return `Cannot access parameter ${code_line[3]} at offset ${__offset}, out of range`;\r\n                ram_view.setUint32(code_line[2], ram_view.getUint32(__offset, window.little_endian), window.little_endian);\r\n            }\r\n\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n          \r\n///////////////////////////////////////////////////////////\r\n//  __execute_line()                                     //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __execute_line          = (\r\n        \r\n            ram_view,\r\n            code_line\r\n        \r\n        ) =>\r\n        {\r\n\r\n            let     __return_value      = true;\r\n\r\n    //  What instruction do we have? All of the calls\r\n    //  made here work in the same way - we catch the\r\n    //  __return_value - if it's true then we know\r\n    //  the operation was performed successfully.\r\n    //\r\n    //  If it returns a string thee was an error.\r\n    //\r\n    //  If it returns false it's not the opcode we're\r\n    //  looking for. Example, if code_line contains a jmp\r\n    //  instruction then the call to __alu.execute_line()\r\n    //  should return true because the jmp instruction is\r\n    //  part of the ALU module. If __alu returns a string\r\n    //  then we know it's the right call but that there\r\n    //  was an error.\r\n    //\r\n    //  If it's a mov instruction the call to the __alu\r\n    //  will return false because mov isn't part of that\r\n    //  module.\r\n    //\r\n    //  In short - if any call returns true or a string\r\n    //  we can bail and return that true or string value\r\n    //  to the caller.\r\n    //\r\n    //  If any call returns false we know it isn't what\r\n    //  we're looking for so we try the next.\r\n    //\r\n            __return_value              = __alu.execute_line(code_line, __segment);\r\n\r\n            if (__return_value === true || typeof __return_value === 'string')\r\n                return __return_value;\r\n\r\n    //  Interrupt?\r\n    //\r\n            __return_value              = __execute_int(ram_view, code_line);\r\n\r\n            if (__return_value === true || typeof __return_value === 'string')\r\n                return __return_value;\r\n\r\n    //  Is it a call instruction?\r\n    //\r\n            __return_value              = __execute_call(ram_view, code_line);\r\n\r\n            if (__return_value === true || typeof __return_value === 'string')\r\n                return __return_value;\r\n\r\n    //  Is it a return?\r\n    //\r\n            __return_value              = __execute_return(ram_view, code_line);\r\n\r\n            if (__return_value === true || typeof __return_value === 'string')\r\n                return __return_value;\r\n\r\n    //  Is it a dev instruction? This allows us to assign\r\n    //  handlers for device interrupts.\r\n    //\r\n            __return_value              = __execute_dev(ram_view, code_line);\r\n\r\n            if (__return_value === true || typeof __return_value === 'string')\r\n                return __return_value;\r\n\r\n    //  Is it a push instruction?\r\n    //\r\n            __return_value              = __execute_push(ram_view, code_line);\r\n\r\n            if (__return_value === true || typeof __return_value === 'string')\r\n                return __return_value;\r\n\r\n    //  Is it a pop instruction?\r\n    //\r\n            __return_value              = __execute_pop(ram_view, code_line);\r\n\r\n            if (__return_value === true || typeof __return_value === 'string')\r\n                return __return_value;\r\n\r\n    //  Is it a par instruction?\r\n    //\r\n            __return_value              = __execute_par(ram_view, code_line);\r\n\r\n            if (__return_value === true || typeof __return_value === 'string')\r\n                return __return_value;\r\n\r\n    //  Is it a mov instruction?\r\n    //\r\n            __return_value              = __execute_mov(ram_view, code_line);\r\n\r\n            if (__return_value === true || typeof __return_value === 'string')\r\n                return __return_value;\r\n\r\n            return __return_value;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __fetch_line()                                       //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __fetch_line            = () =>\r\n        {\r\n\r\n            const   __flags             = __get_reg('FL');\r\n\r\n            if (__call_depth <= 0)\r\n                return false;\r\n\r\n    //  We loop continuously until we find the end of\r\n    //  the function (opcode will be 0).\r\n    //\r\n            const   __ram_view      = new DataView(__ram[__segment]);\r\n\r\n    //  Fetch the next instruction/opcode (2 bytes).\r\n    //\r\n            const   __ip            = __get_reg('IP', __segment);\r\n            \r\n    //  Get the entire instruction (2 bytes) and the\r\n    //  individual components (modifier & opcode).\r\n    //\r\n            const   __instruction   = __ram_view.getUint16(__ip, window.little_endian);\r\n            let     __modifier      = __ram_view.getUint8(__ip);\r\n            let     __opcode        = __ram_view.getUint8(__ip + 1);\r\n\r\n            if (window.little_endian)\r\n            {\r\n                __modifier = __opcode;\r\n                __opcode = __ram_view.getUint8(__ip);\r\n            }\r\n\r\n            if (__flags & S16_SYSTEM_WAIT)\r\n                    return true;\r\n            \r\n            let     __line_size     = 2;\r\n\r\n            if (__opcode === 0)\r\n            {\r\n                __call_depth--;\r\n                return false;\r\n            }\r\n\r\n    //  Get the params table for this instruction.\r\n    //\r\n            const   __opcode_id     = `__op_${__opcode}`;\r\n            const   __objMnemonic   = window.S16_OPCODES[__opcode_id];\r\n            let     __params        = __objMnemonic['params'];\r\n\r\n            let     __operand;\r\n            let     __operands      = [];\r\n            \r\n    //  Cycle through the __params table - the value\r\n    //  of each element in __params tells us the\r\n    //  size the operand should be.\r\n    //\r\n    //  Any parameters will be modified if necessary\r\n    //  then pushed to the __operands array for\r\n    //  the execution.\r\n    //\r\n            for (let param_no = 0; param_no < __params.length; param_no++)\r\n            {\r\n\r\n                const   __param     = __params[param_no];\r\n\r\n                if (__param === 1)\r\n                    __operand = __ram_view.getUint8((__ip + __line_size));\r\n                else if (__param === 2)\r\n                    __operand = __ram_view.getUint16((__ip + __line_size), window.little_endian);\r\n                else\r\n                    __operand = __ram_view.getUint32((__ip + __line_size), window.little_endian);\r\n\r\n    //  Any modifiers set?\r\n    //\r\n                if (__modifier)\r\n                {\r\n\r\n                    if (\r\n                        (__modifier & window.S16_MOD_LITERAL[param_no]) ||\r\n                        (__modifier & window.S16_MOD_INDIRECT[param_no])\r\n                    )\r\n                    {\r\n                        if (__param === 1)\r\n                            __operand = __ram_view.getUint8(__operand);\r\n                        if (__param === 2)\r\n                            __operand = __ram_view.getUint16(__operand, window.little_endian);\r\n                        if (__param === 4)\r\n                            __operand = __ram_view.getUint32(__operand, window.little_endian);\r\n                    }\r\n\r\n                    if (__modifier & window.S16_MOD_INDIRECT[param_no])\r\n                    {\r\n                        if (__param === 1)\r\n                            __operand = __ram_view.getUint8(__operand);\r\n                        if (__param === 2)\r\n                            __operand = __ram_view.getUint16(__operand, window.little_endian);\r\n                        if (__param === 4)\r\n                            __operand = __ram_view.getUint32(__operand, window.little_endian);\r\n                    }\r\n                }\r\n\r\n                __operands.push(__operand);\r\n                __line_size += __param;\r\n\r\n            }\r\n\r\n            __set_reg('IP', (__ip + __line_size), __segment);\r\n\r\n            messenger.verbose(` ${__opcode} (${__objMnemonic.mnemonic}) ${__operands} @ offset ${__ip}`);\r\n            messenger.verbose(` IP = ${__get_reg('IP').toString(16)}, RT = ${__get_reg('RT').toString(16)}, FLAGS = ${__get_reg('FL').toString(2)}, BP = ${__get_reg('BP').toString(16)}, SP = ${__get_reg('SP').toString(16)}`);\r\n\r\n            return [ __objMnemonic, __opcode, ...__operands ];\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __initialise_registers()                             //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __initialise_registers  = ram_view =>\r\n        {\r\n            \r\n            messenger.verbose(` Initialising registers...`);\r\n\r\n    //  Set up the registers for execution.\r\n    //\r\n            __set_reg('BP', 0xFFFC, 0);\r\n            __set_reg('IP', ram_view.getUint32(window.S16_HEADER_MAIN, window.little_endian), 0);\r\n            __set_reg('SP', 0xFFFC, 0);\r\n\r\n            __set_reg('CS', 0, 0);\r\n            __set_reg('DS', 0, 0);\r\n            __set_reg('SS', 0, 0);\r\n\r\n            __set_reg('HB', ram_view.getUint32(window.S16_HEADER_EXESIZE, window.little_endian), 0);\r\n            __set_reg('HP', ram_view.getUint32(window.S16_HEADER_EXESIZE, window.little_endian), 0);\r\n\r\n            __set_reg('IO', 0, 0);\r\n            __set_reg('II', 0, 0);\r\n\r\n            __set_reg('RT', 0, 0);\r\n            __set_reg('FL', 0, 0);\r\n\r\n            __set_reg('AX', 0, 0);\r\n            __set_reg('BX', 0, 0);\r\n            __set_reg('CX', 0, 0);\r\n            __set_reg('DX', 0, 0);\r\n            __set_reg('EX', 0, 0);\r\n            __set_reg('FX', 0, 0);\r\n\r\n            messenger.verbose(` Done`);\r\n            messenger.verbose(` Offset of _main: ${__get_reg('IP')}`);\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __fetch_and_execute()                                //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __fetch_and_execute     = ram_view =>\r\n        {\r\n\r\n            let     __code_line;\r\n            let     __return_value;\r\n    \r\n    //  Grab the next line of code along with parameters,\r\n    //  the __fetch_line() method will return an array\r\n    //  containing our instruction & operands.\r\n    //\r\n            __code_line = __fetch_line();\r\n\r\n            if (__code_line === true)\r\n                return true;\r\n\r\n    //  False is returned when we come to the end of\r\n    //  the current function.\r\n    //\r\n            if (__code_line === false)\r\n            {\r\n                if (__call_depth <= 0)\r\n                {\r\n    //  _main sits at depth 0 - so if we land here\r\n    //  that means the program terminated normally.\r\n    //\r\n                    window.clearInterval(__clock_timer_id);\r\n                    __clock_timer_id = false;\r\n\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n    //  Execute the fetched line.\r\n    //\r\n            __return_value = __execute_line(\r\n                ram_view,\r\n                __code_line\r\n            );\r\n\r\n            if (typeof __return_value === 'string')\r\n            {\r\n    //  A returned string is an error message - we bail\r\n    //  and disable execution.\r\n    //\r\n                window.clearInterval(__clock_timer_id);\r\n                __clock_timer_id = false;\r\n\r\n                return __return_value;\r\n            }\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __run()                                              //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _run                    = segment =>\r\n        {\r\n\r\n            const   __ram_view          = new DataView(__ram[__segment]);\r\n\r\n            __segment = segment;\r\n\r\n            __initialise_registers(__ram_view);\r\n            __build_vector_table();\r\n\r\n            objDevices[2].initialise(\r\n                __ram_view,\r\n                __get_reg,\r\n                __set_reg\r\n            );\r\n\r\n            if (\r\n                objConfigure.hasOwnProperty('debug') && \r\n                objConfigure['debug'] === 'step'\r\n            )\r\n            {\r\n\r\n    ///////////////////////////////////////////////////////\r\n    //  Run in debug mode - haven't tested this much and\r\n    //  made some changes since - might not work...\r\n    //\r\n    //  Was implemented early on so I could step through\r\n    //  and execute code one line at a time.\r\n    //\r\n    //  Will come back to this.\r\n    //\r\n                let __running = true;\r\n\r\n                messenger.verbose(` Running in debug (step) mode - click to continue`);\r\n\r\n                $(window).on('click', () => {\r\n                    if (__get_reg('FL') & S16_SYSTEM_HALT)\r\n                        return;\r\n\r\n                    if (__running === false)\r\n                    {\r\n                        __set_reg('IP', __ram_view.getUint32(window.S16_HEADER_MAIN), __segment, window.little_endian);\r\n                        __running = true;\r\n                    }\r\n\r\n                    const   __code_line = __fetch_line();\r\n\r\n                    if (__code_line === false)\r\n                    {\r\n                        if (__call_depth <= 0)\r\n                        {\r\n                            __running = false;\r\n                            return messenger.verbose(` Program exited normally (return value ${__get_reg('RT')})\\n Click to reset\\n`);\r\n                        }\r\n                    }\r\n\r\n                    const   __return_value = __execute_line(\r\n                        __ram_view,\r\n                        __code_line\r\n                    );\r\n\r\n                    if (typeof __return_value === 'string')\r\n                        return messenger.error(__return_value);\r\n\r\n                    messenger.verbose(` Click to continue`);\r\n                });\r\n            }\r\n            else\r\n            {\r\n    //  Fetch-execute loop - continues until __code_line\r\n    //  returns false.\r\n    //\r\n                __clock_timer_id = window.setInterval(() => {\r\n\r\n                    let     __flags         = __get_reg('FL');\r\n\r\n                    if (__flags & S16_SYSTEM_HALT)\r\n                    {\r\n                        window._clearInterval(__clock_timer_id);\r\n                        return;\r\n                    }\r\n\r\n                    const   __return_value = __fetch_and_execute(__ram_view);\r\n\r\n                    if (typeof __return_value === 'string')\r\n                    {\r\n                        __flags |= S16_SYSTEM_HALT;\r\n                        __set_reg('FL', __flags);\r\n                        messenger.error(__return_value);\r\n                        return;\r\n                    }\r\n\r\n                    if (! __return_value)\r\n                    {\r\n                        (__call_depth > 0) ?\r\n                            messenger.verbose(`Function exited normally (RT=${__get_reg('RT')})`)\r\n                        :\r\n                            messenger.verbose(`System halted normally (RT=${__get_reg('RT')})`);\r\n\r\n                        return;\r\n                    }\r\n                    \r\n                }, __clock_speed);\r\n\r\n            }\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __initialise()                                       //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __initialise            = () =>\r\n        {\r\n\r\n            __alu                       = (0,_ALU_js__WEBPACK_IMPORTED_MODULE_1__.ALU)(\r\n                messenger,\r\n                __ram,\r\n                __segment,\r\n                __get_reg,\r\n                __set_reg,\r\n                __is_writeable\r\n            );\r\n\r\n        };\r\n\r\n\r\n        __initialise();\r\n\r\n\r\n        return {\r\n\r\n            run:                        _run\r\n\r\n        };\r\n\r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/src/sys/dev/CPU.js?");

/***/ }),

/***/ "./src/js/src/sys/dev/Display.js":
/*!***************************************!*\
  !*** ./src/js/src/sys/dev/Display.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Display: () => (/* binding */ Display)\n/* harmony export */ });\n/* harmony import */ var _core_DisplayInfo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/DisplayInfo.js */ \"./src/js/src/sys/dev/core/DisplayInfo.js\");\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/src/sys/dev/Display.js           //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//\r\n//\r\n\r\n\r\n    \r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The Display module.                                  //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const    Display             = (\r\n\r\n        objConfigure,\r\n        messenger\r\n\r\n    ) =>\r\n    {\r\n        \r\n\r\n        messenger.verbose(` Initialising display...`);\r\n\r\n\r\n        const   _objDisplay             = (0,_core_DisplayInfo_js__WEBPACK_IMPORTED_MODULE_0__.DisplayInfo)(\r\n                                            objConfigure,\r\n                                            messenger\r\n                                        );\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _initialise_display()                                //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _initialise_display     = () =>\r\n        {\r\n\r\n            window.console_enabled = false;\r\n\r\n            $(`.${objConfigure['terminal-class']}`).on('mouseenter', () => { \r\n\r\n                window.console_enabled = true;\r\n            });\r\n\r\n            $(`.${objConfigure['terminal-class']}`).on('mouseleave', () => {\r\n                \r\n                window.console_enabled = false;\r\n            });\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _clear_display()                                     //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _clear_display          = () =>\r\n        {\r\n\r\n            const   __rows              = _objDisplay['terminal']['rows'];\r\n            const   __cols              = _objDisplay['terminal']['cols'];\r\n\r\n            for (let row = 0; row < __rows; row++)\r\n            {\r\n                for (let col = 0; col < __cols; col++)\r\n                    $(`#${_objDisplay['cells']['id-prefix']}${row}_${col}`).html('');\r\n            }\r\n\r\n            _objDisplay['cursor']['row'] = _objDisplay['cursor']['col'] = 0;\r\n\r\n        };\r\n\r\n\r\n        const   __reset_cell_colors     = () =>\r\n        {\r\n\r\n             _objDisplay['cursor']['reset']();\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _putchar()                                           //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _putchar                = (\r\n\r\n            char_byte,\r\n            row                         = -1,\r\n            col                         = -1\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   __rows              = _objDisplay['terminal']['rows'];\r\n            const   __cols              = _objDisplay['terminal']['cols'];\r\n\r\n            if ((row < 0 || row >= __rows) || (col < 0 || col >= __cols))\r\n            {\r\n                row = _objDisplay['cursor']['row'];\r\n                col = _objDisplay['cursor']['col'];\r\n            }\r\n\r\n            $(`#${_objDisplay['cells']['id-prefix']}${row}_${col}`).html(char_byte);\r\n\r\n            if  (++col > __cols)\r\n            {\r\n                col = 0;\r\n                if ((row + 1) < __rows)\r\n                    row++;\r\n            }\r\n\r\n            _objDisplay['cursor']['row'] = row;\r\n            _objDisplay['cursor']['col'] = col;\r\n\r\n            __reset_cell_colors();\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __move_cursor()                                      //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __move_cursor           = (\r\n\r\n            row,\r\n            col\r\n\r\n        ) =>\r\n        {\r\n\r\n            if (\r\n                    (row < 0 || row > _objDisplay['terminal']['rows'])  ||\r\n                    (col < 0 || col > _objDisplay['terminal']['cols'])\r\n            )\r\n                return false;\r\n\r\n            _objDisplay['cursor']['row'] = row;\r\n            _objDisplay['cursor']['col'] = col;\r\n\r\n            $(`.${_objDisplay['cells']['class']}`).removeClass('cursor_blink');\r\n            $(`.${_objDisplay['cells']['class']}`).removeClass('cursor');\r\n\r\n            return true;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _interrupt()                                         //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _interrupt              = (\r\n\r\n            ram,\r\n            segment                     = 0\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   ram_view          = new DataView(ram.ram[segment]);\r\n\r\n            messenger.verbose(`Display interrupted...`);\r\n\r\n    //  The instruction is at FX:\r\n    //\r\n            const   __instruction       = ram_view.getUint16(window.S16_REG['FX'], window.little_endian);\r\n\r\n            //const   __instruction       = ram.read_word_32(window.S16_REG['FX'], segment);\r\n            \r\n            messenger.verbose(` Display instruction: ${__instruction}`);\r\n\r\n    //  1 is a _clear_display() and requires no parameters.\r\n    //\r\n            if (__instruction === 1)\r\n                return _clear_display();\r\n\r\n    //  2 is a _putchar() and expects an 8-bit param in EX.\r\n    //\r\n            if (__instruction === 2)\r\n            {\r\n                const   __operand           = ram_view.getUint8(window.S16_REG['EX']);\r\n\r\n                //const   __operand           = ram.read_byte(window.S16_REG['EX'], segment);\r\n\r\n                _putchar(String.fromCharCode(__operand));\r\n                return true;\r\n            }\r\n\r\n    //  3 is used to get the number of rows and columns\r\n    //  the display has, the number of rows/lines is\r\n    //  written to DX and the number of columns is\r\n    //  written to EX.\r\n    //\r\n            if (__instruction === 3)\r\n            {\r\n                // ram_view.setUint16(window.S16_REG['DX'], _objDisplay['terminal']['rows'], window.little_endian);\r\n                // ram_view.setUint16(window.S16_REG['EX'], _objDisplay['terminal']['cols'], window.little_endian);\r\n                return true;\r\n            }\r\n\r\n    //  4 is used to get the current cursor position,\r\n    //  the row is stored in the DX register, the\r\n    //  column in EX.\r\n    //\r\n            if (__instruction === 4)\r\n            {\r\n                // ram_view.setUint16(window.S16_REG['DX'], _objDisplay['cursor']['row'], window.little_endian);\r\n                // ram_view.setUint16(window.S16_REG['EX'], _objDisplay['cursor']['col'], window.little_endian);\r\n                return true;\r\n            }\r\n\r\n    //  5 is used to move the cursor position, the\r\n    //  row should be set in CX and the column in\r\n    //  DX.\r\n    //\r\n    //  If either the row or column are out of bounds\r\n    //  the RT register is set to 1.\r\n    //\r\n            if (__instruction === 5)\r\n            {\r\n                const   __row           = ram_view.getUint16(window.S16_REG['CX'], window.little_endian);\r\n                const   __col           = ram_view.getUint16(window.S16_REG['DX'], window.little_endian);\r\n\r\n                if (__move_cursor(__row, __col) === false)\r\n                    ram_view.setUint8(window.S16_REG['RT'], 1);\r\n\r\n                return true;\r\n            }\r\n\r\n        };\r\n\r\n\r\n        return {\r\n\r\n            initialise_display:         _initialise_display,\r\n\r\n            clear_display:              _clear_display,\r\n\r\n            putchar:                    _putchar,\r\n\r\n            interrupt:                  _interrupt\r\n\r\n        };\r\n\r\n\r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/src/sys/dev/Display.js?");

/***/ }),

/***/ "./src/js/src/sys/dev/Keyboard.js":
/*!****************************************!*\
  !*** ./src/js/src/sys/dev/Keyboard.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Keyboard: () => (/* binding */ Keyboard)\n/* harmony export */ });\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/src/sys/dev/Keyboard.js          //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//\r\n//\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The Keyboard module.                                 //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const    Keyboard            = (\r\n\r\n        objConfigure,\r\n        messenger,\r\n        get_reg                         = false,\r\n        set_reg                         = false\r\n\r\n    ) =>\r\n    {\r\n\r\n\r\n        let     __keyval                = false;\r\n\r\n\r\n        const   _initialise             = (\r\n\r\n            ram_view,\r\n            _get_reg,\r\n            _set_reg\r\n\r\n        ) =>\r\n        {\r\n\r\n            get_reg                     = _get_reg;\r\n            set_reg                     = _set_reg;\r\n\r\n            window.addEventListener('keypress', event => {\r\n\r\n                if (! window.console_enabled)\r\n                    return;\r\n\r\n                event.preventDefault();\r\n\r\n                let     __flags         = get_reg('FL');\r\n                let     __key           = event.key;\r\n\r\n    //  Disable the stop bit in FL - this will\r\n    //  allow the system to resume execution.\r\n    //\r\n                __flags = __flags & (~0b00000100);\r\n\r\n                if (__key === 'Enter')\r\n                {\r\n                    __key = 13;\r\n                    ram_view.setUint8(window.S16_REG['FX'], __key, window.little_endian);\r\n                }\r\n                else\r\n                    ram_view.setUint8(window.S16_REG['FX'], __key.charCodeAt(0), window.little_endian);\r\n                \r\n                set_reg('FL', __flags);\r\n            });\r\n\r\n        };\r\n        \r\n\r\n///////////////////////////////////////////////////////////\r\n//  _interrupt()                                         //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _interrupt              = (\r\n\r\n            ram,\r\n            segment                     = 0\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   ram_view            = new DataView(ram.ram[segment]);\r\n\r\n    //  The instruction is at FX:\r\n    //\r\n            const   __instruction       = ram_view.getUint16(window.S16_REG['FX'], window.little_endian);\r\n\r\n            //const   __instruction       = ram.read_word_32(window.S16_REG['FX'],);\r\n           \r\n            messenger.verbose(`Keyboard interrupted, instruction = ${__instruction}...`);\r\n\r\n    //  1 is a getchar - the next byte of input will\r\n    //  be returned in AX.\r\n    //\r\n            if (__instruction === 1)\r\n            {\r\n                let     __flags         = get_reg('FL');\r\n\r\n    //  Block - setting this bit in FL causes the\r\n    //  system to hang - this bit will be turned\r\n    //  back off when a key is pressed and\r\n    //  execution will resume.\r\n    //\r\n                __flags = __flags |= 0b00000100;\r\n\r\n                set_reg('FL', __flags);\r\n            }\r\n\r\n        };\r\n\r\n\r\n        return {\r\n\r\n            initialise:                 _initialise,\r\n            interrupt:                  _interrupt\r\n\r\n        };\r\n\r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/src/sys/dev/Keyboard.js?");

/***/ }),

/***/ "./src/js/src/sys/dev/RAM.js":
/*!***********************************!*\
  !*** ./src/js/src/sys/dev/RAM.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RAM: () => (/* binding */ RAM)\n/* harmony export */ });\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/src/sys/dev/RAM.js               //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//\r\n//\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The RAM module.                                      //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const    RAM                 = (\r\n\r\n        objConfigure,\r\n        messenger\r\n\r\n    ) =>\r\n    {\r\n\r\n        const   _ram                    = [];\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __initialise_ram()                                   //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _initialise_ram         = (\r\n\r\n            segments                    = 16,\r\n            max_addr                    = 0xFFFF\r\n\r\n        ) =>\r\n        {\r\n\r\n            if (_ram.length)\r\n                return _ram;\r\n\r\n            messenger.verbose(` Initialising ram:\\n  Segments:     ${segments}\\n  segment size: ${(max_addr + 1)}`);\r\n\r\n            for (let segment_no = 0; segment_no < segments; segment_no++)\r\n                _ram.push(new ArrayBuffer(max_addr + 1));\r\n\r\n            return _ram;\r\n\r\n        };\r\n\r\n\r\n        const   __to_uint8_array        = (\r\n            \r\n            number,\r\n            size                        = 4\r\n        \r\n        ) =>\r\n        {\r\n\r\n            let arr                     = new Uint8Array(size);\r\n            \r\n            for (let i = 0; i < size; i++) {\r\n                arr[i] = number % 256;\r\n                number = Math.floor(number / 256);\r\n            }\r\n            \r\n            return arr;\r\n\r\n        };\r\n\r\n\r\n        const   __to_num               = uint8 =>\r\n        {\r\n            let number = 0;\r\n          \r\n            for (let i = 7; i >= 0; i--) {\r\n                number = number * 256 + uint8[i];\r\n            }\r\n          \r\n            return number;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _read_byte()                                         //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _read_byte              = (\r\n            \r\n            offset,\r\n            segment                     = 0\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   ram_view            = new DataView(_ram[segment]);\r\n\r\n            return ram_view.getUint8(offset);\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _read_word()                                         //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _read_word              = (\r\n\r\n            offset,\r\n            segment                     = 0\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   ram_view            = new DataView(_ram[segment]);\r\n            const   __word              = __to_uint8_array(ram_view.getUint16(offset), 2);\r\n\r\n            //return new DataView(__word.buffer).getUint16(0)\r\n\r\n            return __to_num(__word);\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _read_dword()                                        //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _read_dword             = (\r\n\r\n            offset,\r\n            segment                     = 0\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   ram_view            = new DataView(_ram[segment]);\r\n            const   __dword             = __to_uint8_array(ram_view.getUint16(offset), 4);\r\n\r\n            //return ram_view.getUint16(offset, window.little_endian);\r\n\r\n            return __to_num(__dword);\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _read_byte_32()                                      //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _read_byte_32           = (\r\n\r\n            offset,\r\n            segment                     = 0\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   ram_view            = new DataView(_ram[segment]);\r\n            \r\n            if (window.little_endian)\r\n                return ram_view.getUint8(offset);\r\n            else\r\n                return ram_view.getUint8(offset + 3);\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _read_byte_16()                                      //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _read_byte_16           = (\r\n\r\n            offset,\r\n            segment                     = 0\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   ram_view            = new DataView(_ram[segment]);\r\n            \r\n            if (window.little_endian)\r\n                return ram_view.getUint8(offset);\r\n            else\r\n                return ram_view.getUint8(offset + 1);\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _read_word_32()                                      //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _read_word_32           = (\r\n\r\n            offset,\r\n            segment                     = 0\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   ram_view            = new DataView(_ram[segment]);\r\n            const   __word              = new Uint8Array(2);\r\n\r\n            if (window.little_endian)\r\n            {\r\n                __word[0] = ram_view.getUint8(offset + 0);\r\n                __word[1] = ram_view.getUint8(offset + 1);\r\n            }\r\n            else\r\n            {\r\n                __word[0] = ram_view.getUint8(offset + 3);\r\n                __word[1] = ram_view.getUint8(offset + 2);\r\n            }\r\n\r\n            console.log(`>>> DATA ARRAY (WORD_ )=== ${new DataView(__word.buffer).getUint16(0, window.little_endian)}`)\r\n\r\n            return __to_num(__word);\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _write_byte()                                        //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _write_byte             = (\r\n\r\n            offset,\r\n            byte,\r\n            segment                     = 0\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   ram_view            = new DataView(_ram[segment]);\r\n\r\n            return ram_view.setUint8(offset, byte);\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _write_word()                                        //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _write_word             = (\r\n\r\n            offset,\r\n            word,\r\n            segment                     = 0\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   __ram_view          = new DataView(_ram[segment]);\r\n            const   __word              = __to_uint8_array(word);\r\n\r\n            if (window.little_endian)\r\n            {\r\n                __ram_view.setUint8(offset, __word[0]);\r\n                __ram_view.setUint8((offset + 1), __word[1]);\r\n            }\r\n            else\r\n            {\r\n                __ram_view.setUint8(offset, __word[1]);\r\n                __ram_view.setUint8((offset + 1), __word[0]);\r\n            }\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _write_dword()                                       //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _write_dword            = (\r\n\r\n            offset,\r\n            dword,\r\n            segment                     = 0\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   __ram_view          = new DataView(_ram[segment]);\r\n            const   __dword             = __to_uint8_array(dword);\r\n\r\n            if (window.little_endian)\r\n            {\r\n                __ram_view.setUint8(offset, __dword[0]);\r\n                __ram_view.setUint8((offset + 1), __dword[1]);\r\n                __ram_view.setUint8((offset + 2), __dword[2]);\r\n                __ram_view.setUint8((offset + 3), __dword[3]);\r\n            }\r\n            else\r\n            {\r\n                __ram_view.setUint8(offset, __dword[3]);\r\n                __ram_view.setUint8((offset + 1), __dword[2]);\r\n                __ram_view.setUint8((offset + 2), __dword[1]);\r\n                __ram_view.setUint8((offset + 3), __dword[0]);\r\n            }\r\n\r\n        };\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _write_word_32()                                     //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _write_word_32          = (\r\n\r\n            offset,\r\n            word,\r\n            segment                     = 0\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   ram_view            = new DataView(_ram[segment]);\r\n            const   __word              = new Uint8Array(2);\r\n\r\n            __word = word;\r\n\r\n            if (window.little_endian)\r\n            {\r\n                ram_view.setUint8(offset, __word[0]);\r\n                ram_view.setUint8((offset + 1), __word[1]);\r\n            }\r\n            else\r\n            {\r\n                ram_view.setUint8((offset + 3), __word[0]);\r\n                ram_view.setUint8((offset + 2), __word[1]);\r\n            }\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _write_byte_16()                                     //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _write_byte_16          = (\r\n\r\n            offset,\r\n            byte,\r\n            segment                     = 0\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   ram_view            = new DataView(_ram[segment]);\r\n            \r\n            if (window.little_endian)\r\n                return ram_view.getUint8(offset);\r\n            else\r\n                return ram_view.getUint8(offset + 1);\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _write_byte_32()                                     //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _write_byte_32          = (\r\n\r\n            offset,\r\n            byte,\r\n            segment                     = 0\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   ram_view            = new DataView(_ram[segment]);\r\n            \r\n            if (window.little_endian)\r\n                return ram_view.getUint8(offset);\r\n            else\r\n                return ram_view.getUint8(offset + 3);\r\n\r\n        };\r\n\r\n\r\n        return {\r\n\r\n            initialise_ram:             _initialise_ram,\r\n\r\n            ram:                        _ram,\r\n\r\n            read_byte:                  _read_byte,\r\n            read_word:                  _read_word,\r\n            read_dword:                 _read_dword,\r\n            read_byte_32:               _read_byte_32,\r\n            read_byte_16:               _read_byte_16,\r\n            read_word_32:               _read_word_32,\r\n\r\n            write_byte:                 _write_byte,\r\n            write_word:                 _write_word,\r\n            write_dword:                _write_dword,\r\n            write_word_32:              _write_word_32,\r\n            write_byte_16:              _write_byte_16,\r\n            write_byte_32:              _write_byte_32,\r\n\r\n\r\n        };\r\n\r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/src/sys/dev/RAM.js?");

/***/ }),

/***/ "./src/js/src/sys/dev/Timer.js":
/*!*************************************!*\
  !*** ./src/js/src/sys/dev/Timer.js ***!
  \*************************************/
/***/ (() => {

eval("///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/src/sys/dev/defs/Timer.js        //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  I was using setInterval as a timer/clock but it was\r\n//  far too slow.\r\n//\r\n//  So I tried a busy loop using performance.now() to\r\n//  calculate timeslices but it was causing the browser\r\n//  to hang...tricky.\r\n//\r\n//  Then I found this gem on github, which I STOLE!!!\r\n//\r\n//  All credit to Shaun Tan\r\n//\r\n//      https://gist.github.com/EvitanRelta)\r\n//\r\n//  You'll find this code here:\r\n//\r\n//      https://gist.github.com/EvitanRelta/c3d69dde4ab6879d4126dc3f676c4bdd\r\n//\r\n//  Thanks, Shaun!\r\n//\r\n\r\n    // For stopping the modified 'setInterval'\r\n    window._breakInterval = {}\r\n\r\n    // Replace 'setInterval'\r\n    window._setInterval = window.setInterval\r\n    window.setInterval = (func, time=0.001, ...args) => {\r\n        // If time >= 10ms, use default 'setInterval'\r\n        if (time >= 10)\r\n            return window._setInterval(func, time, ...args)\r\n        \r\n        // To avoid zero or negative timings\r\n        const minTime = 0.001\r\n        if (time <= 0)\r\n            time = minTime\r\n\r\n        const callsPer10ms = 10 / time\r\n        const intervalCode = window._setInterval(() => {\r\n            // Calls function 'callsPer10ms' times for every 10ms\r\n            for (let i = 0; i < callsPer10ms; i++) {\r\n                // Stops for loop when 'clearInterval' is called\r\n                if (window._breakInterval[intervalCode]) {\r\n                    delete window._breakInterval[intervalCode]\r\n                    break\r\n                }\r\n                func(...args)\r\n            }\r\n        }, 10)\r\n        window._breakInterval[intervalCode] = false\r\n        return intervalCode\r\n    }\r\n\r\n    // Replace 'clearInterval'\r\n    window._clearInterval = window.clearInterval\r\n    window.clearInterval = (intervalCode) => {\r\n        // Default 'clearInterval' behaviour\r\n        if (window._breakInterval[intervalCode] === undefined)\r\n            return window._clearInterval(intervalCode)\r\n\r\n        window._clearInterval(intervalCode)\r\n        window._breakInterval[intervalCode] = true\r\n    }\r\n\n\n//# sourceURL=webpack://s16/./src/js/src/sys/dev/Timer.js?");

/***/ }),

/***/ "./src/js/src/sys/dev/core/DisplayInfo.js":
/*!************************************************!*\
  !*** ./src/js/src/sys/dev/core/DisplayInfo.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DisplayInfo: () => (/* binding */ DisplayInfo)\n/* harmony export */ });\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/src/sys/dev/core/DisplayInfo.js  //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//\r\n//\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The DisplayInfo module.                              //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const    DisplayInfo         = (\r\n\r\n        objConfigure,\r\n        messenger\r\n\r\n    ) =>\r\n    {\r\n\r\n        let     _objDisplay             = {\r\n\r\n                                            'target-id':    false,\r\n                                            'target-el':    false,\r\n                                        \r\n                                            'terminal':     {\r\n                                                                'id':               false,\r\n                                                                'el':               false,\r\n                                                                'class':            false,\r\n                                                                'top':              0,\r\n                                                                'left':             0,\r\n                                                                'width':            0,\r\n                                                                'height':           0,\r\n                                                                'color':            0,\r\n                                                                'background-color': 0,\r\n                                                                'rows':             0,\r\n                                                                'cols':             0\r\n                                                            },\r\n\r\n                                            'cells':        {\r\n                                                                'id-prefix':        false,\r\n                                                                'class':            false,\r\n                                                                'font-family':      false,\r\n                                                                'font-size':        false,\r\n                                                                'width':            0,\r\n                                                                'height':           0,\r\n                                                                'color':            0,\r\n                                                                'background-color': 0\r\n                                                            },\r\n\r\n                                            'cursor':       {\r\n                                                                'blink':            1000,\r\n                                                                'color':            '#FFF',\r\n                                                                'background-color': '#000',\r\n                                                                'row':              0,\r\n                                                                'col':              0\r\n                                                            }\r\n\r\n                                        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __check_options()                                    //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __check_option          = (\r\n\r\n            option_name,\r\n            option_value,\r\n            set                         = false\r\n\r\n        ) =>\r\n        {\r\n\r\n            if (! set)\r\n            {\r\n                if (! objConfigure.hasOwnProperty(option_name))\r\n                    objConfigure[option_name] = option_value;\r\n            }\r\n            else\r\n            {\r\n                if (set === true)\r\n                    _objDisplay[option_name] = option_value\r\n                else\r\n                {\r\n                    if (! objConfigure.hasOwnProperty(option_name))\r\n                        _objDisplay[set][option_name] = option_value;\r\n                    else\r\n                        _objDisplay[set][option_name] = objConfigure[option_name];\r\n                }\r\n            }\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __display_error()                                    //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __display_error         = error_message =>\r\n        {\r\n\r\n            _objDisplay = false;\r\n            return messenger.error(error_message);\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __set_target()                                       //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __set_target            = () =>\r\n        {\r\n\r\n            __check_option('target-id', 'inner');\r\n\r\n            const   __target            = $(`#${objConfigure['target-id']}`);\r\n\r\n            if (! __target.length)\r\n                return __display_error(`  Error creating display - target-element '${objConfigure['target-id']}' not found`);\r\n        \r\n            _objDisplay['target-id'] = objConfigure['target-id'];\r\n            _objDisplay['target-el'] = __target;\r\n\r\n            messenger.verbose(`  Building terminal in target element '${_objDisplay['target-id']}'`);\r\n        \r\n        };\r\n        \r\n\r\n        const   __set_terminal          = () =>\r\n        {\r\n\r\n            __check_option('terminal', {}, true);\r\n\r\n            __check_option('id', 'terminal', 'terminal');\r\n            __check_option('class', 'terminal', 'terminal');\r\n            __check_option('color', 'rgba(64, 180, 120, 1)', 'terminal');\r\n            __check_option('background-color', 'rgba(0, 0, 0, 1)', 'terminal');\r\n\r\n            const   __height            = parseInt(_objDisplay['target-el'].css('height').replace('px', ''));\r\n            const   __width             = parseInt(_objDisplay['target-el'].css('width').replace('px', ''));\r\n\r\n            _objDisplay['terminal']['width'] = __width;\r\n            _objDisplay['terminal']['height'] = __height;\r\n\r\n            messenger.verbose(`   Terminal width: ${_objDisplay['terminal']['width']} `);\r\n            messenger.verbose(`   Terminal height: ${_objDisplay['terminal']['height']} `);\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __set_cells()                                        //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __set_cells             = () =>\r\n        {\r\n\r\n            __check_option('cells', {}, true);\r\n\r\n            __check_option('id-prefix', 'cell_', 'cells');\r\n            __check_option('class', 'cell', 'cells');\r\n            __check_option('font-family', 'vt323, monospace', 'cells');\r\n            __check_option('font-size', '22px', 'cells');\r\n            __check_option('color', 'rgba(64, 180, 120, 1)', 'cells');\r\n            __check_option('background-color', 'rgba(0, 0, 0, 0)', 'cells');\r\n            __check_option('test-cell', 'testcell', 'cells');\r\n\r\n            const   __cell = $(`#${_objDisplay['cells']['test-cell']}`);\r\n\r\n            if (! __cell.length)\r\n                return __display_error(`Can't find test-cell '${_objDisplay['cells']['test-cell']}'`);\r\n\r\n            _objDisplay['cells']['width'] = parseInt(__cell.css('width').replace('px', ''));\r\n            _objDisplay['cells']['height'] = (parseInt(_objDisplay['cells']['font-size'].replace('px', '')) - 3);\r\n\r\n            messenger.verbose(`   Cell width: ${_objDisplay['cells']['width']} px`);\r\n            messenger.verbose(`   Cell height: ${_objDisplay['cells']['height']} px`);\r\n\r\n            _objDisplay['terminal']['rows'] = Math.floor(_objDisplay['terminal']['height'] / _objDisplay['cells']['height']);\r\n            _objDisplay['terminal']['cols'] = Math.floor(_objDisplay['terminal']['width'] / _objDisplay['cells']['width']);\r\n            \r\n            messenger.verbose(`   Terminal rows: ${_objDisplay['terminal']['rows']} `);\r\n            messenger.verbose(`   Terminal columns: ${_objDisplay['terminal']['cols']} `);\r\n\r\n            _objDisplay['terminal']['top'] = ((_objDisplay['terminal']['height'] % _objDisplay['cells']['height']) / 2);\r\n            _objDisplay['terminal']['left'] = ((_objDisplay['terminal']['width'] % _objDisplay['cells']['width']) / 2);\r\n\r\n        };\r\n\r\n\r\n        const   __blink_cursor         = () =>\r\n        {\r\n\r\n            const   __row = _objDisplay['cursor']['row'];\r\n            const   __col = _objDisplay['cursor']['col'];\r\n\r\n            $(`.${_objDisplay['cells']['class']}`).removeClass('cursor_blink');\r\n            $(`.${_objDisplay['cells']['class']}`).removeClass('cursor');\r\n\r\n\r\n            if (_objDisplay['cursor']['state'])\r\n            {\r\n                $(`#${_objDisplay['cells']['id-prefix']}${__row}_${__col}`).removeClass('cursor_blink')\r\n                $(`#${_objDisplay['cells']['id-prefix']}${__row}_${__col}`).addClass('cursor')\r\n                \r\n                _objDisplay['cursor']['state'] = 0;\r\n            }\r\n            else\r\n            {\r\n                $(`#${_objDisplay['cells']['id-prefix']}${__row}_${__col}`).removeClass('cursor')\r\n                $(`#${_objDisplay['cells']['id-prefix']}${__row}_${__col}`).addClass('cursor_blink')\r\n\r\n                _objDisplay['cursor']['state'] = 1;\r\n            }\r\n\r\n            _objDisplay['cursor']['timer_id'] = setTimeout(() => {\r\n                __blink_cursor();\r\n            }, _objDisplay['cursor']['blink']);\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __disable_cursor()                                   //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __disable_cursor        = () =>\r\n        {\r\n\r\n            if (_objDisplay['cursor']['timer_id'])\r\n            {\r\n                clearTimeout(_objDisplay['cursor']['timer_id'])\r\n                _objDisplay['cursor']['timer_id'] = false;\r\n            }\r\n\r\n            $(`.${_objDisplay['cells']['class']}`).removeClass('cursor_blink');\r\n            $(`.${_objDisplay['cells']['class']}`).removeClass('cursor');\r\n            \r\n            _objDisplay['cursor']['state'] = 0;\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  _reset_cursor()                                      //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   _reset_cursor           = () =>\r\n        {\r\n\r\n            __disable_cursor();\r\n            __blink_cursor();\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __set_cursor()                                       //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __set_cursor            = (\r\n            \r\n            is_reset                    = false\r\n            \r\n        ) =>\r\n        {\r\n\r\n            __check_option('cursor', {}, true);\r\n\r\n            __check_option('blink', 500, 'cursor');\r\n            __check_option('row', 0, 'cursor');\r\n            __check_option('col', 0, 'cursor');\r\n            __check_option('state', 0, 'cursor');\r\n            __check_option('timer_id', false, 'cursor');\r\n\r\n            __blink_cursor();\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __build_terminal()                                   //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __build_terminal        = (\r\n\r\n            is_reset                    = false\r\n\r\n        ) =>\r\n        {\r\n\r\n            __check_option('flicker', false, 'terminal');\r\n\r\n            _objDisplay['target-el'].html(\r\n                `<div\r\n                    id=\"${_objDisplay['terminal']['id']}\"\r\n                    class=\"${_objDisplay['terminal']['class']}\"\r\n                    style=\"\r\n                        width:                  ${_objDisplay['terminal']['width']}px;\r\n                        height:                 ${_objDisplay['terminal']['height']}px;\r\n                        top:                    ${_objDisplay['terminal']['top']}px;\r\n                        left:                   ${_objDisplay['terminal']['left']}px;\r\n                        color:                  ${_objDisplay['terminal']['color']};\r\n                        background-color:       ${_objDisplay['terminal']['background-color']};\r\n                        padding:                0px;\r\n                    \"\r\n                >\r\n                    &nbsp;\r\n                </div>`\r\n            );\r\n\r\n            _objDisplay['terminal']['el'] = $(`#${_objDisplay['terminal']['id']}`);\r\n\r\n            if (_objDisplay['terminal']['flicker'])\r\n                _objDisplay['terminal']['el'].addClass('screen_flicker');\r\n\r\n            const   __rows              = _objDisplay['terminal']['rows'];\r\n            const   __cols              = _objDisplay['terminal']['cols'];\r\n\r\n            let     __html_string       = '';\r\n            let     __char_index        = 0;\r\n\r\n            for (let row = 0; row < __rows; row++)\r\n            {\r\n\r\n                const   __chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\\\"£$%^&*()_+-=[]{};'#:@~,./<>?\";\r\n\r\n\r\n                for (let col = 0; col < __cols; col++,  __char_index++)\r\n                {\r\n\r\n                    if  (__char_index >= __chars.length)\r\n                        __char_index = 0;\r\n\r\n                    let __char = __chars.substr(__char_index, 1);\r\n\r\n                    if (is_reset)\r\n                        __char = '';\r\n\r\n                    __html_string += `\r\n                        <div\r\n                            id=\"${_objDisplay['cells']['id-prefix']}${row}_${col}\"\r\n                            class=\"${_objDisplay['cells']['class']}\"\r\n                            style=\"\r\n                                top:                    ${(_objDisplay['cells']['height'] * row)}px;\r\n                                left:                   ${(_objDisplay['cells']['width'] * col)}px;\r\n                                width:                  ${_objDisplay['cells']['width']}px;\r\n                                height:                 ${_objDisplay['cells']['height']}px;\r\n                                font-family:            ${_objDisplay['cells']['font-family']};\r\n                                font-size:              ${_objDisplay['cells']['font-size']}px;\r\n                                line-height:            ${_objDisplay['cells']['height'] - 2}px;\r\n                                color:                  ${_objDisplay['cells']['color']};\r\n                                background-color:       ${_objDisplay['cells']['background-color']}px;\r\n                            \"\r\n                        >\r\n                            #\r\n                        </div>\r\n                    `;\r\n\r\n                }\r\n\r\n            }\r\n\r\n            _objDisplay['terminal']['el'].html(__html_string);\r\n\r\n            __set_cursor(is_reset);\r\n\r\n        };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __initialise()                                       //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __initialise            = (\r\n\r\n            is_reset                    = false\r\n\r\n        ) =>\r\n        {\r\n\r\n            if (is_reset)\r\n                __disable_cursor();\r\n           \r\n\r\n            __set_target();\r\n            __set_terminal();\r\n            __set_cells();\r\n\r\n            __build_terminal(is_reset);\r\n\r\n            _objDisplay['cursor']['reset'] = _reset_cursor;\r\n            \r\n        };\r\n\r\n\r\n        messenger.verbose(` Building terminal...`);\r\n\r\n        __initialise();\r\n\r\n\r\n        $(window).on('resize', () => {\r\n            messenger.verbose(` Resizing terminal...`);\r\n            __initialise(true);\r\n        });\r\n\r\n        return _objDisplay;\r\n\r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/src/sys/dev/core/DisplayInfo.js?");

/***/ }),

/***/ "./src/js/src/sys/dev/core/Loader.js":
/*!*******************************************!*\
  !*** ./src/js/src/sys/dev/core/Loader.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Loader: () => (/* binding */ Loader)\n/* harmony export */ });\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/src/sys/dev/core/Loader.js       //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//\r\n//\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The DisplayInfo module.                              //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const    Loader              = (\r\n\r\n        objConfigure,\r\n        messenger,\r\n        ram\r\n\r\n    ) =>\r\n    {\r\n\r\n        const   _load_file              = (\r\n            \r\n            file_name,\r\n            successCallback,\r\n            errorCallback\r\n\r\n        ) =>\r\n        {\r\n            function b64DecodeUnicode(str) {\r\n                // Going backwards: from bytestream, to percent-encoding, to original string.\r\n                return decodeURIComponent(atob(str).split('').map(function(c) {\r\n                    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n                }).join(''));\r\n            }\r\n\r\n            const req = new XMLHttpRequest();\r\n\r\n            req.overrideMimeType('text/plain; charset=x-user-defined');\r\n            req.open(\"GET\", file_name, true);\r\n            req.responseType = \"arraybuffer\";\r\n\r\n            req.onload = (event) => {\r\n                let arrayBuffer = req.response; // Note: not req.responseText\r\n                //let arrayBuffer = Uint8Array.from(req.response, c => c.charCodeAt(0));\r\n                function stringToArrayBuffer(str) {\r\n                    var buf = new ArrayBuffer(str.length);\r\n                    var bufView = new Uint8Array(buf);\r\n                \r\n                    for (var i=0, strLen=str.length; i<strLen; i++) {\r\n                        bufView[i] = str.charCodeAt(i);\r\n                    }\r\n                \r\n                    return buf;\r\n                }\r\n\r\n                //if (arrayBuffer) {\r\n                //alert(window.location.href)\r\n                if (window.location.href !== \"http://localhost:3000/\")\r\n                    arrayBuffer = b64DecodeUnicode(arrayBuffer);\r\n\r\n                     arrayBuffer = new Uint8Array(arrayBuffer);\r\n                // else\r\n                //     arrayBuffer = new Uint8Array(arrayBuffer);\r\n                \r\n                successCallback(arrayBuffer);\r\n                //}\r\n            };\r\n\r\n            req.send(null);\r\n\r\n        };\r\n\r\n\r\n        const   _load_exe               = (\r\n            \r\n            exe_data,\r\n            segment                     = 0\r\n\r\n        ) =>\r\n        {\r\n\r\n            const   __exe_data          = exe_data.buffer;\r\n\r\n            const   __src_view          = new DataView(__exe_data);\r\n            const   __dst_view          = new DataView(ram.ram[segment]);\r\n\r\n            let     byte_no = 0;\r\n\r\n            for (byte_no = 0; byte_no < __exe_data.byteLength; byte_no++)\r\n                __dst_view.setUint8(byte_no, __src_view.getUint8(byte_no));\r\n\r\n            messenger.verbose(`Copied EXE to ram - ${byte_no} bytes, total`);\r\n\r\n    //  The byte-order is stored in the header at offset 78,\r\n    //  we grab it here and set the window.little_endian\r\n    //  value to true if we're using little-endian byte\r\n    //  ordering and false if we're using big-endian.\r\n    //\r\n            const   __little            = __dst_view.getUint8(window.S16_HEADER_ENDIANESS);\r\n            const   __big               = __dst_view.getUint8(window.S16_HEADER_ENDIANESS + 1);\r\n            \r\n            if (__little === 0xFF && __big === 0x00)\r\n            {\r\n                messenger.verbose(` Byte ordering: little-endian`);\r\n                window.little_endian = true;\r\n            }\r\n            else if (__little === 0x00 && __big === 0xFF)\r\n            {\r\n                messenger.verbose(` Byte ordering: big-endian`);\r\n                window.little_endian = false;\r\n            }\r\n            else\r\n                return messenger.error(`Error - unknown byte-ordering set in header`);\r\n\r\n        };\r\n\r\n\r\n        return {\r\n\r\n            load_file:                  _load_file,\r\n            load_exe:                   _load_exe\r\n\r\n        };\r\n\r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/src/sys/dev/core/Loader.js?");

/***/ }),

/***/ "./src/js/src/sys/dev/defs/ExeHeader.js":
/*!**********************************************!*\
  !*** ./src/js/src/sys/dev/defs/ExeHeader.js ***!
  \**********************************************/
/***/ (() => {

eval("///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/src/sys/dev/defs/ExeHeader.js    //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//  See:\r\n//\r\n//      System16/core/defs/ExeHeader.js\r\n//\r\n//  For more information about these values.\r\n//\r\n\r\n\r\n    window.S16_HEADER_ID                = 0;\r\n\r\n        window.S16_ID                   = 's16exe';\r\n\r\n\r\n    window.S16_HEADER_MAJOR             = 7;\r\n    window.S16_HEADER_MINOR             = 8;\r\n    window.S16_HEADER_PATCH             = 9;\r\n\r\n        window.S16_MAJOR                = 1;\r\n        window.S16_MINOR                = 0;\r\n        window.S16_PATCH                = 0;\r\n\r\n\r\n    window.S16_HEADER_DAY               = 10;\r\n    window.S16_HEADER_MONTH             = 11;\r\n    window.S16_HEADER_YEAR              = 12;\r\n\r\n\r\n    window.S16_HEADER_MODEL             = 14;\r\n\r\n        window.S16_MODEL_FLAT           = 0b1000;\r\n        window.S16_MODEL_DUAL           = 0b1100;\r\n        window.S16_MODEL_MULTI          = 0b1110;\r\n        window.S16_MODEL_SPLIT          = 0b1111;\r\n\r\n        window.S16_MODEL_DEFAULT        = window.S16_MODEL_FLAT;\r\n\r\n\r\n    window.S16_HEADER_EXESIZE           = 16;\r\n    window.S16_HEADER_RO                = 20;\r\n    window.S16_HEADER_RW                = 24;\r\n    window.S16_HEADER_CODE              = 28;\r\n\r\n\r\n    window.S16_HEADER_MODE              = 32;\r\n\r\n        window.S16_MODE_S8              = 's8';\r\n        window.S16_MODE_S16             = 's16';\r\n        window.S16_MODE_S32             = 's32';\r\n\r\n\r\n    window.S16_HEADER_SEGMENTS          = 34;\r\n    window.S16_HEADER_MAXADDR           = 38;\r\n\r\n        window.S16_MODE                 = window.S16_MODE_S16;\r\n        window.S16_SEGMENTS             = 16;\r\n        window.S16_MAXADDR              = 0xFFFF;\r\n\r\n\r\n    window.S16_HEADER_VRAMSIZE          = 42;\r\n\r\n        window.S16_VRAM_DEFAULT         = 0;\r\n\r\n\r\n    window.S16_HEADER_MAIN              = 46;\r\n\r\n\r\n    window.S16_HEADER_VTABLE            = 50;\r\n\r\n    window.S16_HEADER_ENDIANESS         = 78;\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/src/sys/dev/defs/ExeHeader.js?");

/***/ }),

/***/ "./src/js/src/sys/dev/defs/Mnemonics.js":
/*!**********************************************!*\
  !*** ./src/js/src/sys/dev/defs/Mnemonics.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/src/sys/dev/defs/Mnemonics.js    //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//\r\n//\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  These are used as keys to create the window\r\n//  S16_MNEMONICS object.\r\n//\r\n\r\n    window.S16_MNEMONIC_DEV             = 'dev';\r\n    window.S16_MNEMONIC_CALL            = 'call';\r\n    window.S16_MNEMONIC_INT             = 'int';\r\n    window.S16_MNEMONIC_RET             = 'ret';\r\n    window.S16_MNEMONIC_WAIT            = 'wait';\r\n\r\n\r\n    window.S16_MNEMONIC_MOV8            = 'mov8';\r\n    window.S16_MNEMONIC_MOV16           = 'mov16';\r\n    window.S16_MNEMONIC_MOV32           = 'mov32';\r\n\r\n\r\n    window.S16_MNEMONIC_PUSH8           = 'push8';\r\n    window.S16_MNEMONIC_PUSH16          = 'push16';\r\n    window.S16_MNEMONIC_PUSH32          = 'push32';\r\n\r\n    window.S16_MNEMONIC_POP8            = 'pop8';\r\n    window.S16_MNEMONIC_POP16           = 'pop16';\r\n    window.S16_MNEMONIC_POP32           = 'pop32';\r\n\r\n\r\n    window.S16_MNEMONIC_PAR8            = 'ins8';\r\n    window.S16_MNEMONIC_PAR16           = 'ins16';\r\n    window.S16_MNEMONIC_PAR32           = 'ins32';\r\n\r\n\r\n    window.S16_MNEMONIC_ADD8            = 'add8';\r\n    window.S16_MNEMONIC_ADD16           = 'add16';\r\n    window.S16_MNEMONIC_ADD32           = 'add32';\r\n\r\n    window.S16_MNEMONIC_SUB8            = 'sub8';\r\n    window.S16_MNEMONIC_SUB16           = 'sub16';\r\n    window.S16_MNEMONIC_SUB32           = 'sub32';\r\n\r\n\r\n    window.S16_MNEMONIC_CMP8            = 'cmp8';\r\n    window.S16_MNEMONIC_CMP16           = 'cmp16';\r\n    window.S16_MNEMONIC_CMP32           = 'cmp32';\r\n\r\n\r\n    window.S16_MNEMONIC_JMP             = 'jmp';\r\n    window.S16_MNEMONIC_JE              = 'je';\r\n    window.S16_MNEMONIC_JNE             = 'jne';\r\n    window.S16_MNEMONIC_JGE             = 'jge';\r\n    window.S16_MNEMONIC_JLE             = 'jle';\r\n\r\n\r\n    window.S16_MNEMONICS                =\r\n    {\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Call/int/return\r\n//\r\n        [window.S16_MNEMONIC_DEV]:      {\r\n                                            'opcode':       0x0A,\r\n                                            'params':       [ 1, 4, 4 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_CALL]:     {\r\n                                            'opcode':       0x1A,\r\n                                            'params':       [ 4 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_INT]:      {\r\n                                            'opcode':       0x1B,\r\n                                            'params':       [ 1 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_RET]:      {\r\n                                            'opcode':       0x1C,\r\n                                            'params':       [ 1 ]\r\n                                        },\r\n        [__webpack_require__.g.S16_MNEMONIC_WAIT]:     {\r\n                                            'opcode':       0x1D,\r\n                                            'params':       [ 4 ]\r\n                                        },\r\n                                        \r\n\r\n///////////////////////////////////////////////////////////\r\n//  mov instructions.\r\n//\r\n        [window.S16_MNEMONIC_MOV8]:     {\r\n                                            'opcode':       0x20,\r\n                                            'params':       [ 1, 1 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_MOV16]:    {\r\n                                            'opcode':       0x21,\r\n                                            'params':       [ 2, 2 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_MOV32]:    {\r\n                                            'opcode':       0x22,\r\n                                            'params':       [ 4, 4 ]\r\n                                        },\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Push and pop instructions\r\n//\r\n        [window.S16_MNEMONIC_PUSH8]:    {\r\n                                            'opcode':       0x2A,\r\n                                            'params':       [ 1 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_PUSH16]:   {\r\n                                            'opcode':       0x2B,\r\n                                            'params':       [ 2 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_PUSH32]:   {\r\n                                            'opcode':       0x2C,\r\n                                            'params':       [ 4 ]\r\n                                        },\r\n\r\n        [window.S16_MNEMONIC_POP8]:    {\r\n                                            'opcode':       0x2D,\r\n                                            'params':       [ 1 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_POP16]:    {\r\n                                            'opcode':       0x2E,\r\n                                            'params':       [ 2 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_POP32]:    {\r\n                                            'opcode':       0x2F,\r\n                                            'params':       [ 4 ]\r\n                                        },\r\n\r\n    //  \r\n        [__webpack_require__.g.S16_MNEMONIC_PAR8]:     {\r\n                                            'opcode':       0x30,\r\n                                            'params':       [ 1, 4 ]\r\n                                        },\r\n        [__webpack_require__.g.S16_MNEMONIC_PAR16]:    {\r\n                                            'opcode':       0x31,\r\n                                            'params':       [ 2, 4 ]\r\n                                        },\r\n        [__webpack_require__.g.S16_MNEMONIC_PAR32]:    {\r\n                                            'opcode':       0x32,\r\n                                            'params':       [ 4, 4 ]\r\n                                        },\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Mathematical operations\r\n//\r\n        [window.S16_MNEMONIC_ADD8]:     {\r\n                                            'opcode':       0x40,\r\n                                            'params':       [ 1, 1 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_ADD16]:    {\r\n                                            'opcode':       0x41,\r\n                                            'params':       [ 2, 2 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_ADD32]:    {\r\n                                            'opcode':       0x42,\r\n                                            'params':       [ 4, 4 ]\r\n                                        },\r\n\r\n        [window.S16_MNEMONIC_SUB8]:     {\r\n                                            'opcode':       0x43,\r\n                                            'params':       [ 1, 1 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_SUB16]:    {\r\n                                            'opcode':       0x44,\r\n                                            'params':       [ 2, 2 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_SUB32]:    {\r\n                                            'opcode':       0x0045,\r\n                                            'params':       [ 4, 4 ]\r\n                                        },\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Evaluation/comparison instructions\r\n//\r\n        [window.S16_MNEMONIC_CMP8]:     {\r\n                                            'opcode':       0x50,\r\n                                            'params':       [ 1, 1 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_CMP16]:    {\r\n                                            'opcode':       0x51,\r\n                                            'params':       [ 2, 2 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_CMP32]:    {\r\n                                            'opcode':       0x52,\r\n                                            'params':       [ 4, 4 ]\r\n                                        },\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Jump instructions\r\n//\r\n        [window.S16_MNEMONIC_JMP]:      {\r\n                                            'opcode':       0x60,\r\n                                            'params':       [ 4 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_JE]:       {\r\n                                            'opcode':       0x61,\r\n                                            'params':       [ 4 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_JNE]:      {\r\n                                            'opcode':       0x62,\r\n                                            'params':       [ 4 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_JGE]:      {\r\n                                            'opcode':       0x63,\r\n                                            'params':       [ 4 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_JLE]:      {\r\n                                            'opcode':       0x64,\r\n                                            'params':       [ 4 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_JGT]:      {\r\n                                            'opcode':       0x65,\r\n                                            'params':       [ 4 ]\r\n                                        },\r\n        [window.S16_MNEMONIC_JLT]:      {\r\n                                            'opcode':       0x66,\r\n                                            'params':       [ 4 ]\r\n                                        }\r\n\r\n    };\r\n\r\n\r\n    window.S16_OPCODES                  =\r\n    {\r\n\r\n        [`__op_0`]:                     {\r\n                                            'mnemonic':     'end',\r\n                                            'params':       []\r\n                                        },\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Call/int/return\r\n//\r\n        [`__op_${0x0A}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_DEV,\r\n                                            'params':       [ 1, 4, 4 ]\r\n                                        },\r\n        [`__op_${0x1A}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_CALL,\r\n                                            'params':       [ 4 ]\r\n                                        },\r\n        [`__op_${0x1B}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_INT,\r\n                                            'params':       [ 1 ]\r\n                                        },\r\n        [`__op_${0x1C}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_RET,\r\n                                            'params':       [ 1 ]\r\n                                        },\r\n        [`__op_${0x1D}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_WAIT,\r\n                                            'params':       [ 4 ]\r\n                                        },\r\n                                        \r\n\r\n///////////////////////////////////////////////////////////\r\n//  mov instructions.\r\n//\r\n        [`__op_${0x20}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_MOV8,\r\n                                            'params':       [ 1, 1 ]\r\n                                        },\r\n        [`__op_${0x21}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_MOV16,\r\n                                            'params':       [ 2, 2 ]\r\n                                        },\r\n        [`__op_${0x22}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_MOV32,\r\n                                            'params':       [ 4, 4 ]\r\n                                        },\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Push and pop instructions\r\n//\r\n        [`__op_${0x2A}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_PUSH8,\r\n                                             'params':       [ 1 ]\r\n                                        },\r\n        [`__op_${0x2B}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_PUSH16,\r\n                                            'params':       [ 2 ]\r\n                                        },\r\n        [`__op_${0x2C}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_PUSH32,\r\n                                            'params':       [ 4 ]\r\n                                        },\r\n\r\n        [`__op_${0x2D}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_POP8,\r\n                                            'params':       [ 1 ]\r\n                                        },\r\n        [`__op_${0x2E}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_POP16,\r\n                                            'params':       [ 2 ]\r\n                                        },\r\n        [`__op_${0x2F}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_POP32,\r\n                                            'params':       [ 4 ]\r\n                                        },\r\n\r\n\r\n        [`__op_${0x30}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_PAR8,\r\n                                            'params':       [ 1, 4 ]\r\n                                        },\r\n        [`__op_${0x31}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_PAR16,\r\n                                            'params':       [ 2, 4 ]\r\n                                        },\r\n        [`__op_${0x32}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_PAR32,\r\n                                            'params':       [ 4, 4 ]\r\n                                        },\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Mathematical operations\r\n//\r\n        [`__op_${0x40}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_ADD8,\r\n                                            'params':       [ 1, 1 ]\r\n                                        },\r\n        [`__op_${0x41}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_ADD16,\r\n                                            'params':       [ 2, 2 ]\r\n                                        },\r\n        [`__op_${0x42}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_ADD32,\r\n                                            'params':       [ 4, 4 ]\r\n                                        },\r\n\r\n        [`__op_${0x43}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_SUB8,\r\n                                            'params':       [ 1, 1 ]\r\n                                        },\r\n        [`__op_${0x44}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_SUB16,\r\n                                            'params':       [ 2, 2 ]\r\n                                        },\r\n        [`__op_${0x45}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_SUB32,\r\n                                            'params':       [ 4, 4 ]\r\n                                        },\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Evaluation/comparison instructions\r\n//\r\n        [`__op_${0x50}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_CMP8,\r\n                                            'params':       [ 1, 1 ]\r\n                                        },\r\n        [`__op_${0x51}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_CMP16,\r\n                                            'params':       [ 2, 2 ]\r\n                                        },\r\n        [`__op_${0x52}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_CMP32,\r\n                                            'params':       [ 4, 4 ]\r\n                                        },\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Jump instructions\r\n//\r\n        [`__op_${0x60}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_JMP,\r\n                                            'params':       [ 4 ]\r\n                                        },\r\n        [`__op_${0x61}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_JE,\r\n                                            'params':       [ 4 ]\r\n                                        },\r\n        [`__op_${0x62}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_JNE,\r\n                                            'params':       [ 4 ]\r\n                                        },\r\n        [`__op_${0x63}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_JGE,\r\n                                            'params':       [ 4 ]\r\n                                        },\r\n        [`__op_${0x64}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_JLE,\r\n                                            'params':       [ 4 ]\r\n                                        },\r\n        [`__op_${0x65}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_JGT,\r\n                                            'params':       [ 4 ]\r\n                                        },\r\n        [`__op_${0x66}`]:               {\r\n                                            'mnemonic':     window.S16_MNEMONIC_JLT,\r\n                                            'params':       [ 4 ]\r\n                                        }\r\n\r\n    };\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Will return mnemonic information based on the opcode.\r\n//\r\n    window.S16_MNEMONIC_BY_OPCODE       = opcode =>\r\n    {\r\n\r\n        let     _objMnemonic            = false;\r\n\r\n\r\n        Object.keys(window.S16_MNEMONICS).forEach((key, index) => {\r\n\r\n            if (_objMnemonic)\r\n                return;\r\n\r\n            if (window.S16_MNEMONICS[key].opcode === opcode)\r\n                _objMnemonic = {\r\n                    'mnemonic':         key,\r\n                    'opcode':           opcode,\r\n                    'params':           window.S16_MNEMONICS[key].params\r\n                };\r\n\r\n        });\r\n\r\n        return _objMnemonic;\r\n\r\n    };\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  Let's talk about-ing...opcode modifiers!\r\n//\r\n//  Are these a thing? I dunno, I made 'em up - these bits\r\n//  are set in the opcode to specify how an operand is to\r\n//  be handled.\r\n//\r\n//  All instructions are 16-bit, the lest-significant\r\n//  byte stores the actual opcode, e.g mov32 is 0x0022 or\r\n//  0000 0000 0010 0010 in binary.\r\n//\r\n//  If we find an instruction like:\r\n//\r\n//      mov32   AX, #BX\r\n//\r\n//  We are using two different addressing modes:\r\n//\r\n//      AX      - direct addressing mode\r\n//      #BX     - indirect\r\n//\r\n//  In the case of AX - AX is a register but it's also\r\n//  a location in RAM (the register buffer is stored\r\n//  in RAM) so the reference AX translates to the\r\n//  actual address of AX in the register buffer.\r\n//\r\n//  Thus, no modifier is required, we are saying \"move\r\n//  operand 2 into the address of AX\", essentially,\r\n//  we could just as easily hard-code the literal\r\n//  address of the AX register (84), it's basically\r\n//  the same thing:\r\n//\r\n//      mov32   84, #BX\r\n//\r\n//  In the case of #BX we're using the # modifier\r\n//  which tells s16 that we're not interested in the\r\n//  address of BX, we don't want to put the address\r\n//  of BX in AX, but that BX contains an address\r\n//  that points to the value we want, in this case\r\n//  we set a modifier in the mov32 opcode:\r\n//\r\n//      0100 0000 0010 0010\r\n//       |\r\n//       +--- operand 2 is an indirect reference\r\n//\r\n//  If we want to move a literal value that isn't the\r\n//  the address of anything we use the % modifier:\r\n//\r\n//      mov32   AX, %20\r\n//      mov8    BX, #AX\r\n//\r\n//  Here we put the literal value 20 into the AX\r\n//  register with a mov32, the opcode would be:\r\n//\r\n//      0000 0100 0010 0010\r\n//            |\r\n//            +--- Operand 2 is a literal value\r\n//\r\n//  In the following line we are essentially moving\r\n//  the value at address 20 (whatever that may be)\r\n//  into BX - the opcode would look like this:\r\n//\r\n//      0100 0000 0010 0000\r\n//\r\n//  This means to move a value from a register to\r\n//  another location we use the % modifier:\r\n//\r\n//      AX      - Translates to the address of AX\r\n//      %AX     - The value of AX\r\n//      #AX     - The value at the address pointed to\r\n//                by AX\r\n//\r\n//  So doing something like:\r\n//\r\n//      mov8    #AX, %BX\r\n//\r\n//  Would generate an opcode like:\r\n//\r\n//      1000 0100 0010 0000\r\n//\r\n//  Naturally, this system won't work for instructions\r\n//  with more than 4 parameters - luckily, there are\r\n//  none!\r\n//\r\n//  Anyway - enough rambling, the modifiers are defined\r\n//  as 4-element arrays to made the modification for each\r\n//  possible operand easier, see:\r\n//\r\n//      System/s16l/src/code/MaoCode.mjs\r\n//\r\n//  For more info.\r\n//\r\n\r\n    window.S16_MOD_INDIRECT             =\r\n    [\r\n\r\n        0b10000000,\r\n        0b01000000,\r\n        0b00100000,\r\n        0b00010000\r\n\r\n    ];\r\n\r\n        window.S16_ADDRMODE_INDIRECT    = '#';\r\n\r\n\r\n    window.S16_MOD_LITERAL              =\r\n    [\r\n\r\n        0b00001000,\r\n        0b00000100,\r\n        0b00000010,\r\n        0b00000001\r\n\r\n    ];\r\n\r\n        window.S16_ADDRMODE_LITERAL     = '%'\r\n\n\n//# sourceURL=webpack://s16/./src/js/src/sys/dev/defs/Mnemonics.js?");

/***/ }),

/***/ "./src/js/src/sys/dev/defs/Registers.js":
/*!**********************************************!*\
  !*** ./src/js/src/sys/dev/defs/Registers.js ***!
  \**********************************************/
/***/ (() => {

eval("///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/src/sys/dev/defs//Registers.js   //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//\r\n//\r\n\r\n\r\n    window.S16_REGBUF_OFFSET            = 80;\r\n    window.S16_REGBUF_LENGTH            = 60;\r\n\r\n\r\n    window.S16_REG_CS                   = 'CS';\r\n    window.S16_REG_DS                   = 'DS';\r\n    window.S16_REG_SS                   = 'SS';\r\n\r\n    window.S16_REG_BP                   = 'BP';\r\n    window.S16_REG_IP                   = 'IP';\r\n    window.S16_REG_SP                   = 'SP';\r\n\r\n    window.S16_REG_HB                   = 'HB';\r\n    window.S16_REG_HP                   = 'HP';\r\n\r\n    window.S16_REG_RT                   = 'RT';\r\n    window.S16_REG_FL                   = 'FL';\r\n\r\n    window.S16_REG_OI                   = 'OI';\r\n    window.S16_REG_II                   = 'II';\r\n    \r\n    window.S16_REG_AX                   = 'AX';\r\n    window.S16_REG_BX                   = 'BX';\r\n    window.S16_REG_CX                   = 'CX';\r\n    window.S16_REG_DX                   = 'DX';\r\n    window.S16_REG_EX                   = 'EX';\r\n    window.S16_REG_FX                   = 'FX';\r\n\r\n    window.S16_REG                      =\r\n    {\r\n        \r\n        [window.S16_REG_CS]:            (window.S16_REGBUF_OFFSET + 0x00),\r\n        [window.S16_REG_DS]:            (window.S16_REGBUF_OFFSET + 0x04),\r\n        [window.S16_REG_SS]:            (window.S16_REGBUF_OFFSET + 0x08),\r\n        \r\n        [window.S16_REG_BP]:            (window.S16_REGBUF_OFFSET + 0x0C),\r\n        [window.S16_REG_IP]:            (window.S16_REGBUF_OFFSET + 0x10),\r\n        [window.S16_REG_SP]:            (window.S16_REGBUF_OFFSET + 0x14),\r\n        \r\n        [window.S16_REG_HS]:            (window.S16_REGBUF_OFFSET + 0x18),\r\n        [window.S16_REG_HP]:            (window.S16_REGBUF_OFFSET + 0x1C),\r\n\r\n        [window.S16_REG_RT]:            (window.S16_REGBUF_OFFSET + 0x20),\r\n        [window.S16_REG_FL]:            (window.S16_REGBUF_OFFSET + 0x21),\r\n        \r\n        [window.S16_REG_OI]:            (window.S16_REGBUF_OFFSET + 0x22),\r\n        [window.S16_REG_II]:            (window.S16_REGBUF_OFFSET + 0x23),\r\n\r\n        [window.S16_REG_AX]:            (window.S16_REGBUF_OFFSET + 0x24),\r\n        [window.S16_REG_BX]:            (window.S16_REGBUF_OFFSET + 0x28),\r\n        [window.S16_REG_CX]:            (window.S16_REGBUF_OFFSET + 0x2C),\r\n        [window.S16_REG_DX]:            (window.S16_REGBUF_OFFSET + 0x30),\r\n        [window.S16_REG_EX]:            (window.S16_REGBUF_OFFSET + 0x34),\r\n        [window.S16_REG_FX]:            (window.S16_REGBUF_OFFSET + 0x38)\r\n\r\n    };\r\n\r\n    \n\n//# sourceURL=webpack://s16/./src/js/src/sys/dev/defs/Registers.js?");

/***/ }),

/***/ "./src/js/src/sys/s16.js":
/*!*******************************!*\
  !*** ./src/js/src/sys/s16.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s16: () => (/* binding */ s16)\n/* harmony export */ });\n/* harmony import */ var _sys_dev_defs_ExeHeader_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../sys/dev/defs/ExeHeader.js */ \"./src/js/src/sys/dev/defs/ExeHeader.js\");\n/* harmony import */ var _sys_dev_defs_ExeHeader_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_sys_dev_defs_ExeHeader_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _sys_dev_defs_Registers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sys/dev/defs/Registers.js */ \"./src/js/src/sys/dev/defs/Registers.js\");\n/* harmony import */ var _sys_dev_defs_Registers_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_sys_dev_defs_Registers_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _sys_dev_defs_Mnemonics_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../sys/dev/defs/Mnemonics.js */ \"./src/js/src/sys/dev/defs/Mnemonics.js\");\n/* harmony import */ var _sys_dev_defs_Mnemonics_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_sys_dev_defs_Mnemonics_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Messenger_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../Messenger.js */ \"./src/js/src/Messenger.js\");\n/* harmony import */ var _dev_CPU_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dev/CPU.js */ \"./src/js/src/sys/dev/CPU.js\");\n/* harmony import */ var _dev_RAM_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dev/RAM.js */ \"./src/js/src/sys/dev/RAM.js\");\n/* harmony import */ var _dev_Display_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./dev/Display.js */ \"./src/js/src/sys/dev/Display.js\");\n/* harmony import */ var _dev_Keyboard_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dev/Keyboard.js */ \"./src/js/src/sys/dev/Keyboard.js\");\n/* harmony import */ var _dev_core_Loader_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./dev/core/Loader.js */ \"./src/js/src/sys/dev/core/Loader.js\");\n///////////////////////////////////////////////////////////\r\n//  System16/s16/src/js/src/sys/s16/js                   //\r\n///////////////////////////////////////////////////////////\r\n//\r\n//\r\n//\r\n\r\n    \r\n    \r\n    \r\n\r\n\r\n    \r\n\r\n\r\n    \r\n    \r\n    \r\n    \r\n\r\n\r\n    \r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  The s16 module.                                      //\r\n///////////////////////////////////////////////////////////\r\n//\r\n    const    s16                 = (\r\n\r\n        objConfigure                    = {\r\n        \r\n///////////////////////////////////////////////////////////\r\n//  Terminal configuration.\r\n//\r\n            'font-family':              'vt323, monospace',\r\n            'font-size':                '22px',\r\n            'target-id':                'display',\r\n            'terminal-id':              'terminal',\r\n            'terminal-class':           'terminal',\r\n            'cell-class':               'cell',\r\n            'test-cell':                'test_cell',\r\n            'color':                    'rgba(132, 240, 160, 1)',\r\n            'flicker':                  true,\r\n            'blink':                    1000,\r\n\r\n            'debug':                    false,\r\n            'be_verbose':               true\r\n\r\n        \r\n        }\r\n\r\n    ) =>\r\n    {\r\n\r\n        const   __messenger             = (0,_Messenger_js__WEBPACK_IMPORTED_MODULE_3__.Messenger)(objConfigure);\r\n\r\n\r\n        __messenger.verbose(`s16 initialising...`);\r\n\r\n\r\n        const   __ram                   = (0,_dev_RAM_js__WEBPACK_IMPORTED_MODULE_5__.RAM)(\r\n                                            objConfigure,\r\n                                            __messenger\r\n                                        );\r\n\r\n\r\n        const   __display               = (0,_dev_Display_js__WEBPACK_IMPORTED_MODULE_6__.Display)(\r\n                                            objConfigure,\r\n                                            __messenger\r\n                                        );\r\n\r\n\r\n        let     __keyboard              = (0,_dev_Keyboard_js__WEBPACK_IMPORTED_MODULE_7__.Keyboard)(\r\n                                            objConfigure,\r\n                                            __messenger\r\n                                        );\r\n\r\n\r\n        const   __loader                = (0,_dev_core_Loader_js__WEBPACK_IMPORTED_MODULE_8__.Loader)(\r\n                                            objConfigure,\r\n                                            __messenger,\r\n                                            __ram\r\n                                        );\r\n\r\n\r\n        let     _segment                = 0;\r\n\r\n\r\n        let     _process                = (0,_dev_CPU_js__WEBPACK_IMPORTED_MODULE_4__.CPU)(\r\n                                            objConfigure,\r\n                                            [\r\n                                                __ram,\r\n                                                __display,\r\n                                                __keyboard\r\n                                            ],\r\n                                            __messenger,\r\n                                            __ram\r\n                                        );\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n//  __initialise()                                       //\r\n///////////////////////////////////////////////////////////\r\n//\r\n        const   __initialise            = () =>\r\n        {\r\n\r\n    //  Initialise the \"devices\", see:\r\n    //\r\n    //      System16/s16/src/js/src/sys/dev/\r\n    //\r\n            __ram.initialise_ram(16, 0xFFFF);\r\n            __display.initialise_display();\r\n        \r\n            __messenger.verbose(`s16 ready, attempting to load exe...`);\r\n\r\n            __loader.load_file(\r\n                window.s16_exe_path,\r\n                function (data) \r\n                {\r\n    //  Boot - load the executable into segment\r\n    //  0 of RAM.\r\n    //\r\n                    __messenger.verbose(` Loaded s16 executable (${data.byteLength} bytes): ` + data);\r\n                    __loader.load_exe(\r\n                        data,\r\n                        0\r\n                    );\r\n\r\n    //  TODO: Header check\r\n    //\r\n                    _process.run(0);\r\n\r\n                },\r\n                function (err)\r\n                {\r\n                    console.log(`error: ` + err.error.msg());\r\n                }\r\n            );\r\n\r\n        };\r\n\r\n\r\n        __initialise();\r\n\r\n\r\n        return {\r\n\r\n        };\r\n\r\n    };\r\n\r\n\n\n//# sourceURL=webpack://s16/./src/js/src/sys/s16.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/Bootstrap.js");
/******/ 	
/******/ })()
;